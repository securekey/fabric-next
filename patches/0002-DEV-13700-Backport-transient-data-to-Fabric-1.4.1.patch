From d145d4369e02f0b16b45213d8add8f02daeefc5d Mon Sep 17 00:00:00 2001
From: Baha Shaaban <baha.shaaban@securekey.com>
Date: Thu, 23 May 2019 18:14:08 -0400
Subject: [PATCH 2/3] [DEV-13700] Backport transient data to Fabric 1.4.1

Change-Id: Iacbdc708fd5b7fa8863f0653578dbcc3d2028831
Signed-off-by: Baha Shaaban <baha.shaaban@securekey.com>
---
 core/endorser/endorser.go                          |   9 +-
 .../kvledger/txmgmt/rwsetutil/rwset_builder.go     |   2 +-
 .../kvledger/txmgmt/rwsetutil/rwset_proto_util.go  |   5 +-
 core/ledger/ledger_interface.go                    |   2 +
 core/ledger/ledgermgmt/ledger_mgmt.go              |   3 +
 core/ledger/pvtdatastorage/store.go                |  15 +
 core/peer/peer.go                                  |  50 +-
 core/peer/peer_impl.go                             |  10 +-
 go.mod                                             |  10 +
 go.sum                                             |  16 +-
 gossip/privdata/coordinator.go                     |  19 +-
 gossip/privdata/coordinator_test.go                |  18 +
 gossip/privdata/dissemination.go                   |  33 +
 gossip/privdata/distributor.go                     |  23 +-
 gossip/privdata/distributor_test.go                |   4 +
 gossip/service/gossip_service.go                   |  13 +-
 gossip/service/gossip_service_test.go              |  30 +-
 gossip/service/integration_test.go                 |   8 +-
 gossip/state/state.go                              |  23 +-
 gossip/state/state_test.go                         |   8 +-
 peer/chaincode/common.go                           |  58 +-
 peer/chaincode/transientcollconfig_test.go         |  64 ++
 peer/node/start.go                                 |  15 +-
 protos/common/collection.pb.go                     | 140 +++--
 protos/common/collection.proto                     |  17 +-
 protos/gossip/extensions.go                        |   7 +
 protos/gossip/message.pb.go                        | 679 ++++++++++++++++-----
 protos/gossip/message.proto                        |  46 +-
 28 files changed, 1064 insertions(+), 263 deletions(-)
 create mode 100644 gossip/privdata/dissemination.go
 create mode 100644 peer/chaincode/transientcollconfig_test.go

diff --git a/core/endorser/endorser.go b/core/endorser/endorser.go
index 3a891394..e8b8d267 100644
--- a/core/endorser/endorser.go
+++ b/core/endorser/endorser.go
@@ -23,6 +23,7 @@ import (
 	"github.com/hyperledger/fabric/core/common/ccprovider"
 	"github.com/hyperledger/fabric/core/common/validation"
 	"github.com/hyperledger/fabric/core/ledger"
+	xendorser "github.com/hyperledger/fabric/extensions/endorser"
 	"github.com/hyperledger/fabric/protos/common"
 	pb "github.com/hyperledger/fabric/protos/peer"
 	"github.com/hyperledger/fabric/protos/transientstore"
@@ -256,6 +257,7 @@ func (e *Endorser) SimulateProposal(txParams *ccprovider.TransactionParams, cid
 			return nil, nil, nil, nil, err
 		}
 
+		var collConfigs map[string]*common.CollectionConfigPackage
 		if simResult.PvtSimulationResults != nil {
 			if cid.Name == "lscc" {
 				// TODO: remove once we can store collection configuration outside of LSCC
@@ -283,10 +285,15 @@ func (e *Endorser) SimulateProposal(txParams *ccprovider.TransactionParams, cid
 			if err := e.distributePrivateData(txParams.ChannelID, txParams.TxID, pvtDataWithConfig, endorsedAt); err != nil {
 				return nil, nil, nil, nil, err
 			}
+			collConfigs = pvtDataWithConfig.CollectionConfigs
 		}
 
 		txParams.TXSimulator.Done()
-		if pubSimResBytes, err = simResult.GetPubSimulationBytes(); err != nil {
+		pubSimRes, err := xendorser.FilterPubSimulationResults(collConfigs, simResult.PubSimulationResults)
+		if err != nil {
+			return nil, nil, nil, nil, err
+		}
+		if pubSimResBytes, err = proto.Marshal(pubSimRes); err != nil {
 			return nil, nil, nil, nil, err
 		}
 	}
diff --git a/core/ledger/kvledger/txmgmt/rwsetutil/rwset_builder.go b/core/ledger/kvledger/txmgmt/rwsetutil/rwset_builder.go
index 83041964..b3e7b2cc 100644
--- a/core/ledger/kvledger/txmgmt/rwsetutil/rwset_builder.go
+++ b/core/ledger/kvledger/txmgmt/rwsetutil/rwset_builder.go
@@ -138,7 +138,7 @@ func (b *RWSetBuilder) GetTxSimulationResults() (*ledger.TxSimulationResults, er
 
 	// Populate the collection-level hashes into pub rwset and compute the proto bytes for pvt rwset
 	if pvtData != nil {
-		if pvtDataProto, err = pvtData.toProtoMsg(); err != nil {
+		if pvtDataProto, err = pvtData.ToProtoMsg(); err != nil {
 			return nil, err
 		}
 		for _, ns := range pvtDataProto.NsPvtRwset {
diff --git a/core/ledger/kvledger/txmgmt/rwsetutil/rwset_proto_util.go b/core/ledger/kvledger/txmgmt/rwsetutil/rwset_proto_util.go
index 0851b1ab..c48fb86b 100644
--- a/core/ledger/kvledger/txmgmt/rwsetutil/rwset_proto_util.go
+++ b/core/ledger/kvledger/txmgmt/rwsetutil/rwset_proto_util.go
@@ -128,7 +128,7 @@ func (txRwSet *TxRwSet) FromProtoBytes(protoBytes []byte) error {
 func (txPvtRwSet *TxPvtRwSet) ToProtoBytes() ([]byte, error) {
 	var protoMsg *rwset.TxPvtReadWriteSet
 	var err error
-	if protoMsg, err = txPvtRwSet.toProtoMsg(); err != nil {
+	if protoMsg, err = txPvtRwSet.ToProtoMsg(); err != nil {
 		return nil, err
 	}
 	return proto.Marshal(protoMsg)
@@ -249,7 +249,8 @@ func (txRwSet *TxRwSet) NumCollections() int {
 // functions for private read-write set
 ///////////////////////////////////////////////////////////////////////////////
 
-func (txPvtRwSet *TxPvtRwSet) toProtoMsg() (*rwset.TxPvtReadWriteSet, error) {
+// ToProtoMsg returns a TxPvtReadWriteSet from the current TxPvtRwSet
+func (txPvtRwSet *TxPvtRwSet) ToProtoMsg() (*rwset.TxPvtReadWriteSet, error) {
 	protoMsg := &rwset.TxPvtReadWriteSet{DataModel: rwset.TxReadWriteSet_KV}
 	var nsProtoMsg *rwset.NsPvtReadWriteSet
 	var err error
diff --git a/core/ledger/ledger_interface.go b/core/ledger/ledger_interface.go
index 929df1d5..69a54984 100644
--- a/core/ledger/ledger_interface.go
+++ b/core/ledger/ledger_interface.go
@@ -13,6 +13,7 @@ import (
 	"github.com/hyperledger/fabric-lib-go/healthz"
 	commonledger "github.com/hyperledger/fabric/common/ledger"
 	"github.com/hyperledger/fabric/common/metrics"
+	storeapi "github.com/hyperledger/fabric/extensions/collections/api/store"
 	"github.com/hyperledger/fabric/protos/common"
 	"github.com/hyperledger/fabric/protos/ledger/rwset"
 	"github.com/hyperledger/fabric/protos/ledger/rwset/kvrwset"
@@ -26,6 +27,7 @@ type Initializer struct {
 	MembershipInfoProvider        MembershipInfoProvider
 	MetricsProvider               metrics.Provider
 	HealthCheckRegistry           HealthCheckRegistry
+	CollDataProvider              storeapi.Provider
 }
 
 // PeerLedgerProvider provides handle to ledger instances
diff --git a/core/ledger/ledgermgmt/ledger_mgmt.go b/core/ledger/ledgermgmt/ledger_mgmt.go
index eb92047f..bfb0ac6e 100644
--- a/core/ledger/ledgermgmt/ledger_mgmt.go
+++ b/core/ledger/ledgermgmt/ledger_mgmt.go
@@ -18,6 +18,7 @@ import (
 	"github.com/hyperledger/fabric/core/ledger/cceventmgmt"
 	"github.com/hyperledger/fabric/core/ledger/customtx"
 	"github.com/hyperledger/fabric/core/ledger/kvledger"
+	storeapi "github.com/hyperledger/fabric/extensions/collections/api/store"
 	"github.com/hyperledger/fabric/protos/common"
 	"github.com/hyperledger/fabric/protos/utils"
 	"github.com/pkg/errors"
@@ -45,6 +46,7 @@ type Initializer struct {
 	MembershipInfoProvider        ledger.MembershipInfoProvider
 	MetricsProvider               metrics.Provider
 	HealthCheckRegistry           ledger.HealthCheckRegistry
+	CollDataProvider              storeapi.Provider
 }
 
 // Initialize initializes ledgermgmt
@@ -76,6 +78,7 @@ func initialize(initializer *Initializer) {
 		MembershipInfoProvider:        initializer.MembershipInfoProvider,
 		MetricsProvider:               initializer.MetricsProvider,
 		HealthCheckRegistry:           initializer.HealthCheckRegistry,
+		CollDataProvider:              initializer.CollDataProvider,
 	})
 	if err != nil {
 		panic(errors.WithMessage(err, "Error initializing ledger provider"))
diff --git a/core/ledger/pvtdatastorage/store.go b/core/ledger/pvtdatastorage/store.go
index 62ea1070..73e76dd9 100644
--- a/core/ledger/pvtdatastorage/store.go
+++ b/core/ledger/pvtdatastorage/store.go
@@ -86,6 +86,11 @@ type Store interface {
 	Shutdown()
 }
 
+// NewErrIllegalCall creates an illegal call error
+func NewErrIllegalCall(msg string) *ErrIllegalCall {
+	return &ErrIllegalCall{msg: msg}
+}
+
 // ErrIllegalCall is to be thrown by a store impl if the store does not expect a call to Prepare/Commit/Rollback/InitLastCommittedBlock
 type ErrIllegalCall struct {
 	msg string
@@ -95,6 +100,11 @@ func (err *ErrIllegalCall) Error() string {
 	return err.msg
 }
 
+// NewErrIllegalArgs creates an illegal args error
+func NewErrIllegalArgs(msg string) *ErrIllegalArgs {
+	return &ErrIllegalArgs{msg: msg}
+}
+
 // ErrIllegalArgs is to be thrown by a store impl if the args passed are not allowed
 type ErrIllegalArgs struct {
 	msg string
@@ -104,6 +114,11 @@ func (err *ErrIllegalArgs) Error() string {
 	return err.msg
 }
 
+// NewErrOutOfRange creates an out of range error
+func NewErrOutOfRange(msg string) *ErrOutOfRange {
+	return &ErrOutOfRange{msg: msg}
+}
+
 // ErrOutOfRange is to be thrown for the request for the data that is not yet committed
 type ErrOutOfRange struct {
 	msg string
diff --git a/core/peer/peer.go b/core/peer/peer.go
index d73e27ad..90dc931b 100644
--- a/core/peer/peer.go
+++ b/core/peer/peer.go
@@ -33,6 +33,9 @@ import (
 	"github.com/hyperledger/fabric/core/ledger/customtx"
 	"github.com/hyperledger/fabric/core/ledger/ledgermgmt"
 	"github.com/hyperledger/fabric/core/transientstore"
+	storeapi "github.com/hyperledger/fabric/extensions/collections/api/store"
+	"github.com/hyperledger/fabric/extensions/collections/storeprovider"
+	"github.com/hyperledger/fabric/extensions/gossip/blockpublisher"
 	"github.com/hyperledger/fabric/gossip/api"
 	"github.com/hyperledger/fabric/gossip/service"
 	"github.com/hyperledger/fabric/msp"
@@ -78,6 +81,26 @@ type chainSupport struct {
 
 var TransientStoreFactory = &storeProvider{stores: make(map[string]transientstore.Store)}
 
+var collectionDataStoreFactory CollStoreProvider
+var initCollDataStoreFactoryOnce sync.Once
+
+// CollStoreProvider manages the collection stores for multiple channels
+type CollStoreProvider interface {
+	StoreForChannel(channelID string) storeapi.Store
+	OpenStore(channelID string) (storeapi.Store, error)
+}
+
+// CollectionDataStoreFactory returns transient data stores by channel ID
+func CollectionDataStoreFactory() CollStoreProvider {
+	initCollDataStoreFactoryOnce.Do(func() {
+		collectionDataStoreFactory = storeprovider.NewProviderFactory()
+	})
+	return collectionDataStoreFactory
+}
+
+// publisher manages the block publishers for all channels
+var BlockPublisher = blockpublisher.NewProvider()
+
 type storeProvider struct {
 	stores map[string]transientstore.Store
 	transientstore.StoreProvider
@@ -206,7 +229,8 @@ var validationWorkersSemaphore *semaphore.Weighted
 // ready
 func Initialize(init func(string), ccp ccprovider.ChaincodeProvider, sccp sysccprovider.SystemChaincodeProvider,
 	pm txvalidator.PluginMapper, pr *platforms.Registry, deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider,
-	membershipProvider ledger.MembershipInfoProvider, metricsProvider metrics.Provider) {
+	membershipProvider ledger.MembershipInfoProvider, metricsProvider metrics.Provider,
+	collDataProvider storeapi.Provider) {
 	nWorkers := viper.GetInt("peer.validatorPoolSize")
 	if nWorkers <= 0 {
 		nWorkers = runtime.NumCPU()
@@ -224,6 +248,7 @@ func Initialize(init func(string), ccp ccprovider.ChaincodeProvider, sccp sysccp
 		DeployedChaincodeInfoProvider: deployedCCInfoProvider,
 		MembershipInfoProvider:        membershipProvider,
 		MetricsProvider:               metricsProvider,
+		CollDataProvider:              collDataProvider,
 	})
 	ledgerIds, err := ledgermgmt.GetLedgerIDs()
 	if err != nil {
@@ -385,12 +410,20 @@ func createChain(cid string, ledger ledger.PeerLedger, cb *common.Block, ccp ccp
 		*semaphore.Weighted
 	}{cs, validationWorkersSemaphore}
 	validator := txvalidator.NewTxValidator(cid, vcs, sccp, pm)
+
+	blockPublisher := BlockPublisher.ForChannel(cid)
 	c := committer.NewLedgerCommitterReactive(ledger, func(block *common.Block) error {
-		chainID, err := utils.GetChainIDFromBlock(block)
-		if err != nil {
-			return err
+		// Updating CSCC with new configuration block
+		if utils.IsConfigBlock(block) {
+			logger.Debug("Received configuration update, calling CSCC ConfigUpdate")
+			err := SetCurrConfigBlock(block, cid)
+			if err != nil {
+				return err
+			}
 		}
-		return SetCurrConfigBlock(block, chainID)
+		// Inform applicable registered handlers of the new block
+		blockPublisher.Publish(block)
+		return nil
 	})
 
 	ordererAddresses := bundle.ChannelConfig().OrdererAddresses()
@@ -403,6 +436,10 @@ func createChain(cid string, ledger ledger.PeerLedger, cb *common.Block, ccp ccp
 	if err != nil {
 		return errors.Wrapf(err, "[channel %s] failed opening transient store", bundle.ConfigtxValidator().ChainID())
 	}
+	collDataStore, err := CollectionDataStoreFactory().OpenStore(bundle.ConfigtxValidator().ChainID())
+	if err != nil {
+		return errors.Wrapf(err, "[channel %s] failed opening transient data store", bundle.ConfigtxValidator().ChainID())
+	}
 	csStoreSupport := &CollectionSupport{
 		PeerLedger: ledger,
 	}
@@ -412,8 +449,11 @@ func createChain(cid string, ledger ledger.PeerLedger, cb *common.Block, ccp ccp
 		Validator:            validator,
 		Committer:            c,
 		Store:                store,
+		CollDataStore:        collDataStore,
 		Cs:                   simpleCollectionStore,
 		IdDeserializeFactory: csStoreSupport,
+		Ledger:               ledger,
+		BlockPublisher:       blockPublisher,
 	})
 
 	chains.Lock()
diff --git a/core/peer/peer_impl.go b/core/peer/peer_impl.go
index 7e33563d..8665c040 100644
--- a/core/peer/peer_impl.go
+++ b/core/peer/peer_impl.go
@@ -15,6 +15,7 @@ import (
 	"github.com/hyperledger/fabric/core/common/ccprovider"
 	"github.com/hyperledger/fabric/core/common/sysccprovider"
 	"github.com/hyperledger/fabric/core/ledger"
+	storeapi "github.com/hyperledger/fabric/extensions/collections/api/store"
 	"github.com/hyperledger/fabric/protos/common"
 	pb "github.com/hyperledger/fabric/protos/peer"
 )
@@ -31,7 +32,7 @@ type Operations interface {
 	GetMSPIDs(cid string) []string
 	GetPolicyManager(cid string) policies.Manager
 	InitChain(cid string)
-	Initialize(init func(string), ccp ccprovider.ChaincodeProvider, sccp sysccprovider.SystemChaincodeProvider, pm txvalidator.PluginMapper, pr *platforms.Registry, deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider, membershipProvider ledger.MembershipInfoProvider, metricsProvider metrics.Provider)
+	Initialize(init func(string), ccp ccprovider.ChaincodeProvider, sccp sysccprovider.SystemChaincodeProvider, pm txvalidator.PluginMapper, pr *platforms.Registry, deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider, membershipProvider ledger.MembershipInfoProvider, metricsProvider metrics.Provider, collDataProvider storeapi.Provider)
 }
 
 type peerImpl struct {
@@ -43,7 +44,8 @@ type peerImpl struct {
 	getMSPIDs            func(cid string) []string
 	getPolicyManager     func(cid string) policies.Manager
 	initChain            func(cid string)
-	initialize           func(init func(string), ccp ccprovider.ChaincodeProvider, sccp sysccprovider.SystemChaincodeProvider, mapper txvalidator.PluginMapper, pr *platforms.Registry, deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider, membershipProvider ledger.MembershipInfoProvider, metricsProvider metrics.Provider)
+	initialize           func(init func(string), ccp ccprovider.ChaincodeProvider, sccp sysccprovider.SystemChaincodeProvider, mapper txvalidator.PluginMapper, pr *platforms.Registry, deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider, membershipProvider ledger.MembershipInfoProvider, metricsProvider metrics.Provider,
+		collDataProvider storeapi.Provider)
 }
 
 // Default provides in implementation of the Peer interface that provides
@@ -74,6 +76,6 @@ func (p *peerImpl) GetLedger(cid string) ledger.PeerLedger       { return p.getL
 func (p *peerImpl) GetMSPIDs(cid string) []string                { return p.getMSPIDs(cid) }
 func (p *peerImpl) GetPolicyManager(cid string) policies.Manager { return p.getPolicyManager(cid) }
 func (p *peerImpl) InitChain(cid string)                         { p.initChain(cid) }
-func (p *peerImpl) Initialize(init func(string), ccp ccprovider.ChaincodeProvider, sccp sysccprovider.SystemChaincodeProvider, mapper txvalidator.PluginMapper, pr *platforms.Registry, deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider, membershipProvider ledger.MembershipInfoProvider, metricsProvider metrics.Provider) {
-	p.initialize(init, ccp, sccp, mapper, pr, deployedCCInfoProvider, membershipProvider, metricsProvider)
+func (p *peerImpl) Initialize(init func(string), ccp ccprovider.ChaincodeProvider, sccp sysccprovider.SystemChaincodeProvider, mapper txvalidator.PluginMapper, pr *platforms.Registry, deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider, membershipProvider ledger.MembershipInfoProvider, metricsProvider metrics.Provider, tdp storeapi.Provider) {
+	p.initialize(init, ccp, sccp, mapper, pr, deployedCCInfoProvider, membershipProvider, metricsProvider, tdp)
 }
diff --git a/go.mod b/go.mod
index add2a530..0fdbdc13 100644
--- a/go.mod
+++ b/go.mod
@@ -9,6 +9,7 @@ require (
 	github.com/VividCortex/gohistogram v1.0.0 // indirect
 	github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc // indirect
 	github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf // indirect
+	github.com/bluele/gcache v0.0.0-20190301044115-79ae3b2d8680
 	github.com/containerd/continuity v0.0.0-20181003075958-be9bd761db19 // indirect
 	github.com/coreos/etcd v3.3.9+incompatible
 	github.com/coreos/pkg v0.0.0-20180108230652-97fdf19511ea // indirect
@@ -30,6 +31,7 @@ require (
 	github.com/hashicorp/hcl v1.0.0 // indirect
 	github.com/hyperledger/fabric-amcl v0.0.0-20180903120555-6b78f7a22d95
 	github.com/hyperledger/fabric-lib-go v1.0.0
+	github.com/hyperledger/fabric/extensions v0.0.0
 	github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515 // indirect
 	github.com/kr/pretty v0.1.0
 	github.com/magiconair/properties v1.8.0 // indirect
@@ -81,3 +83,11 @@ replace github.com/docker/libnetwork => github.com/docker/libnetwork v0.0.0-2018
 replace github.com/docker/docker => github.com/docker/docker v0.0.0-20180827131323-0c5f8d2b9b23
 
 replace golang.org/x/crypto => golang.org/x/crypto v0.0.0-20180827131323-e3636079e1a4
+
+replace github.com/hyperledger/fabric/extensions => github.com/trustbloc/fabric-peer-ext/mod/peer v0.0.0-20190521162923-e85101b1c766
+
+replace github.com/trustbloc/fabric-peer-ext => github.com/trustbloc/fabric-peer-ext v0.0.0-20190521162923-e85101b1c766
+
+//replace github.com/hyperledger/fabric/extensions => ../../trustbloc/fabric-peer-ext/mod/peer
+
+//replace github.com/trustbloc/fabric-peer-ext => ../../trustbloc/fabric-peer-ext
diff --git a/go.sum b/go.sum
index 213fcfb0..6d1edd8d 100644
--- a/go.sum
+++ b/go.sum
@@ -24,11 +24,12 @@ github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRF
 github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973 h1:xJ4a3vCFaGF/jqvzLMYoU8P317H5OQ+Via4RmuPwCS0=
 github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
 github.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
+github.com/bluele/gcache v0.0.0-20190301044115-79ae3b2d8680 h1:jk2k2FUNIg9ogv9yFIzjA5NTrJeaAkHev4AFspbmyvo=
+github.com/bluele/gcache v0.0.0-20190301044115-79ae3b2d8680/go.mod h1:8c4/i2VlovMO2gBnHGQPN5EJw+H0lx1u/5p+cgsXtCk=
 github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
 github.com/containerd/continuity v0.0.0-20180814194400-c7c5070e6f6e/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=
 github.com/containerd/continuity v0.0.0-20181003075958-be9bd761db19 h1:HSgjWPBWohO3kHDPwCPUGSLqJjXCjA7ad5057beR2ZU=
 github.com/containerd/continuity v0.0.0-20181003075958-be9bd761db19/go.mod h1:GL3xCUCBDV3CZiTSEKksMWbLE66hEyuu9qyDOOqM47Y=
-github.com/coreos/etcd v3.3.9+incompatible h1:iKSVPXGNGqroBx4+RmUXv8emeU7y+ucRZSzTYgzLZwM=
 github.com/coreos/etcd v3.3.9+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=
 github.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=
 github.com/coreos/go-systemd v0.0.0-20180511133405-39ca1b05acc7 h1:u9SHYsPQNyt5tgDm3YN7+9dYrpK96E5wFilTFWIDZOM=
@@ -98,10 +99,10 @@ github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgf
 github.com/grpc-ecosystem/grpc-gateway v1.4.1/go.mod h1:RSKVYQBd5MCa4OVpNdGskqpgL2+G+NZTnrVHpWWfpdw=
 github.com/hashicorp/go-version v1.0.0 h1:21MVWPKDphxa7ineQQTrCU5brh7OuVVAzGOCnnCPtE8=
 github.com/hashicorp/go-version v1.0.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
-github.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=
 github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=
 github.com/hpcloud/tail v1.0.0 h1:nfCOvKYfkgYP8hkirhJocXT2+zOD8yUNjXaWfTlyFKI=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
+github.com/hyperledger/fabric v1.4.1/go.mod h1:tGFAOCT696D3rG0Vofd2dyWYLySHlh0aQjf7Q1HAju0=
 github.com/hyperledger/fabric-amcl v0.0.0-20180903120555-6b78f7a22d95 h1:owonHPXrnEIdS/G3kZa0Ipc59pY4MjxtHlMleFdRLcw=
 github.com/hyperledger/fabric-amcl v0.0.0-20180903120555-6b78f7a22d95/go.mod h1:X+DIyUsaTmalOpmpQfIvFZjKHQedrURQ5t4YqquX7lE=
 github.com/hyperledger/fabric-lib-go v1.0.0 h1:UL1w7c9LvHZUSkIvHTDGklxFv2kTeva1QI2emOVc324=
@@ -151,7 +152,6 @@ github.com/opencontainers/image-spec v1.0.1 h1:JMemWkRwHx4Zj+fVxWoMCFm/8sYGGrUVo
 github.com/opencontainers/image-spec v1.0.1/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=
 github.com/opencontainers/runc v0.1.1 h1:GlxAyO6x8rfZYN9Tt0Kti5a/cP41iuiO2yYT0IJGY8Y=
 github.com/opencontainers/runc v0.1.1/go.mod h1:qT5XzbpPznkRYVz/mWwUaVBUv2rmF59PVA73FjuZG0U=
-github.com/pelletier/go-toml v1.2.0 h1:T5zMGML61Wp+FlcbWjRDT7yAxhJNAiPPLOFECq181zc=
 github.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=
 github.com/pierrec/lz4 v0.0.0-20180906185208-bb6bfd13c6a2 h1:S4MUQ7zZCj5JPfz2hh2NvdBK6WwJ86juB/+vd7QePts=
 github.com/pierrec/lz4 v0.0.0-20180906185208-bb6bfd13c6a2/go.mod h1:3/3N9NVKO0jef7pBehbT1qWhCMrIgbYNnFAZCqQ5LRc=
@@ -181,7 +181,6 @@ github.com/sirupsen/logrus v1.0.6/go.mod h1:pMByvHTf9Beacp5x1UXfOR9xyW/9antXMhjM
 github.com/sirupsen/logrus v1.1.0 h1:65VZabgUiV9ktjGM5nTq0+YurgTyX+YI2lSSfDjI+qU=
 github.com/sirupsen/logrus v1.1.0/go.mod h1:zrgwTnHtNr00buQ1vSptGe8m1f/BbgsPukg8qsT7A+A=
 github.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=
-github.com/spf13/afero v1.2.1 h1:qgMbHoJbPbw579P+1zVY+6n4nIFuIchaIjzZ/I/Yq8M=
 github.com/spf13/afero v1.2.1/go.mod h1:9ZxEEn6pIJ8Rxe320qSDBk6AsU0r9pR7Q4OcevTdifk=
 github.com/spf13/cast v1.2.0 h1:HHl1DSRbEQN2i8tJmtS6ViPyHx35+p51amrdsiTCrkg=
 github.com/spf13/cast v1.2.0/go.mod h1:r2rcYCSwa1IExKTDiTfzaxqT2FNHs8hODu4LnUfgKEg=
@@ -192,9 +191,8 @@ github.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb6
 github.com/spf13/pflag v1.0.1/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
 github.com/spf13/pflag v1.0.3 h1:zPAT6CGy6wXeQ7NtTnaTerfKOsV6V6F8agHXFiazDkg=
 github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
+github.com/spf13/viper v0.0.0-20150908122457-1967d93db724 h1:PC6V25yEKHIpaThJK1pn4eZ1iHQ9FKW1a/MWXewC/jo=
 github.com/spf13/viper v0.0.0-20150908122457-1967d93db724/go.mod h1:A8kyI5cUJhb8N+3pkfONlcEcZbueH6nhAm0Fq7SrnBM=
-github.com/spf13/viper v0.0.0-20171227194143-aafc9e6bc7b7 h1:Wj4cg2M6Um7j1N7yD/mxsdy1/wrsdjzVha2eWdOhti8=
-github.com/spf13/viper v0.0.0-20171227194143-aafc9e6bc7b7/go.mod h1:A8kyI5cUJhb8N+3pkfONlcEcZbueH6nhAm0Fq7SrnBM=
 github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
 github.com/stretchr/objx v0.1.1 h1:2vfRuCMp5sSVIDSqO8oNnWJq7mPa6KVP3iPIwFBuy8A=
 github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
@@ -209,6 +207,10 @@ github.com/syndtr/goleveldb v0.0.0-20180815032940-ae2bd5eed72d/go.mod h1:Z4AUp2K
 github.com/tedsuo/ifrit v0.0.0-20180802180643-bea94bb476cc h1:LUUe4cdABGrIJAhl1P1ZpWY76AwukVszFdwkVFVLwIk=
 github.com/tedsuo/ifrit v0.0.0-20180802180643-bea94bb476cc/go.mod h1:eyZnKCc955uh98WQvzOm0dgAeLnf2O0Rz0LPoC5ze+0=
 github.com/tmc/grpc-websocket-proxy v0.0.0-20170815181823-89b8d40f7ca8/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=
+github.com/trustbloc/fabric-peer-ext v0.0.0-20190521162923-e85101b1c766 h1:8JCqNy4axsRfKZ6SDR+pNBIxZmDR5BDGWkQ2Uh4Bfk0=
+github.com/trustbloc/fabric-peer-ext v0.0.0-20190521162923-e85101b1c766/go.mod h1:iCK/9BGKwgGghd49gKiZuj8M5/oF9TEIuXi2xdWxARw=
+github.com/trustbloc/fabric-peer-ext/mod/peer v0.0.0-20190521162923-e85101b1c766 h1:37PEc6OPnTs7W7TWM1Ht+fdQ3q7CMH541pya86fPEF8=
+github.com/trustbloc/fabric-peer-ext/mod/peer v0.0.0-20190521162923-e85101b1c766/go.mod h1:FS/JZ44vp5uSBuMaD0zCyilOAdQuyCfDoGUscj+ngfI=
 github.com/ugorji/go v1.1.1/go.mod h1:hnLbHMwcvSihnDhEfx2/BzKp2xb0Y+ErdfYcrs9tkJQ=
 github.com/urfave/cli v1.18.0/go.mod h1:70zkFmudgCuE/ngEzBv17Jvp/497gISqfk5gWijbERA=
 github.com/vishvananda/netlink v1.0.0 h1:bqNY2lgheFIu1meHUFSH3d7vG93AFyqg3oGbJCOJgSM=
@@ -221,8 +223,6 @@ github.com/xiang90/probing v0.0.0-20160813154853-07dd2e8dfe18/go.mod h1:UETIi67q
 go.etcd.io/bbolt v1.3.1-etcd.7/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=
 go.etcd.io/etcd v0.0.0-20181228115726-23731bf9ba55 h1://s+P7qX0faDdQVMorWv+j0omruIA7+Pvf7IH7B8JDg=
 go.etcd.io/etcd v0.0.0-20181228115726-23731bf9ba55/go.mod h1:weASp41xM3dk0YHg1s/W8ecdGP5G4teSTMBPpYAaUgA=
-go.etcd.io/etcd v3.3.13+incompatible h1:jCejD5EMnlGxFvcGRyEV4VGlENZc7oPQX6o0t7n3xbw=
-go.etcd.io/etcd v3.3.13+incompatible/go.mod h1:yaeTdrJi5lOmYerz05bd8+V7KubZs8YSFZfzsF9A6aI=
 go.uber.org/atomic v1.3.2 h1:2Oa65PReHzfn29GpvgsYwloV9AVFHPDk8tYxt2c2tr4=
 go.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/multierr v1.1.0 h1:HoEmRHQPVSqub6w2z2d2EOVs2fjyFRGyofhKuyDq0QI=
diff --git a/gossip/privdata/coordinator.go b/gossip/privdata/coordinator.go
index 89038246..a3e6d348 100644
--- a/gossip/privdata/coordinator.go
+++ b/gossip/privdata/coordinator.go
@@ -21,6 +21,8 @@ import (
 	"github.com/hyperledger/fabric/core/ledger"
 	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil"
 	"github.com/hyperledger/fabric/core/transientstore"
+	storeapi "github.com/hyperledger/fabric/extensions/collections/api/store"
+	extcoord "github.com/hyperledger/fabric/extensions/gossip/coordinator"
 	"github.com/hyperledger/fabric/gossip/metrics"
 	privdatacommon "github.com/hyperledger/fabric/gossip/privdata/common"
 	"github.com/hyperledger/fabric/gossip/util"
@@ -113,15 +115,21 @@ type Support struct {
 	txvalidator.Validator
 	committer.Committer
 	TransientStore
+	CollDataStore storeapi.Store
 	Fetcher
 }
 
+type pvtDataStore interface {
+	StorePvtData(txID string, privData *transientstore2.TxPvtReadWriteSetWithConfigInfo, blkHeight uint64) error
+}
+
 type coordinator struct {
 	selfSignedData common.SignedData
 	Support
 	transientBlockRetention uint64
 	metrics                 *metrics.PrivdataMetrics
 	pullRetryThreshold      time.Duration
+	pvtDataStore            pvtDataStore
 }
 
 type CoordinatorConfig struct {
@@ -129,17 +137,24 @@ type CoordinatorConfig struct {
 	PullRetryThreshold      time.Duration
 }
 
+// getPvtDataStore may be overridden by unit tests
+var getPvtDataStore = func(channelID string, transientStore TransientStore, collDataStore storeapi.Store) pvtDataStore {
+	return extcoord.New(channelID, transientStore, collDataStore)
+}
+
 // NewCoordinator creates a new instance of coordinator
 func NewCoordinator(support Support, selfSignedData common.SignedData, metrics *metrics.PrivdataMetrics,
 	config CoordinatorConfig) Coordinator {
 	return &coordinator{Support: support, selfSignedData: selfSignedData,
 		transientBlockRetention: config.TransientBlockRetention, metrics: metrics,
-		pullRetryThreshold: config.PullRetryThreshold}
+		pullRetryThreshold: config.PullRetryThreshold,
+		pvtDataStore:       getPvtDataStore(support.ChainID, support.TransientStore, support.CollDataStore),
+	}
 }
 
 // StorePvtData used to persist private date into transient store
 func (c *coordinator) StorePvtData(txID string, privData *transientstore2.TxPvtReadWriteSetWithConfigInfo, blkHeight uint64) error {
-	return c.TransientStore.PersistWithConfig(txID, blkHeight, privData)
+	return c.pvtDataStore.StorePvtData(txID, privData, blkHeight)
 }
 
 // StoreBlock stores block with private data into the ledger
diff --git a/gossip/privdata/coordinator_test.go b/gossip/privdata/coordinator_test.go
index f7fb1411..14cda60a 100644
--- a/gossip/privdata/coordinator_test.go
+++ b/gossip/privdata/coordinator_test.go
@@ -23,6 +23,8 @@ import (
 	"github.com/hyperledger/fabric/core/ledger"
 	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil"
 	"github.com/hyperledger/fabric/core/transientstore"
+	storeapi "github.com/hyperledger/fabric/extensions/collections/api/store"
+	extmocks "github.com/hyperledger/fabric/extensions/mocks"
 	"github.com/hyperledger/fabric/gossip/metrics"
 	gmetricsmocks "github.com/hyperledger/fabric/gossip/metrics/mocks"
 	privdatacommon "github.com/hyperledger/fabric/gossip/privdata/common"
@@ -34,6 +36,7 @@ import (
 	"github.com/hyperledger/fabric/protos/ledger/rwset/kvrwset"
 	"github.com/hyperledger/fabric/protos/msp"
 	"github.com/hyperledger/fabric/protos/peer"
+	tp "github.com/hyperledger/fabric/protos/transientstore"
 	transientstore2 "github.com/hyperledger/fabric/protos/transientstore"
 	"github.com/stretchr/testify/assert"
 	"github.com/stretchr/testify/mock"
@@ -416,6 +419,15 @@ func (cap *collectionAccessPolicy) AccessFilter() privdata.Filter {
 	}
 }
 
+type mockPvtDataStore struct {
+	transientStore TransientStore
+}
+
+// StorePvtData redirects the call to the transient store
+func (m *mockPvtDataStore) StorePvtData(txID string, privData *tp.TxPvtReadWriteSetWithConfigInfo, blkHeight uint64) error {
+	return m.transientStore.PersistWithConfig(txID, blkHeight, privData)
+}
+
 func TestPvtDataCollections_FailOnEmptyPayload(t *testing.T) {
 	collection := &util.PvtDataCollections{
 		&ledger.TxPvtData{
@@ -1350,18 +1362,24 @@ func TestPurgeByHeight(t *testing.T) {
 }
 
 func TestCoordinatorStorePvtData(t *testing.T) {
+	getPvtDataStore = func(channelID string, transientStore TransientStore, collDataStore storeapi.Store) pvtDataStore {
+		return &mockPvtDataStore{transientStore: transientStore}
+	}
+
 	metrics := metrics.NewGossipMetrics(&disabled.Provider{}).PrivdataMetrics
 	cs := createcollectionStore(common.SignedData{}).thatAcceptsAll()
 	committer := &mocks.Committer{}
 	store := &mockTransientStore{t: t}
 	store.On("PersistWithConfig", mock.Anything, uint64(5), mock.Anything).
 		expectRWSet("ns1", "c1", []byte("rws-pre-image")).Return(nil)
+	tdStore := extmocks.NewDataStore()
 	fetcher := &fetcherMock{t: t}
 	coordinator := NewCoordinator(Support{
 		CollectionStore: cs,
 		Committer:       committer,
 		Fetcher:         fetcher,
 		TransientStore:  store,
+		CollDataStore:   tdStore,
 		Validator:       &validatorMock{},
 	}, common.SignedData{}, metrics, testConfig)
 	pvtData := (&pvtDataFactory{}).addRWSet().addNSRWSet("ns1", "c1").create()
diff --git a/gossip/privdata/dissemination.go b/gossip/privdata/dissemination.go
new file mode 100644
index 00000000..1672bca9
--- /dev/null
+++ b/gossip/privdata/dissemination.go
@@ -0,0 +1,33 @@
+/*
+	Copyright SecureKey Technologies Inc. All Rights Reserved.
+
+	SPDX-License-Identifier: Apache-2.0
+*/
+
+package privdata
+
+import (
+	"github.com/hyperledger/fabric/core/common/privdata"
+	extdissemination "github.com/hyperledger/fabric/extensions/collections/dissemination"
+	"github.com/hyperledger/fabric/protos/common"
+	protog "github.com/hyperledger/fabric/protos/gossip"
+	"github.com/hyperledger/fabric/protos/ledger/rwset"
+)
+
+func (d *distributorImpl) disseminationPlanForExt(ns string, rwSet *rwset.CollectionPvtReadWriteSet, colCP *common.CollectionConfig, colAP privdata.CollectionAccessPolicy, pvtDataMsg *protog.SignedGossipMessage) ([]*dissemination, error) {
+	dissPlan, handled, err := extdissemination.ComputeDisseminationPlan(d.chainID, ns, rwSet, colCP, colAP, pvtDataMsg, d.gossipAdapter)
+	if err != nil {
+		return nil, err
+	}
+
+	if !handled {
+		// Use default dissemination plan
+		return d.disseminationPlanForMsg(colAP, colAP.AccessFilter(), pvtDataMsg)
+	}
+
+	dPlan := make([]*dissemination, len(dissPlan))
+	for i, dp := range dissPlan {
+		dPlan[i] = &dissemination{msg: dp.Msg, criteria: dp.Criteria}
+	}
+	return dPlan, nil
+}
diff --git a/gossip/privdata/distributor.go b/gossip/privdata/distributor.go
index 1e7cee78..cb4d7a53 100644
--- a/gossip/privdata/distributor.go
+++ b/gossip/privdata/distributor.go
@@ -46,6 +46,9 @@ type gossipAdapter interface {
 	// PeersOfChannel returns the NetworkMembers considered alive
 	// and also subscribed to the channel given
 	PeersOfChannel(gossipCommon.ChainID) []discovery.NetworkMember
+
+	// SelfMembershipInfo returns the peer's membership information
+	SelfMembershipInfo() discovery.NetworkMember
 }
 
 // PvtDataDistributor interface to defines API of distributing private data
@@ -90,10 +93,10 @@ func (p *policyAccessFactory) AccessPolicy(config *common.CollectionConfig, chai
 		if err != nil {
 			return nil, errors.WithMessage(err, fmt.Sprintf("error setting up collection  %#v", cconf.StaticCollectionConfig.Name))
 		}
+		return colAP, nil
 	default:
 		return nil, errors.New("unexpected collection type")
 	}
-	return colAP, nil
 }
 
 // NewCollectionAccessFactory
@@ -168,10 +171,22 @@ func (d *distributorImpl) computeDisseminationPlan(txID string,
 				return nil, errors.WithStack(err)
 			}
 
-			dPlan, err := d.disseminationPlanForMsg(colAP, colFilter, pvtDataMsg)
-			if err != nil {
-				return nil, errors.WithStack(err)
+			collType := colCP.GetStaticCollectionConfig().Type
+
+			var dPlan []*dissemination
+			switch {
+			case collType == common.CollectionType_COL_PRIVATE || collType == common.CollectionType_COL_UNKNOWN:
+				dPlan, err = d.disseminationPlanForMsg(colAP, colFilter, pvtDataMsg)
+				if err != nil {
+					return nil, errors.WithStack(err)
+				}
+			default:
+				dPlan, err = d.disseminationPlanForExt(namespace, collection, colCP, colAP, pvtDataMsg)
+				if err != nil {
+					return nil, errors.WithStack(err)
+				}
 			}
+
 			disseminationPlan = append(disseminationPlan, dPlan...)
 		}
 	}
diff --git a/gossip/privdata/distributor_test.go b/gossip/privdata/distributor_test.go
index 5629415e..1753b822 100644
--- a/gossip/privdata/distributor_test.go
+++ b/gossip/privdata/distributor_test.go
@@ -104,6 +104,10 @@ func (g *gossipMock) PeerFilter(channel gcommon.ChainID, messagePredicate api.Su
 	}, nil
 }
 
+func (g *gossipMock) SelfMembershipInfo() discovery.NetworkMember {
+	panic("not implemented")
+}
+
 func TestDistributor(t *testing.T) {
 	channelID := "test"
 
diff --git a/gossip/service/gossip_service.go b/gossip/service/gossip_service.go
index 8fb34292..29266fb2 100644
--- a/gossip/service/gossip_service.go
+++ b/gossip/service/gossip_service.go
@@ -13,8 +13,12 @@ import (
 	"github.com/hyperledger/fabric/core/committer"
 	"github.com/hyperledger/fabric/core/committer/txvalidator"
 	"github.com/hyperledger/fabric/core/common/privdata"
-	"github.com/hyperledger/fabric/core/deliverservice"
+	deliverclient "github.com/hyperledger/fabric/core/deliverservice"
 	"github.com/hyperledger/fabric/core/deliverservice/blocksprovider"
+	"github.com/hyperledger/fabric/core/ledger"
+	storeapi "github.com/hyperledger/fabric/extensions/collections/api/store"
+	extgossipapi "github.com/hyperledger/fabric/extensions/gossip/api"
+	"github.com/hyperledger/fabric/extensions/gossip/dispatcher"
 	"github.com/hyperledger/fabric/gossip/api"
 	gossipCommon "github.com/hyperledger/fabric/gossip/common"
 	"github.com/hyperledger/fabric/gossip/election"
@@ -214,6 +218,9 @@ type Support struct {
 	Store                privdata2.TransientStore
 	Cs                   privdata.CollectionStore
 	IdDeserializeFactory privdata2.IdentityDeserializerFactory
+	CollDataStore        storeapi.Store
+	Ledger               ledger.PeerLedger
+	BlockPublisher       extgossipapi.BlockPublisher
 }
 
 // DataStoreSupport aggregates interfaces capable
@@ -253,6 +260,7 @@ func (g *gossipServiceImpl) InitializeChannel(chainID string, endpoints []string
 		CollectionStore: support.Cs,
 		Validator:       support.Validator,
 		TransientStore:  support.Store,
+		CollDataStore:   support.CollDataStore,
 		Committer:       support.Committer,
 		Fetcher:         fetcher,
 	}, g.createSelfSignedData(), g.metrics.PrivdataMetrics, coordinatorConfig)
@@ -277,7 +285,8 @@ func (g *gossipServiceImpl) InitializeChannel(chainID string, endpoints []string
 	g.privateHandlers[chainID].reconciler.Start()
 
 	g.chains[chainID] = state.NewGossipStateProvider(chainID, servicesAdapter, coordinator,
-		g.metrics.StateMetrics, getStateConfiguration())
+		g.metrics.StateMetrics, getStateConfiguration(),
+		dispatcher.New(chainID, support.CollDataStore, servicesAdapter, support.Ledger, support.BlockPublisher))
 	if g.deliveryService[chainID] == nil {
 		var err error
 		g.deliveryService[chainID], err = g.deliveryFactory.Service(g, endpoints, g.mcs)
diff --git a/gossip/service/gossip_service_test.go b/gossip/service/gossip_service_test.go
index 62ce04ea..cb7b658f 100644
--- a/gossip/service/gossip_service_test.go
+++ b/gossip/service/gossip_service_test.go
@@ -18,10 +18,11 @@ import (
 	"github.com/hyperledger/fabric/common/localmsp"
 	"github.com/hyperledger/fabric/common/metrics/disabled"
 	"github.com/hyperledger/fabric/core/comm"
-	"github.com/hyperledger/fabric/core/deliverservice"
+	deliverclient "github.com/hyperledger/fabric/core/deliverservice"
 	"github.com/hyperledger/fabric/core/deliverservice/blocksprovider"
 	"github.com/hyperledger/fabric/core/ledger"
 	"github.com/hyperledger/fabric/core/transientstore"
+	kmocks "github.com/hyperledger/fabric/extensions/gossip/mocks"
 	"github.com/hyperledger/fabric/gossip/api"
 	gcomm "github.com/hyperledger/fabric/gossip/comm"
 	gossipCommon "github.com/hyperledger/fabric/gossip/common"
@@ -34,7 +35,7 @@ import (
 	"github.com/hyperledger/fabric/gossip/state"
 	"github.com/hyperledger/fabric/gossip/util"
 	"github.com/hyperledger/fabric/msp/mgmt"
-	"github.com/hyperledger/fabric/msp/mgmt/testtools"
+	msptesttools "github.com/hyperledger/fabric/msp/mgmt/testtools"
 	peergossip "github.com/hyperledger/fabric/peer/gossip"
 	"github.com/hyperledger/fabric/peer/gossip/mocks"
 	"github.com/hyperledger/fabric/protos/common"
@@ -148,8 +149,9 @@ func TestLeaderElectionWithDeliverClient(t *testing.T) {
 		deliverServiceFactory.service.running[channelName] = false
 
 		gossips[i].InitializeChannel(channelName, []string{"endpoint"}, Support{
-			Store:     &mockTransientStore{},
-			Committer: &mockLedgerInfo{1},
+			Store:          &mockTransientStore{},
+			Committer:      &mockLedgerInfo{1},
+			BlockPublisher: kmocks.NewBlockPublisher(),
 		})
 		service, exist := gossips[i].(*gossipGRPC).gossipServiceImpl.leaderElection[channelName]
 		assert.True(t, exist, "Leader election service should be created for peer %d and channel %s", i, channelName)
@@ -206,8 +208,9 @@ func TestWithStaticDeliverClientLeader(t *testing.T) {
 		gossips[i].(*gossipGRPC).gossipServiceImpl.deliveryFactory = deliverServiceFactory
 		deliverServiceFactory.service.running[channelName] = false
 		gossips[i].InitializeChannel(channelName, []string{"endpoint"}, Support{
-			Committer: &mockLedgerInfo{1},
-			Store:     &mockTransientStore{},
+			Committer:      &mockLedgerInfo{1},
+			Store:          &mockTransientStore{},
+			BlockPublisher: kmocks.NewBlockPublisher(),
 		})
 	}
 
@@ -220,8 +223,9 @@ func TestWithStaticDeliverClientLeader(t *testing.T) {
 	for i := 0; i < n; i++ {
 		deliverServiceFactory.service.running[channelName] = false
 		gossips[i].InitializeChannel(channelName, []string{"endpoint"}, Support{
-			Committer: &mockLedgerInfo{1},
-			Store:     &mockTransientStore{},
+			Committer:      &mockLedgerInfo{1},
+			Store:          &mockTransientStore{},
+			BlockPublisher: kmocks.NewBlockPublisher(),
 		})
 	}
 
@@ -260,8 +264,9 @@ func TestWithStaticDeliverClientNotLeader(t *testing.T) {
 		gossips[i].(*gossipGRPC).gossipServiceImpl.deliveryFactory = deliverServiceFactory
 		deliverServiceFactory.service.running[channelName] = false
 		gossips[i].InitializeChannel(channelName, []string{"endpoint"}, Support{
-			Committer: &mockLedgerInfo{1},
-			Store:     &mockTransientStore{},
+			Committer:      &mockLedgerInfo{1},
+			Store:          &mockTransientStore{},
+			BlockPublisher: kmocks.NewBlockPublisher(),
 		})
 	}
 
@@ -300,8 +305,9 @@ func TestWithStaticDeliverClientBothStaticAndLeaderElection(t *testing.T) {
 		gossips[i].(*gossipGRPC).gossipServiceImpl.deliveryFactory = deliverServiceFactory
 		assert.Panics(t, func() {
 			gossips[i].InitializeChannel(channelName, []string{"endpoint"}, Support{
-				Committer: &mockLedgerInfo{1},
-				Store:     &mockTransientStore{},
+				Committer:      &mockLedgerInfo{1},
+				Store:          &mockTransientStore{},
+				BlockPublisher: kmocks.NewBlockPublisher(),
 			})
 		}, "Dynamic leader election based and static connection to ordering service can't exist simultaneously")
 	}
diff --git a/gossip/service/integration_test.go b/gossip/service/integration_test.go
index 20cbf18d..68a49785 100644
--- a/gossip/service/integration_test.go
+++ b/gossip/service/integration_test.go
@@ -11,10 +11,11 @@ import (
 	"testing"
 	"time"
 
-	"github.com/hyperledger/fabric/core/deliverservice"
+	deliverclient "github.com/hyperledger/fabric/core/deliverservice"
 	"github.com/hyperledger/fabric/core/deliverservice/blocksprovider"
 	"github.com/hyperledger/fabric/core/ledger"
 	"github.com/hyperledger/fabric/core/transientstore"
+	kmocks "github.com/hyperledger/fabric/extensions/gossip/mocks"
 	"github.com/hyperledger/fabric/gossip/api"
 	"github.com/hyperledger/fabric/gossip/util"
 	"github.com/hyperledger/fabric/protos/ledger/rwset"
@@ -137,8 +138,9 @@ func TestLeaderYield(t *testing.T) {
 		gs.deliveryFactory = &embeddingDeliveryServiceFactory{&deliveryFactoryImpl{}}
 		gossipServiceInstance = gs
 		gs.InitializeChannel(channelName, []string{endpoint}, Support{
-			Committer: &mockLedgerInfo{1},
-			Store:     &transientStoreMock{},
+			Committer:      &mockLedgerInfo{1},
+			Store:          &transientStoreMock{},
+			BlockPublisher: kmocks.NewBlockPublisher(),
 		})
 		return gs
 	}
diff --git a/gossip/state/state.go b/gossip/state/state.go
index 0b99bdee..7f1c4dde 100644
--- a/gossip/state/state.go
+++ b/gossip/state/state.go
@@ -83,6 +83,12 @@ type GossipAdapter interface {
 	// PeersOfChannel returns the NetworkMembers considered alive
 	// and also subscribed to the channel given
 	PeersOfChannel(common2.ChainID) []discovery.NetworkMember
+
+	// SelfMembershipInfo returns the peer's membership information
+	SelfMembershipInfo() discovery.NetworkMember
+
+	// IdentityInfo returns information known peer identities
+	IdentityInfo() api.PeerIdentitySet
 }
 
 // MCSAdapter adapter of message crypto service interface to bound
@@ -129,6 +135,10 @@ type ServicesMediator struct {
 	MCSAdapter
 }
 
+type messageDispatcher interface {
+	Dispatch(msg proto.ReceivedMessage) bool
+}
+
 // GossipStateProviderImpl the implementation of the GossipStateProvider interface
 // the struct to handle in memory sliding window of
 // new ledger block to be acquired by hyper ledger
@@ -165,6 +175,8 @@ type GossipStateProviderImpl struct {
 	config *Configuration
 
 	stateMetrics *metrics.StateMetrics
+
+	msgDispatcher messageDispatcher
 }
 
 var logger = util.GetLogger(util.StateLogger, "")
@@ -188,7 +200,7 @@ func (v *stateRequestValidator) validate(request *proto.RemoteStateRequest, batc
 
 // NewGossipStateProvider creates state provider with coordinator instance
 // to orchestrate arrival of private rwsets and blocks before committing them into the ledger.
-func NewGossipStateProvider(chainID string, services *ServicesMediator, ledger ledgerResources, stateMetrics *metrics.StateMetrics, config *Configuration) GossipStateProvider {
+func NewGossipStateProvider(chainID string, services *ServicesMediator, ledger ledgerResources, stateMetrics *metrics.StateMetrics, config *Configuration, msgDispatcher messageDispatcher) GossipStateProvider {
 
 	gossipChan, _ := services.Accept(func(message interface{}) bool {
 		// Get only data messages
@@ -199,7 +211,8 @@ func NewGossipStateProvider(chainID string, services *ServicesMediator, ledger l
 	remoteStateMsgFilter := func(message interface{}) bool {
 		receivedMsg := message.(proto.ReceivedMessage)
 		msg := receivedMsg.GetGossipMessage()
-		if !(msg.IsRemoteStateMessage() || msg.GetPrivateData() != nil) {
+		if !(msg.IsRemoteStateMessage() || msg.GetPrivateData() != nil ||
+			msg.GetCollDataReq() != nil || msg.GetCollDataRes() != nil) {
 			return false
 		}
 		// Ensure we deal only with messages that belong to this channel
@@ -269,6 +282,8 @@ func NewGossipStateProvider(chainID string, services *ServicesMediator, ledger l
 		config: config,
 
 		stateMetrics: stateMetrics,
+
+		msgDispatcher: msgDispatcher,
 	}
 
 	logger.Infof("Updating metadata information, "+
@@ -320,6 +335,10 @@ func (s *GossipStateProviderImpl) dispatch(msg proto.ReceivedMessage) {
 		logger.Debug("Handling private data collection message")
 		// Handling private data replication message
 		s.privateDataMessage(msg)
+	} else if s.msgDispatcher != nil {
+		if dispatched := s.msgDispatcher.Dispatch(msg); dispatched {
+			logger.Debug("Handled Extensions message")
+		}
 	}
 
 }
diff --git a/gossip/state/state_test.go b/gossip/state/state_test.go
index 2662d270..c9ef87f4 100644
--- a/gossip/state/state_test.go
+++ b/gossip/state/state_test.go
@@ -418,7 +418,7 @@ func newPeerNodeWithGossipWithValidatorWithMetrics(id int, committer committer.C
 		TransientStore: &mockTransientStore{},
 		Committer:      committer,
 	}, pcomm.SignedData{}, gossipMetrics.PrivdataMetrics, coordConfig)
-	sp := NewGossipStateProvider(util.GetTestChainID(), servicesAdapater, coord, gossipMetrics.StateMetrics, config)
+	sp := NewGossipStateProvider(util.GetTestChainID(), servicesAdapater, coord, gossipMetrics.StateMetrics, config, nil)
 	if sp == nil {
 		gRPCServer.Stop()
 		return nil, port
@@ -1465,7 +1465,7 @@ func TestTransferOfPrivateRWSet(t *testing.T) {
 
 	servicesAdapater := &ServicesMediator{GossipAdapter: g, MCSAdapter: &cryptoServiceMock{acceptor: noopPeerIdentityAcceptor}}
 	stateMetrics := metrics.NewGossipMetrics(&disabled.Provider{}).StateMetrics
-	st := NewGossipStateProvider(chainID, servicesAdapater, coord1, stateMetrics, config)
+	st := NewGossipStateProvider(chainID, servicesAdapater, coord1, stateMetrics, config, nil)
 	defer st.Stop()
 
 	// Mocked state request message
@@ -1699,11 +1699,11 @@ func TestTransferOfPvtDataBetweenPeers(t *testing.T) {
 	stateMetrics := metrics.NewGossipMetrics(&disabled.Provider{}).StateMetrics
 
 	mediator := &ServicesMediator{GossipAdapter: peers["peer1"], MCSAdapter: cryptoService}
-	peer1State := NewGossipStateProvider(chainID, mediator, peers["peer1"].coord, stateMetrics, config)
+	peer1State := NewGossipStateProvider(chainID, mediator, peers["peer1"].coord, stateMetrics, config, nil)
 	defer peer1State.Stop()
 
 	mediator = &ServicesMediator{GossipAdapter: peers["peer2"], MCSAdapter: cryptoService}
-	peer2State := NewGossipStateProvider(chainID, mediator, peers["peer2"].coord, stateMetrics, config)
+	peer2State := NewGossipStateProvider(chainID, mediator, peers["peer2"].coord, stateMetrics, config, nil)
 	defer peer2State.Stop()
 
 	// Make sure state was replicated
diff --git a/peer/chaincode/common.go b/peer/chaincode/common.go
index d259a225..b6c26d25 100644
--- a/peer/chaincode/common.go
+++ b/peer/chaincode/common.go
@@ -152,6 +152,14 @@ func chaincodeInvokeOrQuery(cmd *cobra.Command, invoke bool, cf *ChaincodeCmdFac
 	return nil
 }
 
+// CollectionType enumerates the various types of private data collections.
+type CollectionType string
+
+const (
+	CollectionType_PRIVATE   CollectionType = "PRIVATE"
+	CollectionType_TRANSIENT CollectionType = "TRANSIENT"
+)
+
 type collectionConfigJson struct {
 	Name           string `json:"name"`
 	Policy         string `json:"policy"`
@@ -159,6 +167,9 @@ type collectionConfigJson struct {
 	MaxPeerCount   int32  `json:"maxPeerCount"`
 	BlockToLive    uint64 `json:"blockToLive"`
 	MemberOnlyRead bool   `json:"memberOnlyRead"`
+
+	Type       CollectionType `json:"type"`
+	TimeToLive string         `json:"timeToLive"`
 }
 
 // getCollectionConfig retrieves the collection configuration
@@ -196,17 +207,44 @@ func getCollectionConfigFromBytes(cconfBytes []byte) ([]byte, error) {
 			},
 		}
 
-		cc := &pcommon.CollectionConfig{
-			Payload: &pcommon.CollectionConfig_StaticCollectionConfig{
-				StaticCollectionConfig: &pcommon.StaticCollectionConfig{
-					Name:              cconfitem.Name,
-					MemberOrgsPolicy:  cpc,
-					RequiredPeerCount: cconfitem.RequiredCount,
-					MaximumPeerCount:  cconfitem.MaxPeerCount,
-					BlockToLive:       cconfitem.BlockToLive,
-					MemberOnlyRead:    cconfitem.MemberOnlyRead,
+		var cc *pcommon.CollectionConfig
+		switch cconfitem.Type {
+		case CollectionType_TRANSIENT:
+			cc = &pcommon.CollectionConfig{
+				Payload: &pcommon.CollectionConfig_StaticCollectionConfig{
+					StaticCollectionConfig: &pcommon.StaticCollectionConfig{
+						Name:              cconfitem.Name,
+						MemberOrgsPolicy:  cpc,
+						RequiredPeerCount: cconfitem.RequiredCount,
+						MaximumPeerCount:  cconfitem.MaxPeerCount,
+						MemberOnlyRead:    cconfitem.MemberOnlyRead,
+						//MemberOnlyWrite is added post Fabric 1.4.1
+						//MemberOnlyWrite:   cconfitem.MemberOnlyWrite,
+
+						Type:       pcommon.CollectionType_COL_TRANSIENT,
+						TimeToLive: cconfitem.TimeToLive,
+					},
 				},
-			},
+			}
+		case CollectionType_PRIVATE:
+			fallthrough
+		case "":
+			cc = &pcommon.CollectionConfig{
+				Payload: &pcommon.CollectionConfig_StaticCollectionConfig{
+					StaticCollectionConfig: &pcommon.StaticCollectionConfig{
+						Name:              cconfitem.Name,
+						MemberOrgsPolicy:  cpc,
+						RequiredPeerCount: cconfitem.RequiredCount,
+						MaximumPeerCount:  cconfitem.MaxPeerCount,
+						BlockToLive:       cconfitem.BlockToLive,
+						MemberOnlyRead:    cconfitem.MemberOnlyRead,
+						//MemberOnlyWrite is added post Fabric 1.4.1
+						//MemberOnlyWrite:   cconfitem.MemberOnlyWrite,
+					},
+				},
+			}
+		default:
+			return nil, errors.Errorf("unsupported collection configuration type [%s]", cconfitem.Type)
 		}
 
 		ccarray = append(ccarray, cc)
diff --git a/peer/chaincode/transientcollconfig_test.go b/peer/chaincode/transientcollconfig_test.go
new file mode 100644
index 00000000..c16087d1
--- /dev/null
+++ b/peer/chaincode/transientcollconfig_test.go
@@ -0,0 +1,64 @@
+/*
+	Copyright Digital Asset Holdings, LLC. All Rights Reserved.
+	Copyright IBM Corp. All Rights Reserved.
+
+	SPDX-License-Identifier: Apache-2.0
+*/
+
+package chaincode
+
+import (
+	"testing"
+
+	"github.com/golang/protobuf/proto"
+	"github.com/hyperledger/fabric/common/cauthdsl"
+	pcommon "github.com/hyperledger/fabric/protos/common"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+)
+
+const sampleCollectionConfigTransient = `[
+		{
+			"name": "foo",
+			"policy": "OR('A.member', 'B.member')",
+			"requiredPeerCount": 3,
+			"maxPeerCount": 5,
+			"type": "TRANSIENT",
+			"timeToLive": "2m"
+		}
+	]`
+
+const sampleCollectionConfigInvalidType = `[
+		{
+			"name": "foo",
+			"policy": "OR('A.member', 'B.member')",
+			"requiredPeerCount": 3,
+			"maxPeerCount": 5,
+			"type": "INVALID"
+		}
+	]`
+
+func TestCollectionTypeParsing(t *testing.T) {
+	pol, _ := cauthdsl.FromString("OR('A.member', 'B.member')")
+
+	t.Run("Invalid Collection Config Type", func(t *testing.T) {
+		_, err := getCollectionConfigFromBytes([]byte(sampleCollectionConfigInvalidType))
+		assert.Error(t, err)
+	})
+
+	t.Run("Transient Collection Config", func(t *testing.T) {
+		cc, err := getCollectionConfigFromBytes([]byte(sampleCollectionConfigTransient))
+		assert.NoError(t, err)
+		assert.NotNil(t, cc)
+		ccp := &pcommon.CollectionConfigPackage{Config: []*pcommon.CollectionConfig{}}
+		err = proto.Unmarshal(cc, ccp)
+		assert.NoError(t, err)
+		conf := ccp.Config[0].GetStaticCollectionConfig()
+		require.NotNil(t, conf)
+		assert.Equal(t, "foo", conf.Name)
+		assert.Equal(t, int32(3), conf.RequiredPeerCount)
+		assert.Equal(t, int32(5), conf.MaximumPeerCount)
+		assert.True(t, proto.Equal(pol, conf.MemberOrgsPolicy.GetSignaturePolicy()))
+		assert.Equal(t, "2m", conf.TimeToLive)
+	})
+}
diff --git a/peer/node/start.go b/peer/node/start.go
index ba7329ce..9ccb0944 100644
--- a/peer/node/start.go
+++ b/peer/node/start.go
@@ -70,6 +70,8 @@ import (
 	ccsupport "github.com/hyperledger/fabric/discovery/support/chaincode"
 	"github.com/hyperledger/fabric/discovery/support/config"
 	"github.com/hyperledger/fabric/discovery/support/gossip"
+	supportapi "github.com/hyperledger/fabric/extensions/collections/api/support"
+	collretriever "github.com/hyperledger/fabric/extensions/collections/retriever"
 	gossipcommon "github.com/hyperledger/fabric/gossip/common"
 	"github.com/hyperledger/fabric/gossip/service"
 	"github.com/hyperledger/fabric/msp"
@@ -172,6 +174,16 @@ func serve(args []string) error {
 	flogging.Global.SetObserver(logObserver)
 
 	membershipInfoProvider := privdata.NewMembershipInfoProvider(createSelfSignedData(), identityDeserializerFactory)
+
+	transientDataProvider := collretriever.NewProvider(
+		peer.CollectionDataStoreFactory().StoreForChannel,
+		peer.GetLedger,
+		func() supportapi.GossipAdapter {
+			return service.GetGossipService()
+		},
+		peer.BlockPublisher.ForChannel,
+	)
+
 	//initialize resource management exit
 	ledgermgmt.Initialize(
 		&ledgermgmt.Initializer{
@@ -181,6 +193,7 @@ func serve(args []string) error {
 			MembershipInfoProvider:        membershipInfoProvider,
 			MetricsProvider:               metricsProvider,
 			HealthCheckRegistry:           opsSystem,
+			CollDataProvider:              transientDataProvider,
 		},
 	)
 
@@ -359,7 +372,7 @@ func serve(args []string) error {
 		}
 		cceventmgmt.GetMgr().Register(cid, sub)
 	}, ccp, sccp, txvalidator.MapBasedPluginMapper(validationPluginsByName),
-		pr, deployedCCInfoProvider, membershipInfoProvider, metricsProvider)
+		pr, deployedCCInfoProvider, membershipInfoProvider, metricsProvider, transientDataProvider)
 
 	if viper.GetBool("peer.discovery.enabled") {
 		registerDiscoveryService(peerServer, policyMgr, lifecycle)
diff --git a/protos/common/collection.pb.go b/protos/common/collection.pb.go
index e4d93634..82283037 100644
--- a/protos/common/collection.pb.go
+++ b/protos/common/collection.pb.go
@@ -18,6 +18,33 @@ var _ = math.Inf
 // proto package needs to be updated.
 const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package
 
+// CollectionType enumerates the various types of private data collections.
+type CollectionType int32
+
+const (
+	CollectionType_COL_UNKNOWN   CollectionType = 0
+	CollectionType_COL_PRIVATE   CollectionType = 1
+	CollectionType_COL_TRANSIENT CollectionType = 2
+)
+
+var CollectionType_name = map[int32]string{
+	0: "COL_UNKNOWN",
+	1: "COL_PRIVATE",
+	2: "COL_TRANSIENT",
+}
+var CollectionType_value = map[string]int32{
+	"COL_UNKNOWN":   0,
+	"COL_PRIVATE":   1,
+	"COL_TRANSIENT": 2,
+}
+
+func (x CollectionType) String() string {
+	return proto.EnumName(CollectionType_name, int32(x))
+}
+func (CollectionType) EnumDescriptor() ([]byte, []int) {
+	return fileDescriptor_collection_28cf416bb2053e64, []int{0}
+}
+
 // CollectionConfigPackage represents an array of CollectionConfig
 // messages; the extra struct is required because repeated oneof is
 // forbidden by the protobuf syntax
@@ -32,7 +59,7 @@ func (m *CollectionConfigPackage) Reset()         { *m = CollectionConfigPackage
 func (m *CollectionConfigPackage) String() string { return proto.CompactTextString(m) }
 func (*CollectionConfigPackage) ProtoMessage()    {}
 func (*CollectionConfigPackage) Descriptor() ([]byte, []int) {
-	return fileDescriptor_collection_12a2cf6632dc7d83, []int{0}
+	return fileDescriptor_collection_28cf416bb2053e64, []int{0}
 }
 func (m *CollectionConfigPackage) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_CollectionConfigPackage.Unmarshal(m, b)
@@ -75,7 +102,7 @@ func (m *CollectionConfig) Reset()         { *m = CollectionConfig{} }
 func (m *CollectionConfig) String() string { return proto.CompactTextString(m) }
 func (*CollectionConfig) ProtoMessage()    {}
 func (*CollectionConfig) Descriptor() ([]byte, []int) {
-	return fileDescriptor_collection_12a2cf6632dc7d83, []int{1}
+	return fileDescriptor_collection_28cf416bb2053e64, []int{1}
 }
 func (m *CollectionConfig) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_CollectionConfig.Unmarshal(m, b)
@@ -199,7 +226,15 @@ type StaticCollectionConfig struct {
 	// can read the private data (if set to true), or even non members can
 	// read the data (if set to false, for example if you want to implement more granular
 	// access logic in the chaincode)
-	MemberOnlyRead       bool     `protobuf:"varint,6,opt,name=member_only_read,json=memberOnlyRead,proto3" json:"member_only_read,omitempty"`
+	MemberOnlyRead bool `protobuf:"varint,6,opt,name=member_only_read,json=memberOnlyRead,proto3" json:"member_only_read,omitempty"`
+	// The type of collection.
+	Type CollectionType `protobuf:"varint,9900,opt,name=type,proto3,enum=common.CollectionType" json:"type,omitempty"`
+	// The time after which the collection data expires. For example,
+	// if the value is set to "10m" then the data will be purged
+	// 10 minutes after it was stored. An empty value indicates that
+	// the data should never be purged.
+	// The format of this string must be parseable by time.ParseDuration
+	TimeToLive           string   `protobuf:"bytes,9901,opt,name=time_to_live,json=timeToLive,proto3" json:"time_to_live,omitempty"`
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
 	XXX_unrecognized     []byte   `json:"-"`
 	XXX_sizecache        int32    `json:"-"`
@@ -209,7 +244,7 @@ func (m *StaticCollectionConfig) Reset()         { *m = StaticCollectionConfig{}
 func (m *StaticCollectionConfig) String() string { return proto.CompactTextString(m) }
 func (*StaticCollectionConfig) ProtoMessage()    {}
 func (*StaticCollectionConfig) Descriptor() ([]byte, []int) {
-	return fileDescriptor_collection_12a2cf6632dc7d83, []int{2}
+	return fileDescriptor_collection_28cf416bb2053e64, []int{2}
 }
 func (m *StaticCollectionConfig) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_StaticCollectionConfig.Unmarshal(m, b)
@@ -271,6 +306,20 @@ func (m *StaticCollectionConfig) GetMemberOnlyRead() bool {
 	return false
 }
 
+func (m *StaticCollectionConfig) GetType() CollectionType {
+	if m != nil {
+		return m.Type
+	}
+	return CollectionType_COL_UNKNOWN
+}
+
+func (m *StaticCollectionConfig) GetTimeToLive() string {
+	if m != nil {
+		return m.TimeToLive
+	}
+	return ""
+}
+
 // Collection policy configuration. Initially, the configuration can only
 // contain a SignaturePolicy. In the future, the SignaturePolicy may be a
 // more general Policy. Instead of containing the actual policy, the
@@ -288,7 +337,7 @@ func (m *CollectionPolicyConfig) Reset()         { *m = CollectionPolicyConfig{}
 func (m *CollectionPolicyConfig) String() string { return proto.CompactTextString(m) }
 func (*CollectionPolicyConfig) ProtoMessage()    {}
 func (*CollectionPolicyConfig) Descriptor() ([]byte, []int) {
-	return fileDescriptor_collection_12a2cf6632dc7d83, []int{3}
+	return fileDescriptor_collection_28cf416bb2053e64, []int{3}
 }
 func (m *CollectionPolicyConfig) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_CollectionPolicyConfig.Unmarshal(m, b)
@@ -403,7 +452,7 @@ func (m *CollectionCriteria) Reset()         { *m = CollectionCriteria{} }
 func (m *CollectionCriteria) String() string { return proto.CompactTextString(m) }
 func (*CollectionCriteria) ProtoMessage()    {}
 func (*CollectionCriteria) Descriptor() ([]byte, []int) {
-	return fileDescriptor_collection_12a2cf6632dc7d83, []int{4}
+	return fileDescriptor_collection_28cf416bb2053e64, []int{4}
 }
 func (m *CollectionCriteria) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_CollectionCriteria.Unmarshal(m, b)
@@ -457,40 +506,47 @@ func init() {
 	proto.RegisterType((*StaticCollectionConfig)(nil), "common.StaticCollectionConfig")
 	proto.RegisterType((*CollectionPolicyConfig)(nil), "common.CollectionPolicyConfig")
 	proto.RegisterType((*CollectionCriteria)(nil), "common.CollectionCriteria")
-}
-
-func init() { proto.RegisterFile("common/collection.proto", fileDescriptor_collection_12a2cf6632dc7d83) }
-
-var fileDescriptor_collection_12a2cf6632dc7d83 = []byte{
-	// 480 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x51, 0x6b, 0xdb, 0x30,
-	0x10, 0xc7, 0xeb, 0x36, 0x4d, 0xe7, 0x0b, 0xdb, 0x32, 0x95, 0xa5, 0x66, 0x8c, 0x2e, 0x84, 0x3d,
-	0x18, 0x36, 0x9c, 0xd1, 0x7d, 0x83, 0x86, 0x41, 0xc7, 0x02, 0x0b, 0xea, 0x9e, 0xfa, 0x62, 0x14,
-	0xf9, 0xea, 0x88, 0xca, 0x92, 0x2b, 0x2b, 0x21, 0x7e, 0xdc, 0x97, 0xd9, 0xe7, 0x1c, 0x91, 0xec,
-	0x24, 0x0d, 0x79, 0xf3, 0xdd, 0xff, 0x77, 0xe7, 0xbb, 0xfb, 0xdb, 0x70, 0xc5, 0x75, 0x51, 0x68,
-	0x35, 0xe6, 0x5a, 0x4a, 0xe4, 0x56, 0x68, 0x95, 0x94, 0x46, 0x5b, 0x4d, 0xba, 0x5e, 0xf8, 0xf0,
-	0xbe, 0x01, 0x4a, 0x2d, 0x05, 0x17, 0x58, 0x79, 0x79, 0xf4, 0x0b, 0xae, 0x26, 0xdb, 0x92, 0x89,
-	0x56, 0x8f, 0x22, 0x9f, 0x31, 0xfe, 0xc4, 0x72, 0x24, 0xdf, 0xa0, 0xcb, 0x5d, 0x22, 0x0a, 0x86,
-	0x67, 0x71, 0xef, 0x26, 0x4a, 0x7c, 0x8b, 0xe4, 0xb0, 0x80, 0x36, 0xdc, 0xa8, 0x86, 0xfe, 0xa1,
-	0x46, 0x1e, 0x20, 0xaa, 0x2c, 0xb3, 0x82, 0xa7, 0xbb, 0xd1, 0xd2, 0x6d, 0xdf, 0x20, 0xee, 0xdd,
-	0x5c, 0xb7, 0x7d, 0xef, 0x1d, 0x77, 0xd8, 0xe1, 0xee, 0x84, 0x0e, 0xaa, 0xa3, 0xca, 0x6d, 0x08,
-	0x17, 0x25, 0xab, 0xa5, 0x66, 0xd9, 0xe8, 0xdf, 0x29, 0x0c, 0x8e, 0xd7, 0x13, 0x02, 0x1d, 0xc5,
-	0x0a, 0x74, 0x6f, 0x0b, 0xa9, 0x7b, 0x26, 0x53, 0x20, 0x05, 0x16, 0x73, 0x34, 0xa9, 0x36, 0x79,
-	0x95, 0xba, 0xa3, 0xd4, 0xd1, 0xe9, 0xcb, 0x79, 0x76, 0x9d, 0x66, 0x4e, 0x6f, 0xb6, 0xed, 0xfb,
-	0xca, 0xdf, 0x26, 0xaf, 0x7c, 0x9e, 0x24, 0x70, 0x69, 0xf0, 0x79, 0x29, 0x0c, 0x66, 0x69, 0x89,
-	0x68, 0x52, 0xae, 0x97, 0xca, 0x46, 0x67, 0xc3, 0x20, 0x3e, 0xa7, 0xef, 0x5a, 0x69, 0x86, 0x68,
-	0x26, 0x1b, 0x81, 0x7c, 0x05, 0x52, 0xb0, 0xb5, 0x28, 0x96, 0xc5, 0x3e, 0xde, 0x71, 0x78, 0xbf,
-	0x51, 0x76, 0xf4, 0x08, 0x5e, 0xcf, 0xa5, 0xe6, 0x4f, 0xa9, 0xd5, 0xa9, 0x14, 0x2b, 0x8c, 0xce,
-	0x87, 0x41, 0xdc, 0xa1, 0x3d, 0x97, 0xfc, 0xa3, 0xa7, 0x62, 0x85, 0x24, 0x86, 0x7e, 0xbb, 0x8f,
-	0x92, 0x75, 0x6a, 0x90, 0x65, 0x51, 0x77, 0x18, 0xc4, 0xaf, 0xe8, 0x9b, 0x66, 0x5a, 0x25, 0x6b,
-	0x8a, 0x2c, 0x1b, 0x3d, 0xc3, 0xe0, 0xf8, 0x5e, 0x64, 0x0a, 0xfd, 0x4a, 0xe4, 0x8a, 0xd9, 0xa5,
-	0xc1, 0xf6, 0x22, 0xde, 0xa1, 0x4f, 0x5b, 0x87, 0x5a, 0xdd, 0x17, 0xfe, 0x50, 0x2b, 0x94, 0xba,
-	0xc4, 0xbb, 0x13, 0xfa, 0xb6, 0x7a, 0x29, 0xed, 0x7b, 0xf3, 0x37, 0x00, 0xb2, 0xe7, 0x8a, 0x11,
-	0x16, 0x8d, 0x60, 0x24, 0x82, 0x0b, 0xbe, 0x60, 0x4a, 0xa1, 0x6c, 0xac, 0x69, 0x43, 0x72, 0x09,
-	0xe7, 0x76, 0x9d, 0x8a, 0xcc, 0x19, 0x12, 0xd2, 0x8e, 0x5d, 0xff, 0xcc, 0xc8, 0x35, 0xc0, 0xee,
-	0x0b, 0x72, 0xb7, 0x0d, 0xe9, 0x5e, 0x86, 0x7c, 0x84, 0x70, 0x63, 0x6d, 0x55, 0x32, 0x8e, 0xee,
-	0x96, 0x21, 0xdd, 0x25, 0x6e, 0xef, 0xe1, 0xb3, 0x36, 0x79, 0xb2, 0xa8, 0x4b, 0x34, 0x12, 0xb3,
-	0x1c, 0x4d, 0xf2, 0xc8, 0xe6, 0x46, 0x70, 0xff, 0x1f, 0x54, 0xcd, 0x86, 0x0f, 0x5f, 0x72, 0x61,
-	0x17, 0xcb, 0xf9, 0x26, 0x1c, 0xef, 0xc1, 0x63, 0x0f, 0x8f, 0x3d, 0x3c, 0xf6, 0xf0, 0xbc, 0xeb,
-	0xc2, 0xef, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x3b, 0x7c, 0x15, 0x7d, 0x03, 0x00, 0x00,
+	proto.RegisterEnum("common.CollectionType", CollectionType_name, CollectionType_value)
+}
+
+func init() { proto.RegisterFile("common/collection.proto", fileDescriptor_collection_28cf416bb2053e64) }
+
+var fileDescriptor_collection_28cf416bb2053e64 = []byte{
+	// 569 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x51, 0x4f, 0xdb, 0x3c,
+	0x14, 0x25, 0x50, 0xca, 0xd7, 0xdb, 0x0f, 0x08, 0x46, 0x2b, 0xd1, 0x34, 0xb1, 0xae, 0xda, 0x43,
+	0x34, 0xa6, 0x76, 0x62, 0xbf, 0x00, 0xaa, 0x4a, 0x20, 0x4a, 0xa9, 0x4c, 0xb7, 0x49, 0xbc, 0x44,
+	0xae, 0x73, 0x09, 0x16, 0x49, 0x1c, 0x1c, 0x17, 0x91, 0xc7, 0xfd, 0x9f, 0xed, 0xef, 0xed, 0x79,
+	0xaa, 0x9d, 0xb4, 0x85, 0xf1, 0x16, 0x9f, 0x73, 0xee, 0xf5, 0xbd, 0xe7, 0x38, 0x70, 0xc0, 0x65,
+	0x92, 0xc8, 0xb4, 0xc7, 0x65, 0x1c, 0x23, 0xd7, 0x42, 0xa6, 0xdd, 0x4c, 0x49, 0x2d, 0x49, 0xdd,
+	0x12, 0x6f, 0xdf, 0x94, 0x82, 0x4c, 0xc6, 0x82, 0x0b, 0xcc, 0x2d, 0xdd, 0xb9, 0x80, 0x83, 0xfe,
+	0xa2, 0xa4, 0x2f, 0xd3, 0x5b, 0x11, 0x8d, 0x19, 0xbf, 0x67, 0x11, 0x92, 0x2f, 0x50, 0xe7, 0x06,
+	0xf0, 0x9c, 0xf6, 0x86, 0xdf, 0x3c, 0xf6, 0xba, 0xb6, 0x45, 0xf7, 0x65, 0x01, 0x2d, 0x75, 0x9d,
+	0x02, 0xdc, 0x97, 0x1c, 0xb9, 0x01, 0x2f, 0xd7, 0x4c, 0x0b, 0x1e, 0x2c, 0x47, 0x0b, 0x16, 0x7d,
+	0x1d, 0xbf, 0x79, 0x7c, 0x58, 0xf5, 0xbd, 0x36, 0xba, 0x97, 0x1d, 0xce, 0xd6, 0x68, 0x2b, 0x7f,
+	0x95, 0x39, 0x6d, 0xc0, 0x56, 0xc6, 0x8a, 0x58, 0xb2, 0xb0, 0xf3, 0x67, 0x1d, 0x5a, 0xaf, 0xd7,
+	0x13, 0x02, 0xb5, 0x94, 0x25, 0x68, 0x6e, 0x6b, 0x50, 0xf3, 0x4d, 0x86, 0x40, 0x12, 0x4c, 0xa6,
+	0xa8, 0x02, 0xa9, 0xa2, 0x3c, 0x30, 0xa6, 0x14, 0xde, 0xfa, 0xf3, 0x79, 0x96, 0x9d, 0xc6, 0x86,
+	0x2f, 0xb7, 0x75, 0x6d, 0xe5, 0x95, 0x8a, 0x72, 0x8b, 0x93, 0x2e, 0xec, 0x2b, 0x7c, 0x98, 0x09,
+	0x85, 0x61, 0x90, 0x21, 0xaa, 0x80, 0xcb, 0x59, 0xaa, 0xbd, 0x8d, 0xb6, 0xe3, 0x6f, 0xd2, 0xbd,
+	0x8a, 0x1a, 0x23, 0xaa, 0xfe, 0x9c, 0x20, 0x9f, 0x81, 0x24, 0xec, 0x49, 0x24, 0xb3, 0x64, 0x55,
+	0x5e, 0x33, 0x72, 0xb7, 0x64, 0x96, 0xea, 0x0e, 0x6c, 0x4f, 0x63, 0xc9, 0xef, 0x03, 0x2d, 0x83,
+	0x58, 0x3c, 0xa2, 0xb7, 0xd9, 0x76, 0xfc, 0x1a, 0x6d, 0x1a, 0x70, 0x22, 0x87, 0xe2, 0x11, 0x89,
+	0x0f, 0x6e, 0xb5, 0x4f, 0x1a, 0x17, 0x81, 0x42, 0x16, 0x7a, 0xf5, 0xb6, 0xe3, 0xff, 0x47, 0x77,
+	0xca, 0x69, 0xd3, 0xb8, 0xa0, 0xc8, 0x42, 0x72, 0x04, 0x35, 0x5d, 0x64, 0xe8, 0xfd, 0xba, 0x6c,
+	0x3b, 0xfe, 0xce, 0x71, 0xeb, 0xdf, 0x65, 0x27, 0x45, 0x86, 0xd4, 0x88, 0xc8, 0x07, 0xf8, 0x5f,
+	0x8b, 0x04, 0x17, 0x37, 0xff, 0xbe, 0x34, 0x1e, 0xc2, 0x1c, 0xb4, 0x37, 0x77, 0x1e, 0xa0, 0xf5,
+	0xba, 0x4f, 0x64, 0x08, 0x6e, 0x2e, 0xa2, 0x94, 0xe9, 0x99, 0xc2, 0xca, 0x61, 0x9b, 0xf8, 0xfb,
+	0x45, 0xe2, 0x15, 0x6f, 0x0b, 0x07, 0xe9, 0x23, 0xc6, 0x32, 0xc3, 0xb3, 0x35, 0xba, 0x9b, 0x3f,
+	0xa7, 0x56, 0xb3, 0xfe, 0xe9, 0x00, 0x59, 0x49, 0x59, 0x09, 0x8d, 0x4a, 0x30, 0xe2, 0xc1, 0x16,
+	0xbf, 0x63, 0x69, 0x8a, 0x71, 0x19, 0x75, 0x75, 0x24, 0xfb, 0xb0, 0xa9, 0x9f, 0x02, 0x11, 0x9a,
+	0x80, 0x1b, 0xb4, 0xa6, 0x9f, 0xce, 0x43, 0x72, 0x08, 0xb0, 0x7c, 0x91, 0x26, 0xab, 0x06, 0x5d,
+	0x41, 0xc8, 0x3b, 0x68, 0xcc, 0x9f, 0x4a, 0x9e, 0x31, 0x8e, 0x26, 0x9b, 0x06, 0x5d, 0x02, 0x9f,
+	0x06, 0xb0, 0xf3, 0xdc, 0x31, 0xb2, 0x0b, 0xcd, 0xfe, 0xd5, 0x30, 0xf8, 0x36, 0xba, 0x18, 0x5d,
+	0xfd, 0x18, 0xb9, 0x6b, 0x15, 0x30, 0xa6, 0xe7, 0xdf, 0x4f, 0x26, 0x03, 0xd7, 0x21, 0x7b, 0xb0,
+	0x3d, 0x07, 0x26, 0xf4, 0x64, 0x74, 0x7d, 0x3e, 0x18, 0x4d, 0xdc, 0xf5, 0xd3, 0x6b, 0xf8, 0x28,
+	0x55, 0xd4, 0xbd, 0x2b, 0x32, 0x54, 0x31, 0x86, 0x11, 0xaa, 0xee, 0x2d, 0x9b, 0x2a, 0xc1, 0xed,
+	0xef, 0x99, 0x97, 0x46, 0xdd, 0x1c, 0x45, 0x42, 0xdf, 0xcd, 0xa6, 0xf3, 0x63, 0x6f, 0x45, 0xdc,
+	0xb3, 0xe2, 0x9e, 0x15, 0xf7, 0xac, 0x78, 0x5a, 0x37, 0xc7, 0xaf, 0x7f, 0x03, 0x00, 0x00, 0xff,
+	0xff, 0xf9, 0xf4, 0x41, 0xd5, 0x14, 0x04, 0x00, 0x00,
 }
diff --git a/protos/common/collection.proto b/protos/common/collection.proto
index 321bfd72..1df01a36 100644
--- a/protos/common/collection.proto
+++ b/protos/common/collection.proto
@@ -13,6 +13,13 @@ option java_package = "org.hyperledger.fabric.protos.common";
 
 package common;
 
+// CollectionType enumerates the various types of private data collections.
+enum CollectionType {
+    COL_UNKNOWN = 0;    // Unspecified type - will use PRIVATE as default.
+    COL_PRIVATE = 1;    // Persisted private data collection.
+    COL_TRANSIENT = 2;  // Transient private data collection.
+}
+
 // CollectionConfigPackage represents an array of CollectionConfig
 // messages; the extra struct is required because repeated oneof is
 // forbidden by the protobuf syntax
@@ -56,6 +63,14 @@ message StaticCollectionConfig {
     // read the data (if set to false, for example if you want to implement more granular
     // access logic in the chaincode)
     bool member_only_read = 6;
+    // The type of collection.
+    CollectionType type = 9900;
+    // The time after which the collection data expires. For example,
+    // if the value is set to "10m" then the data will be purged
+    // 10 minutes after it was stored. An empty value indicates that
+    // the data should never be purged.
+    // The format of this string must be parseable by time.ParseDuration
+    string time_to_live = 9901;
 }
 
 
@@ -70,7 +85,7 @@ message CollectionPolicyConfig {
         // Later, the SignaturePolicy will be replaced by a Policy.
         //        Policy policy = 1;
         // A reference to a Policy is planned to be added later.
-//        string reference = 2;
+        //        string reference = 2;
     }
 }
 
diff --git a/protos/gossip/extensions.go b/protos/gossip/extensions.go
index b86a78ef..233c7b79 100644
--- a/protos/gossip/extensions.go
+++ b/protos/gossip/extensions.go
@@ -297,6 +297,13 @@ func (m *GossipMessage) IsTagLegal() error {
 		return nil
 	}
 
+	if m.GetCollDataReq() != nil || m.GetCollDataRes() != nil {
+		if m.Tag != GossipMessage_CHAN_ONLY {
+			return fmt.Errorf("Tag should be %s", GossipMessage_Tag_name[int32(GossipMessage_CHAN_ONLY)])
+		}
+		return nil
+	}
+
 	return fmt.Errorf("Unknown message type: %v", m)
 }
 
diff --git a/protos/gossip/message.pb.go b/protos/gossip/message.pb.go
index 310eabc1..6dc899c3 100644
--- a/protos/gossip/message.pb.go
+++ b/protos/gossip/message.pb.go
@@ -6,6 +6,7 @@ package gossip // import "github.com/hyperledger/fabric/protos/gossip"
 import proto "github.com/golang/protobuf/proto"
 import fmt "fmt"
 import math "math"
+import timestamp "github.com/golang/protobuf/ptypes/timestamp"
 import common "github.com/hyperledger/fabric/protos/common"
 
 import (
@@ -47,7 +48,7 @@ func (x PullMsgType) String() string {
 	return proto.EnumName(PullMsgType_name, int32(x))
 }
 func (PullMsgType) EnumDescriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{0}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{0}
 }
 
 type GossipMessage_Tag int32
@@ -82,7 +83,7 @@ func (x GossipMessage_Tag) String() string {
 	return proto.EnumName(GossipMessage_Tag_name, int32(x))
 }
 func (GossipMessage_Tag) EnumDescriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{3, 0}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{3, 0}
 }
 
 // Envelope contains a marshalled
@@ -102,7 +103,7 @@ func (m *Envelope) Reset()         { *m = Envelope{} }
 func (m *Envelope) String() string { return proto.CompactTextString(m) }
 func (*Envelope) ProtoMessage()    {}
 func (*Envelope) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{0}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{0}
 }
 func (m *Envelope) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_Envelope.Unmarshal(m, b)
@@ -160,7 +161,7 @@ func (m *SecretEnvelope) Reset()         { *m = SecretEnvelope{} }
 func (m *SecretEnvelope) String() string { return proto.CompactTextString(m) }
 func (*SecretEnvelope) ProtoMessage()    {}
 func (*SecretEnvelope) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{1}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{1}
 }
 func (m *SecretEnvelope) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_SecretEnvelope.Unmarshal(m, b)
@@ -210,7 +211,7 @@ func (m *Secret) Reset()         { *m = Secret{} }
 func (m *Secret) String() string { return proto.CompactTextString(m) }
 func (*Secret) ProtoMessage()    {}
 func (*Secret) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{2}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{2}
 }
 func (m *Secret) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_Secret.Unmarshal(m, b)
@@ -339,6 +340,8 @@ type GossipMessage struct {
 	//	*GossipMessage_PrivateReq
 	//	*GossipMessage_PrivateRes
 	//	*GossipMessage_PrivateData
+	//	*GossipMessage_CollDataReq
+	//	*GossipMessage_CollDataRes
 	Content              isGossipMessage_Content `protobuf_oneof:"content"`
 	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
 	XXX_unrecognized     []byte                  `json:"-"`
@@ -349,7 +352,7 @@ func (m *GossipMessage) Reset()         { *m = GossipMessage{} }
 func (m *GossipMessage) String() string { return proto.CompactTextString(m) }
 func (*GossipMessage) ProtoMessage()    {}
 func (*GossipMessage) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{3}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{3}
 }
 func (m *GossipMessage) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_GossipMessage.Unmarshal(m, b)
@@ -478,6 +481,14 @@ type GossipMessage_PrivateData struct {
 	PrivateData *PrivateDataMessage `protobuf:"bytes,25,opt,name=private_data,json=privateData,proto3,oneof"`
 }
 
+type GossipMessage_CollDataReq struct {
+	CollDataReq *RemoteCollDataRequest `protobuf:"bytes,90,opt,name=collDataReq,proto3,oneof"`
+}
+
+type GossipMessage_CollDataRes struct {
+	CollDataRes *RemoteCollDataResponse `protobuf:"bytes,91,opt,name=collDataRes,proto3,oneof"`
+}
+
 func (*GossipMessage_AliveMsg) isGossipMessage_Content() {}
 
 func (*GossipMessage_MemReq) isGossipMessage_Content() {}
@@ -520,6 +531,10 @@ func (*GossipMessage_PrivateRes) isGossipMessage_Content() {}
 
 func (*GossipMessage_PrivateData) isGossipMessage_Content() {}
 
+func (*GossipMessage_CollDataReq) isGossipMessage_Content() {}
+
+func (*GossipMessage_CollDataRes) isGossipMessage_Content() {}
+
 func (m *GossipMessage) GetContent() isGossipMessage_Content {
 	if m != nil {
 		return m.Content
@@ -674,6 +689,20 @@ func (m *GossipMessage) GetPrivateData() *PrivateDataMessage {
 	return nil
 }
 
+func (m *GossipMessage) GetCollDataReq() *RemoteCollDataRequest {
+	if x, ok := m.GetContent().(*GossipMessage_CollDataReq); ok {
+		return x.CollDataReq
+	}
+	return nil
+}
+
+func (m *GossipMessage) GetCollDataRes() *RemoteCollDataResponse {
+	if x, ok := m.GetContent().(*GossipMessage_CollDataRes); ok {
+		return x.CollDataRes
+	}
+	return nil
+}
+
 // XXX_OneofFuncs is for the internal use of the proto package.
 func (*GossipMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
 	return _GossipMessage_OneofMarshaler, _GossipMessage_OneofUnmarshaler, _GossipMessage_OneofSizer, []interface{}{
@@ -698,6 +727,8 @@ func (*GossipMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer)
 		(*GossipMessage_PrivateReq)(nil),
 		(*GossipMessage_PrivateRes)(nil),
 		(*GossipMessage_PrivateData)(nil),
+		(*GossipMessage_CollDataReq)(nil),
+		(*GossipMessage_CollDataRes)(nil),
 	}
 }
 
@@ -810,6 +841,16 @@ func _GossipMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
 		if err := b.EncodeMessage(x.PrivateData); err != nil {
 			return err
 		}
+	case *GossipMessage_CollDataReq:
+		b.EncodeVarint(90<<3 | proto.WireBytes)
+		if err := b.EncodeMessage(x.CollDataReq); err != nil {
+			return err
+		}
+	case *GossipMessage_CollDataRes:
+		b.EncodeVarint(91<<3 | proto.WireBytes)
+		if err := b.EncodeMessage(x.CollDataRes); err != nil {
+			return err
+		}
 	case nil:
 	default:
 		return fmt.Errorf("GossipMessage.Content has unexpected type %T", x)
@@ -988,6 +1029,22 @@ func _GossipMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.
 		err := b.DecodeMessage(msg)
 		m.Content = &GossipMessage_PrivateData{msg}
 		return true, err
+	case 90: // content.collDataReq
+		if wire != proto.WireBytes {
+			return true, proto.ErrInternalBadWireType
+		}
+		msg := new(RemoteCollDataRequest)
+		err := b.DecodeMessage(msg)
+		m.Content = &GossipMessage_CollDataReq{msg}
+		return true, err
+	case 91: // content.collDataRes
+		if wire != proto.WireBytes {
+			return true, proto.ErrInternalBadWireType
+		}
+		msg := new(RemoteCollDataResponse)
+		err := b.DecodeMessage(msg)
+		m.Content = &GossipMessage_CollDataRes{msg}
+		return true, err
 	default:
 		return false, nil
 	}
@@ -1102,6 +1159,16 @@ func _GossipMessage_OneofSizer(msg proto.Message) (n int) {
 		n += 2 // tag and wire
 		n += proto.SizeVarint(uint64(s))
 		n += s
+	case *GossipMessage_CollDataReq:
+		s := proto.Size(x.CollDataReq)
+		n += 2 // tag and wire
+		n += proto.SizeVarint(uint64(s))
+		n += s
+	case *GossipMessage_CollDataRes:
+		s := proto.Size(x.CollDataRes)
+		n += 2 // tag and wire
+		n += proto.SizeVarint(uint64(s))
+		n += s
 	case nil:
 	default:
 		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
@@ -1128,7 +1195,7 @@ func (m *StateInfo) Reset()         { *m = StateInfo{} }
 func (m *StateInfo) String() string { return proto.CompactTextString(m) }
 func (*StateInfo) ProtoMessage()    {}
 func (*StateInfo) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{4}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{4}
 }
 func (m *StateInfo) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_StateInfo.Unmarshal(m, b)
@@ -1189,7 +1256,7 @@ func (m *Properties) Reset()         { *m = Properties{} }
 func (m *Properties) String() string { return proto.CompactTextString(m) }
 func (*Properties) ProtoMessage()    {}
 func (*Properties) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{5}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{5}
 }
 func (m *Properties) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_Properties.Unmarshal(m, b)
@@ -1242,7 +1309,7 @@ func (m *StateInfoSnapshot) Reset()         { *m = StateInfoSnapshot{} }
 func (m *StateInfoSnapshot) String() string { return proto.CompactTextString(m) }
 func (*StateInfoSnapshot) ProtoMessage()    {}
 func (*StateInfoSnapshot) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{6}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{6}
 }
 func (m *StateInfoSnapshot) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_StateInfoSnapshot.Unmarshal(m, b)
@@ -1285,7 +1352,7 @@ func (m *StateInfoPullRequest) Reset()         { *m = StateInfoPullRequest{} }
 func (m *StateInfoPullRequest) String() string { return proto.CompactTextString(m) }
 func (*StateInfoPullRequest) ProtoMessage()    {}
 func (*StateInfoPullRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{7}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{7}
 }
 func (m *StateInfoPullRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_StateInfoPullRequest.Unmarshal(m, b)
@@ -1328,7 +1395,7 @@ func (m *ConnEstablish) Reset()         { *m = ConnEstablish{} }
 func (m *ConnEstablish) String() string { return proto.CompactTextString(m) }
 func (*ConnEstablish) ProtoMessage()    {}
 func (*ConnEstablish) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{8}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{8}
 }
 func (m *ConnEstablish) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_ConnEstablish.Unmarshal(m, b)
@@ -1385,7 +1452,7 @@ func (m *PeerIdentity) Reset()         { *m = PeerIdentity{} }
 func (m *PeerIdentity) String() string { return proto.CompactTextString(m) }
 func (*PeerIdentity) ProtoMessage()    {}
 func (*PeerIdentity) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{9}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{9}
 }
 func (m *PeerIdentity) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_PeerIdentity.Unmarshal(m, b)
@@ -1441,7 +1508,7 @@ func (m *DataRequest) Reset()         { *m = DataRequest{} }
 func (m *DataRequest) String() string { return proto.CompactTextString(m) }
 func (*DataRequest) ProtoMessage()    {}
 func (*DataRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{10}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{10}
 }
 func (m *DataRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_DataRequest.Unmarshal(m, b)
@@ -1497,7 +1564,7 @@ func (m *GossipHello) Reset()         { *m = GossipHello{} }
 func (m *GossipHello) String() string { return proto.CompactTextString(m) }
 func (*GossipHello) ProtoMessage()    {}
 func (*GossipHello) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{11}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{11}
 }
 func (m *GossipHello) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_GossipHello.Unmarshal(m, b)
@@ -1553,7 +1620,7 @@ func (m *DataUpdate) Reset()         { *m = DataUpdate{} }
 func (m *DataUpdate) String() string { return proto.CompactTextString(m) }
 func (*DataUpdate) ProtoMessage()    {}
 func (*DataUpdate) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{12}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{12}
 }
 func (m *DataUpdate) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_DataUpdate.Unmarshal(m, b)
@@ -1609,7 +1676,7 @@ func (m *DataDigest) Reset()         { *m = DataDigest{} }
 func (m *DataDigest) String() string { return proto.CompactTextString(m) }
 func (*DataDigest) ProtoMessage()    {}
 func (*DataDigest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{13}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{13}
 }
 func (m *DataDigest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_DataDigest.Unmarshal(m, b)
@@ -1662,7 +1729,7 @@ func (m *DataMessage) Reset()         { *m = DataMessage{} }
 func (m *DataMessage) String() string { return proto.CompactTextString(m) }
 func (*DataMessage) ProtoMessage()    {}
 func (*DataMessage) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{14}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{14}
 }
 func (m *DataMessage) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_DataMessage.Unmarshal(m, b)
@@ -1703,7 +1770,7 @@ func (m *PrivateDataMessage) Reset()         { *m = PrivateDataMessage{} }
 func (m *PrivateDataMessage) String() string { return proto.CompactTextString(m) }
 func (*PrivateDataMessage) ProtoMessage()    {}
 func (*PrivateDataMessage) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{15}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{15}
 }
 func (m *PrivateDataMessage) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_PrivateDataMessage.Unmarshal(m, b)
@@ -1744,7 +1811,7 @@ func (m *Payload) Reset()         { *m = Payload{} }
 func (m *Payload) String() string { return proto.CompactTextString(m) }
 func (*Payload) ProtoMessage()    {}
 func (*Payload) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{16}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{16}
 }
 func (m *Payload) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_Payload.Unmarshal(m, b)
@@ -1804,7 +1871,7 @@ func (m *PrivatePayload) Reset()         { *m = PrivatePayload{} }
 func (m *PrivatePayload) String() string { return proto.CompactTextString(m) }
 func (*PrivatePayload) ProtoMessage()    {}
 func (*PrivatePayload) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{17}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{17}
 }
 func (m *PrivatePayload) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_PrivatePayload.Unmarshal(m, b)
@@ -1881,7 +1948,7 @@ func (m *AliveMessage) Reset()         { *m = AliveMessage{} }
 func (m *AliveMessage) String() string { return proto.CompactTextString(m) }
 func (*AliveMessage) ProtoMessage()    {}
 func (*AliveMessage) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{18}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{18}
 }
 func (m *AliveMessage) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_AliveMessage.Unmarshal(m, b)
@@ -1937,7 +2004,7 @@ func (m *LeadershipMessage) Reset()         { *m = LeadershipMessage{} }
 func (m *LeadershipMessage) String() string { return proto.CompactTextString(m) }
 func (*LeadershipMessage) ProtoMessage()    {}
 func (*LeadershipMessage) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{19}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{19}
 }
 func (m *LeadershipMessage) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_LeadershipMessage.Unmarshal(m, b)
@@ -1991,7 +2058,7 @@ func (m *PeerTime) Reset()         { *m = PeerTime{} }
 func (m *PeerTime) String() string { return proto.CompactTextString(m) }
 func (*PeerTime) ProtoMessage()    {}
 func (*PeerTime) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{20}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{20}
 }
 func (m *PeerTime) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_PeerTime.Unmarshal(m, b)
@@ -2039,7 +2106,7 @@ func (m *MembershipRequest) Reset()         { *m = MembershipRequest{} }
 func (m *MembershipRequest) String() string { return proto.CompactTextString(m) }
 func (*MembershipRequest) ProtoMessage()    {}
 func (*MembershipRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{21}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{21}
 }
 func (m *MembershipRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_MembershipRequest.Unmarshal(m, b)
@@ -2086,7 +2153,7 @@ func (m *MembershipResponse) Reset()         { *m = MembershipResponse{} }
 func (m *MembershipResponse) String() string { return proto.CompactTextString(m) }
 func (*MembershipResponse) ProtoMessage()    {}
 func (*MembershipResponse) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{22}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{22}
 }
 func (m *MembershipResponse) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_MembershipResponse.Unmarshal(m, b)
@@ -2135,7 +2202,7 @@ func (m *Member) Reset()         { *m = Member{} }
 func (m *Member) String() string { return proto.CompactTextString(m) }
 func (*Member) ProtoMessage()    {}
 func (*Member) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{23}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{23}
 }
 func (m *Member) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_Member.Unmarshal(m, b)
@@ -2187,7 +2254,7 @@ func (m *Empty) Reset()         { *m = Empty{} }
 func (m *Empty) String() string { return proto.CompactTextString(m) }
 func (*Empty) ProtoMessage()    {}
 func (*Empty) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{24}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{24}
 }
 func (m *Empty) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_Empty.Unmarshal(m, b)
@@ -2221,7 +2288,7 @@ func (m *RemoteStateRequest) Reset()         { *m = RemoteStateRequest{} }
 func (m *RemoteStateRequest) String() string { return proto.CompactTextString(m) }
 func (*RemoteStateRequest) ProtoMessage()    {}
 func (*RemoteStateRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{25}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{25}
 }
 func (m *RemoteStateRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_RemoteStateRequest.Unmarshal(m, b)
@@ -2268,7 +2335,7 @@ func (m *RemoteStateResponse) Reset()         { *m = RemoteStateResponse{} }
 func (m *RemoteStateResponse) String() string { return proto.CompactTextString(m) }
 func (*RemoteStateResponse) ProtoMessage()    {}
 func (*RemoteStateResponse) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{26}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{26}
 }
 func (m *RemoteStateResponse) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_RemoteStateResponse.Unmarshal(m, b)
@@ -2308,7 +2375,7 @@ func (m *RemotePvtDataRequest) Reset()         { *m = RemotePvtDataRequest{} }
 func (m *RemotePvtDataRequest) String() string { return proto.CompactTextString(m) }
 func (*RemotePvtDataRequest) ProtoMessage()    {}
 func (*RemotePvtDataRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{27}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{27}
 }
 func (m *RemotePvtDataRequest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_RemotePvtDataRequest.Unmarshal(m, b)
@@ -2351,7 +2418,7 @@ func (m *PvtDataDigest) Reset()         { *m = PvtDataDigest{} }
 func (m *PvtDataDigest) String() string { return proto.CompactTextString(m) }
 func (*PvtDataDigest) ProtoMessage()    {}
 func (*PvtDataDigest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{28}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{28}
 }
 func (m *PvtDataDigest) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_PvtDataDigest.Unmarshal(m, b)
@@ -2419,7 +2486,7 @@ func (m *RemotePvtDataResponse) Reset()         { *m = RemotePvtDataResponse{} }
 func (m *RemotePvtDataResponse) String() string { return proto.CompactTextString(m) }
 func (*RemotePvtDataResponse) ProtoMessage()    {}
 func (*RemotePvtDataResponse) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{29}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{29}
 }
 func (m *RemotePvtDataResponse) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_RemotePvtDataResponse.Unmarshal(m, b)
@@ -2459,7 +2526,7 @@ func (m *PvtDataElement) Reset()         { *m = PvtDataElement{} }
 func (m *PvtDataElement) String() string { return proto.CompactTextString(m) }
 func (*PvtDataElement) ProtoMessage()    {}
 func (*PvtDataElement) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{30}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{30}
 }
 func (m *PvtDataElement) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_PvtDataElement.Unmarshal(m, b)
@@ -2509,7 +2576,7 @@ func (m *PvtDataPayload) Reset()         { *m = PvtDataPayload{} }
 func (m *PvtDataPayload) String() string { return proto.CompactTextString(m) }
 func (*PvtDataPayload) ProtoMessage()    {}
 func (*PvtDataPayload) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{31}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{31}
 }
 func (m *PvtDataPayload) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_PvtDataPayload.Unmarshal(m, b)
@@ -2554,7 +2621,7 @@ func (m *Acknowledgement) Reset()         { *m = Acknowledgement{} }
 func (m *Acknowledgement) String() string { return proto.CompactTextString(m) }
 func (*Acknowledgement) ProtoMessage()    {}
 func (*Acknowledgement) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{32}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{32}
 }
 func (m *Acknowledgement) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_Acknowledgement.Unmarshal(m, b)
@@ -2596,7 +2663,7 @@ func (m *Chaincode) Reset()         { *m = Chaincode{} }
 func (m *Chaincode) String() string { return proto.CompactTextString(m) }
 func (*Chaincode) ProtoMessage()    {}
 func (*Chaincode) Descriptor() ([]byte, []int) {
-	return fileDescriptor_message_7c42328ef5ef9997, []int{33}
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{33}
 }
 func (m *Chaincode) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_Chaincode.Unmarshal(m, b)
@@ -2637,6 +2704,283 @@ func (m *Chaincode) GetMetadata() []byte {
 	return nil
 }
 
+// ValidationResultsMessage is the message containing block validation results
+type ValidationResultsMessage struct {
+	SeqNum               uint64   `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
+	TxFlags              []byte   `protobuf:"bytes,2,opt,name=txFlags,proto3" json:"txFlags,omitempty"`
+	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
+	Identity             []byte   `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *ValidationResultsMessage) Reset()         { *m = ValidationResultsMessage{} }
+func (m *ValidationResultsMessage) String() string { return proto.CompactTextString(m) }
+func (*ValidationResultsMessage) ProtoMessage()    {}
+func (*ValidationResultsMessage) Descriptor() ([]byte, []int) {
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{34}
+}
+func (m *ValidationResultsMessage) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_ValidationResultsMessage.Unmarshal(m, b)
+}
+func (m *ValidationResultsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_ValidationResultsMessage.Marshal(b, m, deterministic)
+}
+func (dst *ValidationResultsMessage) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_ValidationResultsMessage.Merge(dst, src)
+}
+func (m *ValidationResultsMessage) XXX_Size() int {
+	return xxx_messageInfo_ValidationResultsMessage.Size(m)
+}
+func (m *ValidationResultsMessage) XXX_DiscardUnknown() {
+	xxx_messageInfo_ValidationResultsMessage.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_ValidationResultsMessage proto.InternalMessageInfo
+
+func (m *ValidationResultsMessage) GetSeqNum() uint64 {
+	if m != nil {
+		return m.SeqNum
+	}
+	return 0
+}
+
+func (m *ValidationResultsMessage) GetTxFlags() []byte {
+	if m != nil {
+		return m.TxFlags
+	}
+	return nil
+}
+
+func (m *ValidationResultsMessage) GetSignature() []byte {
+	if m != nil {
+		return m.Signature
+	}
+	return nil
+}
+
+func (m *ValidationResultsMessage) GetIdentity() []byte {
+	if m != nil {
+		return m.Identity
+	}
+	return nil
+}
+
+// RemoteCollDataRequest message used to request
+// collection data
+type RemoteCollDataRequest struct {
+	Nonce                uint64            `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
+	Digests              []*CollDataDigest `protobuf:"bytes,2,rep,name=digests,proto3" json:"digests,omitempty"`
+	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
+	XXX_unrecognized     []byte            `json:"-"`
+	XXX_sizecache        int32             `json:"-"`
+}
+
+func (m *RemoteCollDataRequest) Reset()         { *m = RemoteCollDataRequest{} }
+func (m *RemoteCollDataRequest) String() string { return proto.CompactTextString(m) }
+func (*RemoteCollDataRequest) ProtoMessage()    {}
+func (*RemoteCollDataRequest) Descriptor() ([]byte, []int) {
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{35}
+}
+func (m *RemoteCollDataRequest) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_RemoteCollDataRequest.Unmarshal(m, b)
+}
+func (m *RemoteCollDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_RemoteCollDataRequest.Marshal(b, m, deterministic)
+}
+func (dst *RemoteCollDataRequest) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_RemoteCollDataRequest.Merge(dst, src)
+}
+func (m *RemoteCollDataRequest) XXX_Size() int {
+	return xxx_messageInfo_RemoteCollDataRequest.Size(m)
+}
+func (m *RemoteCollDataRequest) XXX_DiscardUnknown() {
+	xxx_messageInfo_RemoteCollDataRequest.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_RemoteCollDataRequest proto.InternalMessageInfo
+
+func (m *RemoteCollDataRequest) GetNonce() uint64 {
+	if m != nil {
+		return m.Nonce
+	}
+	return 0
+}
+
+func (m *RemoteCollDataRequest) GetDigests() []*CollDataDigest {
+	if m != nil {
+		return m.Digests
+	}
+	return nil
+}
+
+// CollDataDigest defines a digest of collection data
+type CollDataDigest struct {
+	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
+	Collection           string   `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
+	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
+	EndorsedAtTxID       string   `protobuf:"bytes,4,opt,name=endorsedAtTxID,proto3" json:"endorsedAtTxID,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *CollDataDigest) Reset()         { *m = CollDataDigest{} }
+func (m *CollDataDigest) String() string { return proto.CompactTextString(m) }
+func (*CollDataDigest) ProtoMessage()    {}
+func (*CollDataDigest) Descriptor() ([]byte, []int) {
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{36}
+}
+func (m *CollDataDigest) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_CollDataDigest.Unmarshal(m, b)
+}
+func (m *CollDataDigest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_CollDataDigest.Marshal(b, m, deterministic)
+}
+func (dst *CollDataDigest) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_CollDataDigest.Merge(dst, src)
+}
+func (m *CollDataDigest) XXX_Size() int {
+	return xxx_messageInfo_CollDataDigest.Size(m)
+}
+func (m *CollDataDigest) XXX_DiscardUnknown() {
+	xxx_messageInfo_CollDataDigest.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_CollDataDigest proto.InternalMessageInfo
+
+func (m *CollDataDigest) GetNamespace() string {
+	if m != nil {
+		return m.Namespace
+	}
+	return ""
+}
+
+func (m *CollDataDigest) GetCollection() string {
+	if m != nil {
+		return m.Collection
+	}
+	return ""
+}
+
+func (m *CollDataDigest) GetKey() string {
+	if m != nil {
+		return m.Key
+	}
+	return ""
+}
+
+func (m *CollDataDigest) GetEndorsedAtTxID() string {
+	if m != nil {
+		return m.EndorsedAtTxID
+	}
+	return ""
+}
+
+// RemoteCollDataResponse message used to respond to
+// collection data request
+type RemoteCollDataResponse struct {
+	Nonce                uint64             `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
+	Elements             []*CollDataElement `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
+	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
+	XXX_unrecognized     []byte             `json:"-"`
+	XXX_sizecache        int32              `json:"-"`
+}
+
+func (m *RemoteCollDataResponse) Reset()         { *m = RemoteCollDataResponse{} }
+func (m *RemoteCollDataResponse) String() string { return proto.CompactTextString(m) }
+func (*RemoteCollDataResponse) ProtoMessage()    {}
+func (*RemoteCollDataResponse) Descriptor() ([]byte, []int) {
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{37}
+}
+func (m *RemoteCollDataResponse) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_RemoteCollDataResponse.Unmarshal(m, b)
+}
+func (m *RemoteCollDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_RemoteCollDataResponse.Marshal(b, m, deterministic)
+}
+func (dst *RemoteCollDataResponse) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_RemoteCollDataResponse.Merge(dst, src)
+}
+func (m *RemoteCollDataResponse) XXX_Size() int {
+	return xxx_messageInfo_RemoteCollDataResponse.Size(m)
+}
+func (m *RemoteCollDataResponse) XXX_DiscardUnknown() {
+	xxx_messageInfo_RemoteCollDataResponse.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_RemoteCollDataResponse proto.InternalMessageInfo
+
+func (m *RemoteCollDataResponse) GetNonce() uint64 {
+	if m != nil {
+		return m.Nonce
+	}
+	return 0
+}
+
+func (m *RemoteCollDataResponse) GetElements() []*CollDataElement {
+	if m != nil {
+		return m.Elements
+	}
+	return nil
+}
+
+// CollDataElement contains the collection data digest and value
+type CollDataElement struct {
+	Digest               *CollDataDigest      `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
+	Value                []byte               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
+	ExpiryTime           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expiryTime,proto3" json:"expiryTime,omitempty"`
+	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
+	XXX_unrecognized     []byte               `json:"-"`
+	XXX_sizecache        int32                `json:"-"`
+}
+
+func (m *CollDataElement) Reset()         { *m = CollDataElement{} }
+func (m *CollDataElement) String() string { return proto.CompactTextString(m) }
+func (*CollDataElement) ProtoMessage()    {}
+func (*CollDataElement) Descriptor() ([]byte, []int) {
+	return fileDescriptor_message_9b7c5a83d1e435d7, []int{38}
+}
+func (m *CollDataElement) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_CollDataElement.Unmarshal(m, b)
+}
+func (m *CollDataElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_CollDataElement.Marshal(b, m, deterministic)
+}
+func (dst *CollDataElement) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_CollDataElement.Merge(dst, src)
+}
+func (m *CollDataElement) XXX_Size() int {
+	return xxx_messageInfo_CollDataElement.Size(m)
+}
+func (m *CollDataElement) XXX_DiscardUnknown() {
+	xxx_messageInfo_CollDataElement.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_CollDataElement proto.InternalMessageInfo
+
+func (m *CollDataElement) GetDigest() *CollDataDigest {
+	if m != nil {
+		return m.Digest
+	}
+	return nil
+}
+
+func (m *CollDataElement) GetValue() []byte {
+	if m != nil {
+		return m.Value
+	}
+	return nil
+}
+
+func (m *CollDataElement) GetExpiryTime() *timestamp.Timestamp {
+	if m != nil {
+		return m.ExpiryTime
+	}
+	return nil
+}
+
 func init() {
 	proto.RegisterType((*Envelope)(nil), "gossip.Envelope")
 	proto.RegisterType((*SecretEnvelope)(nil), "gossip.SecretEnvelope")
@@ -2672,6 +3016,11 @@ func init() {
 	proto.RegisterType((*PvtDataPayload)(nil), "gossip.PvtDataPayload")
 	proto.RegisterType((*Acknowledgement)(nil), "gossip.Acknowledgement")
 	proto.RegisterType((*Chaincode)(nil), "gossip.Chaincode")
+	proto.RegisterType((*ValidationResultsMessage)(nil), "gossip.ValidationResultsMessage")
+	proto.RegisterType((*RemoteCollDataRequest)(nil), "gossip.RemoteCollDataRequest")
+	proto.RegisterType((*CollDataDigest)(nil), "gossip.CollDataDigest")
+	proto.RegisterType((*RemoteCollDataResponse)(nil), "gossip.RemoteCollDataResponse")
+	proto.RegisterType((*CollDataElement)(nil), "gossip.CollDataElement")
 	proto.RegisterEnum("gossip.PullMsgType", PullMsgType_name, PullMsgType_value)
 	proto.RegisterEnum("gossip.GossipMessage_Tag", GossipMessage_Tag_name, GossipMessage_Tag_value)
 }
@@ -2818,126 +3167,140 @@ var _Gossip_serviceDesc = grpc.ServiceDesc{
 	Metadata: "gossip/message.proto",
 }
 
-func init() { proto.RegisterFile("gossip/message.proto", fileDescriptor_message_7c42328ef5ef9997) }
-
-var fileDescriptor_message_7c42328ef5ef9997 = []byte{
-	// 1874 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5b, 0x6f, 0xe3, 0xc6,
-	0x15, 0x16, 0x6d, 0x5d, 0x8f, 0x2e, 0x96, 0xc7, 0xde, 0x5d, 0xc6, 0x49, 0x13, 0x87, 0xed, 0x26,
-	0xdb, 0x7a, 0x23, 0x6f, 0x9d, 0x16, 0x0d, 0x90, 0xb6, 0x0b, 0x5b, 0x52, 0x2c, 0x21, 0x2b, 0xad,
-	0x4b, 0x7b, 0xd1, 0xba, 0x2f, 0xc4, 0x98, 0x1c, 0x53, 0xac, 0xc9, 0x21, 0xcd, 0x19, 0x3b, 0xf6,
-	0x63, 0xd1, 0x87, 0x00, 0x7d, 0xe9, 0x6f, 0xe8, 0x53, 0xff, 0x66, 0x31, 0x33, 0xbc, 0x4a, 0xf6,
-	0x02, 0x1b, 0x20, 0x6f, 0x3c, 0xf7, 0x99, 0x33, 0x67, 0xbe, 0x73, 0x86, 0xb0, 0xed, 0x86, 0x8c,
-	0x79, 0xd1, 0x7e, 0x40, 0x18, 0xc3, 0x2e, 0x19, 0x44, 0x71, 0xc8, 0x43, 0x54, 0x57, 0xdc, 0x9d,
-	0x67, 0x76, 0x18, 0x04, 0x21, 0xdd, 0xb7, 0x43, 0xdf, 0x27, 0x36, 0xf7, 0x42, 0xaa, 0x14, 0x8c,
-	0x7f, 0x69, 0xd0, 0x1c, 0xd3, 0x5b, 0xe2, 0x87, 0x11, 0x41, 0x3a, 0x34, 0x22, 0x7c, 0xef, 0x87,
-	0xd8, 0xd1, 0xb5, 0x5d, 0xed, 0x45, 0xc7, 0x4c, 0x49, 0xf4, 0x09, 0xb4, 0x98, 0xe7, 0x52, 0xcc,
-	0x6f, 0x62, 0xa2, 0xaf, 0x49, 0x59, 0xce, 0x40, 0xaf, 0x61, 0x83, 0x11, 0x3b, 0x26, 0xdc, 0x22,
-	0x89, 0x2b, 0x7d, 0x7d, 0x57, 0x7b, 0xd1, 0x3e, 0x78, 0x3a, 0x50, 0xf1, 0x07, 0xa7, 0x52, 0x9c,
-	0x06, 0x32, 0x7b, 0xac, 0x44, 0x1b, 0x13, 0xe8, 0x95, 0x35, 0x7e, 0xea, 0x52, 0x8c, 0x43, 0xa8,
-	0x2b, 0x4f, 0xe8, 0x25, 0xf4, 0x3d, 0xca, 0x49, 0x4c, 0xb1, 0x3f, 0xa6, 0x4e, 0x14, 0x7a, 0x94,
-	0x4b, 0x57, 0xad, 0x49, 0xc5, 0x5c, 0x91, 0x1c, 0xb5, 0xa0, 0x61, 0x87, 0x94, 0x13, 0xca, 0x8d,
-	0x1f, 0xdb, 0xd0, 0x3d, 0x96, 0xcb, 0x9e, 0xa9, 0x5c, 0xa2, 0x6d, 0xa8, 0xd1, 0x90, 0xda, 0x44,
-	0xda, 0x57, 0x4d, 0x45, 0x88, 0x25, 0xda, 0x0b, 0x4c, 0x29, 0xf1, 0x93, 0x65, 0xa4, 0x24, 0xda,
-	0x83, 0x75, 0x8e, 0x5d, 0x99, 0x83, 0xde, 0xc1, 0x47, 0x69, 0x0e, 0x4a, 0x3e, 0x07, 0x67, 0xd8,
-	0x35, 0x85, 0x16, 0xfa, 0x1a, 0x5a, 0xd8, 0xf7, 0x6e, 0x89, 0x15, 0x30, 0x57, 0xaf, 0xc9, 0xb4,
-	0x6d, 0xa7, 0x26, 0x87, 0x42, 0x90, 0x58, 0x4c, 0x2a, 0x66, 0x53, 0x2a, 0xce, 0x98, 0x8b, 0x7e,
-	0x07, 0x8d, 0x80, 0x04, 0x56, 0x4c, 0xae, 0xf5, 0xba, 0x34, 0xc9, 0xa2, 0xcc, 0x48, 0x70, 0x41,
-	0x62, 0xb6, 0xf0, 0x22, 0x93, 0x5c, 0xdf, 0x10, 0xc6, 0x27, 0x15, 0xb3, 0x1e, 0x90, 0xc0, 0x24,
-	0xd7, 0xe8, 0xf7, 0xa9, 0x15, 0xd3, 0x1b, 0xd2, 0x6a, 0xe7, 0x21, 0x2b, 0x16, 0x85, 0x94, 0x91,
-	0xcc, 0x8c, 0xa1, 0x57, 0xd0, 0x74, 0x30, 0xc7, 0x72, 0x81, 0x4d, 0x69, 0xb7, 0x95, 0xda, 0x8d,
-	0x30, 0xc7, 0xf9, 0xfa, 0x1a, 0x42, 0x4d, 0x2c, 0x6f, 0x0f, 0x6a, 0x0b, 0xe2, 0xfb, 0xa1, 0xde,
-	0x2a, 0xab, 0xab, 0x14, 0x4c, 0x84, 0x68, 0x52, 0x31, 0x95, 0x0e, 0xda, 0x4f, 0xdc, 0x3b, 0x9e,
-	0xab, 0x83, 0xd4, 0x47, 0x45, 0xf7, 0x23, 0xcf, 0x55, 0xbb, 0x90, 0xde, 0x47, 0x9e, 0x9b, 0xad,
-	0x47, 0xec, 0xbe, 0xbd, 0xba, 0x9e, 0x7c, 0xdf, 0xd2, 0x42, 0x6d, 0xbc, 0x2d, 0x2d, 0x6e, 0x22,
-	0x07, 0x73, 0xa2, 0x77, 0x56, 0xa3, 0xbc, 0x93, 0x92, 0x49, 0xc5, 0x04, 0x27, 0xa3, 0xd0, 0x73,
-	0xa8, 0x91, 0x20, 0xe2, 0xf7, 0x7a, 0x57, 0x1a, 0x74, 0x53, 0x83, 0xb1, 0x60, 0x8a, 0x0d, 0x48,
-	0x29, 0xda, 0x83, 0xaa, 0x1d, 0x52, 0xaa, 0xf7, 0xa4, 0xd6, 0x93, 0x54, 0x6b, 0x18, 0x52, 0x3a,
-	0x66, 0x1c, 0x5f, 0xf8, 0x1e, 0x5b, 0x4c, 0x2a, 0xa6, 0x54, 0x42, 0x07, 0x00, 0x8c, 0x63, 0x4e,
-	0x2c, 0x8f, 0x5e, 0x86, 0xfa, 0x86, 0x34, 0xd9, 0xcc, 0xae, 0x89, 0x90, 0x4c, 0xe9, 0xa5, 0xc8,
-	0x4e, 0x8b, 0xa5, 0x04, 0x3a, 0x82, 0x9e, 0xb2, 0x61, 0x14, 0x47, 0x6c, 0x11, 0x72, 0xbd, 0x5f,
-	0x3e, 0xf4, 0xcc, 0xee, 0x34, 0x51, 0x98, 0x54, 0xcc, 0xae, 0x34, 0x49, 0x19, 0x68, 0x06, 0x5b,
-	0x79, 0x5c, 0x2b, 0xba, 0xf1, 0x7d, 0x99, 0xbf, 0x4d, 0xe9, 0xe8, 0x93, 0x15, 0x47, 0x27, 0x37,
-	0xbe, 0x9f, 0x27, 0xb2, 0xcf, 0x96, 0xf8, 0xe8, 0x10, 0x94, 0x7f, 0xe1, 0x44, 0x28, 0xe9, 0xa8,
-	0x5c, 0x50, 0x26, 0x09, 0x42, 0x4e, 0xa4, 0xbb, 0xdc, 0x4d, 0x87, 0x15, 0x68, 0x34, 0x4a, 0x77,
-	0x15, 0x27, 0x25, 0xa7, 0x6f, 0x49, 0x1f, 0x1f, 0x3f, 0xe8, 0x23, 0xab, 0xca, 0x2e, 0x2b, 0x32,
-	0x44, 0x6e, 0x7c, 0x82, 0x1d, 0x55, 0xbc, 0xb2, 0x44, 0xb7, 0xcb, 0xb9, 0x79, 0x93, 0x49, 0xf3,
-	0x42, 0xed, 0xe6, 0x26, 0xa2, 0x5c, 0xbf, 0x85, 0x6e, 0x44, 0x48, 0x6c, 0x79, 0x0e, 0xa1, 0xdc,
-	0xe3, 0xf7, 0xfa, 0x93, 0xf2, 0x35, 0x3c, 0x21, 0x24, 0x9e, 0x26, 0x32, 0xb1, 0x8d, 0xa8, 0x40,
-	0x8b, 0xcb, 0x8e, 0xed, 0x2b, 0xfd, 0xa9, 0x34, 0x79, 0x96, 0xdd, 0x5c, 0xfb, 0x8a, 0x86, 0x3f,
-	0xf8, 0xc4, 0x71, 0x49, 0x40, 0xa8, 0xd8, 0xbc, 0xd0, 0x42, 0x7f, 0x06, 0x88, 0x62, 0xef, 0x56,
-	0x65, 0x41, 0x7f, 0x56, 0x4e, 0xbe, 0xda, 0xef, 0xc9, 0x2d, 0x2f, 0x57, 0x71, 0xc1, 0x02, 0xbd,
-	0x2e, 0xd8, 0x33, 0x5d, 0x97, 0xf6, 0xbf, 0x78, 0xc4, 0x3e, 0xcb, 0x58, 0xc1, 0x04, 0xbd, 0x86,
-	0x4e, 0x42, 0x59, 0xa2, 0xd0, 0xf5, 0x8f, 0xca, 0xc7, 0x76, 0xa2, 0x64, 0xe5, 0x6b, 0xdd, 0x8e,
-	0x72, 0xae, 0x61, 0xc1, 0xfa, 0x19, 0x76, 0x51, 0x17, 0x5a, 0xef, 0xe6, 0xa3, 0xf1, 0x77, 0xd3,
-	0xf9, 0x78, 0xd4, 0xaf, 0xa0, 0x16, 0xd4, 0xc6, 0xb3, 0x93, 0xb3, 0xf3, 0xbe, 0x86, 0x3a, 0xd0,
-	0x7c, 0x6b, 0x1e, 0x5b, 0x6f, 0xe7, 0x6f, 0xce, 0xfb, 0x6b, 0x42, 0x6f, 0x38, 0x39, 0x9c, 0x2b,
-	0x72, 0x1d, 0xf5, 0xa1, 0x23, 0xc9, 0xc3, 0xf9, 0xc8, 0x7a, 0x6b, 0x1e, 0xf7, 0xab, 0x68, 0x03,
-	0xda, 0x4a, 0xc1, 0x94, 0x8c, 0x5a, 0x11, 0x89, 0xff, 0xa7, 0x41, 0x2b, 0xab, 0x48, 0x34, 0x80,
-	0x16, 0xf7, 0x02, 0xc2, 0x38, 0x0e, 0x22, 0x89, 0xb8, 0xed, 0x83, 0x7e, 0xf1, 0x84, 0xce, 0xbc,
-	0x80, 0x98, 0xb9, 0x0a, 0x7a, 0x02, 0xf5, 0xe8, 0xca, 0xb3, 0x3c, 0x47, 0x02, 0x71, 0xc7, 0xac,
-	0x45, 0x57, 0xde, 0xd4, 0x41, 0x9f, 0x41, 0x3b, 0xc1, 0x69, 0x6b, 0x76, 0x38, 0xd4, 0xab, 0x52,
-	0x06, 0x09, 0x6b, 0x76, 0x38, 0x14, 0x37, 0x34, 0x8a, 0xc3, 0x88, 0xc4, 0xdc, 0x23, 0x2c, 0x41,
-	0x64, 0x94, 0x27, 0x28, 0x95, 0x98, 0x05, 0x2d, 0xe3, 0x47, 0x0d, 0x20, 0x17, 0xa1, 0x5f, 0x42,
-	0x57, 0x1e, 0x7d, 0x6c, 0x2d, 0x88, 0xe7, 0x2e, 0x78, 0xd2, 0x38, 0x3a, 0x8a, 0x39, 0x91, 0x3c,
-	0xf4, 0x39, 0x74, 0x7c, 0x72, 0xc9, 0xad, 0x62, 0x13, 0x69, 0x9a, 0x6d, 0xc1, 0x1b, 0x26, 0x8d,
-	0xe4, 0xb7, 0x20, 0x16, 0xe6, 0x51, 0x3b, 0x74, 0x08, 0xd3, 0xd7, 0x77, 0xd7, 0x8b, 0x60, 0x31,
-	0x4c, 0x25, 0x66, 0x41, 0xc9, 0x38, 0x84, 0xcd, 0x15, 0x34, 0x40, 0x2f, 0xa1, 0x49, 0x7c, 0x59,
-	0x88, 0x4c, 0xd7, 0xa4, 0x97, 0x2c, 0x73, 0x59, 0x4f, 0xce, 0x34, 0x8c, 0x3f, 0xc0, 0xf6, 0x43,
-	0x38, 0xb0, 0x9c, 0x39, 0x6d, 0x39, 0x73, 0xc6, 0x25, 0x74, 0x4b, 0xa0, 0x57, 0x38, 0x02, 0xad,
-	0x78, 0x04, 0x3b, 0xd0, 0xcc, 0xae, 0x9a, 0x6a, 0x9d, 0x19, 0x8d, 0x0c, 0xe8, 0x72, 0x9f, 0x59,
-	0x36, 0x89, 0xb9, 0xb5, 0xc0, 0x6c, 0x91, 0x1c, 0x5e, 0x9b, 0xfb, 0x6c, 0x48, 0x62, 0x3e, 0xc1,
-	0x6c, 0x61, 0xbc, 0x83, 0x4e, 0xf1, 0x4a, 0x3e, 0x16, 0x06, 0x41, 0x55, 0xb8, 0x49, 0x42, 0xc8,
-	0x6f, 0x11, 0x3a, 0x20, 0x1c, 0xcb, 0xda, 0x57, 0x9e, 0x33, 0xda, 0x08, 0xa0, 0x5d, 0xb8, 0x79,
-	0x8f, 0x77, 0x7d, 0x47, 0x76, 0x24, 0xa6, 0xaf, 0xed, 0xae, 0x8b, 0xae, 0x9f, 0x90, 0x68, 0x00,
-	0xcd, 0x80, 0xb9, 0x16, 0xbf, 0x4f, 0xc6, 0x9f, 0x5e, 0xde, 0x96, 0x44, 0x16, 0x67, 0xcc, 0x3d,
-	0xbb, 0x8f, 0x88, 0xd9, 0x08, 0xd4, 0x87, 0x11, 0x42, 0xbb, 0xd0, 0x0f, 0x1f, 0x09, 0x57, 0x5c,
-	0xef, 0x5a, 0x79, 0xbd, 0x1f, 0x1c, 0xf0, 0x0e, 0x20, 0x6f, 0x75, 0x8f, 0xc4, 0xfb, 0x15, 0x54,
-	0x93, 0x58, 0x0f, 0x57, 0x49, 0xf5, 0x27, 0x45, 0xf6, 0x55, 0x64, 0xd5, 0xca, 0x7f, 0xf6, 0xc4,
-	0x7e, 0xa3, 0xce, 0x31, 0x9d, 0xde, 0x7e, 0x5d, 0x1e, 0x25, 0xdb, 0x07, 0x1b, 0x99, 0xb5, 0x62,
-	0x67, 0xb3, 0xa5, 0xf1, 0x1d, 0xa0, 0x55, 0x04, 0x44, 0xaf, 0x96, 0x1d, 0x3c, 0x5d, 0x82, 0xcb,
-	0x15, 0x3f, 0xe7, 0xd0, 0x48, 0x78, 0xe8, 0x19, 0x34, 0x18, 0xb9, 0xb6, 0xe8, 0x4d, 0x90, 0x6c,
-	0xb7, 0xce, 0xc8, 0xf5, 0xfc, 0x26, 0x10, 0xd5, 0x59, 0x38, 0x55, 0x95, 0xd7, 0xcf, 0x97, 0xd0,
-	0x79, 0x5d, 0x26, 0xa2, 0x84, 0xbf, 0xff, 0x59, 0x83, 0x5e, 0x39, 0x2c, 0xfa, 0x12, 0x36, 0xf2,
-	0xb9, 0xde, 0xa2, 0x38, 0x50, 0x99, 0x6d, 0x99, 0xbd, 0x9c, 0x3d, 0xc7, 0x01, 0x11, 0xa3, 0xb3,
-	0x90, 0xb2, 0x08, 0xdb, 0x6a, 0x74, 0x6e, 0x99, 0x39, 0x03, 0x6d, 0x41, 0x8d, 0xdf, 0xa5, 0x70,
-	0xd9, 0x32, 0xab, 0xfc, 0x6e, 0xea, 0x08, 0x24, 0x4b, 0x57, 0x14, 0xff, 0xc0, 0x08, 0x4f, 0xf0,
-	0x32, 0x5d, 0xa6, 0x29, 0x78, 0xe8, 0x25, 0xa0, 0x54, 0x89, 0x79, 0x41, 0x8a, 0x79, 0x35, 0xb9,
-	0xdd, 0x7e, 0x22, 0x39, 0xf5, 0x82, 0x04, 0xf7, 0xe6, 0x80, 0x0a, 0xcb, 0xb5, 0x43, 0x7a, 0xe9,
-	0xb9, 0x2c, 0x19, 0x63, 0x3f, 0x1b, 0xa8, 0x87, 0xca, 0x60, 0x98, 0x69, 0x0c, 0xa5, 0xc2, 0x09,
-	0xb6, 0xaf, 0xb0, 0x4b, 0xcc, 0x4d, 0x7b, 0x49, 0xc0, 0x8c, 0x7f, 0x6b, 0xd0, 0x29, 0x0e, 0xca,
-	0x68, 0x00, 0x10, 0x64, 0xf3, 0x6c, 0x72, 0x64, 0xbd, 0xf2, 0xa4, 0x6b, 0x16, 0x34, 0x3e, 0xb8,
-	0xb1, 0x14, 0xe1, 0xab, 0x5a, 0x86, 0x2f, 0xe3, 0x9f, 0x1a, 0x6c, 0xae, 0x4c, 0x1c, 0x8f, 0x01,
-	0xd4, 0x87, 0x06, 0x7e, 0x0e, 0x3d, 0x8f, 0x59, 0x0e, 0xb1, 0x7d, 0x1c, 0x63, 0x91, 0x02, 0x79,
-	0x54, 0x4d, 0xb3, 0xeb, 0xb1, 0x51, 0xce, 0x34, 0xfe, 0x08, 0xcd, 0xd4, 0x5a, 0x94, 0x9f, 0x47,
-	0xed, 0x62, 0xf9, 0x79, 0xd4, 0x16, 0xe5, 0x57, 0xa8, 0xcb, 0xb5, 0x62, 0x5d, 0x1a, 0x97, 0xb0,
-	0xb9, 0xf2, 0x86, 0x40, 0xdf, 0x42, 0x9f, 0x11, 0xff, 0x52, 0x0e, 0x8f, 0x71, 0xa0, 0x62, 0x6b,
-	0xe5, 0x05, 0x67, 0x10, 0xb1, 0x21, 0x34, 0xa7, 0xb9, 0xa2, 0xb8, 0xef, 0x62, 0x18, 0xa2, 0xc9,
-	0xbd, 0x56, 0x84, 0x71, 0x01, 0x68, 0xf5, 0xd5, 0x81, 0xbe, 0x80, 0x9a, 0x7c, 0xe4, 0x3c, 0xda,
-	0xa6, 0x94, 0x58, 0xe2, 0x14, 0xc1, 0xce, 0x7b, 0x70, 0x8a, 0x60, 0xc7, 0xf8, 0x2b, 0xd4, 0x55,
-	0x0c, 0x71, 0x66, 0xa4, 0xf4, 0x0a, 0x34, 0x33, 0xfa, 0xbd, 0x18, 0xfb, 0xf0, 0x10, 0x61, 0x34,
-	0xa0, 0x26, 0x1f, 0x01, 0xc6, 0xdf, 0x00, 0xad, 0x8e, 0xba, 0xa2, 0x89, 0x31, 0x8e, 0x63, 0x6e,
-	0x95, 0xaf, 0x7e, 0x5b, 0x32, 0x4f, 0xd5, 0xfd, 0xff, 0x14, 0xda, 0x84, 0x3a, 0x56, 0xf9, 0x10,
-	0x5a, 0x84, 0x3a, 0x4a, 0x6e, 0x1c, 0xc1, 0xd6, 0x03, 0x03, 0x30, 0xda, 0x83, 0x66, 0x82, 0x32,
-	0x69, 0x2b, 0x5f, 0x81, 0xb3, 0x4c, 0xc1, 0x38, 0x86, 0xed, 0x87, 0x86, 0x4a, 0xb4, 0x9f, 0x63,
-	0xad, 0xf2, 0x91, 0x3d, 0x5a, 0x12, 0x45, 0x85, 0xd4, 0x19, 0x04, 0x1b, 0xff, 0xd5, 0xa0, 0x5b,
-	0x12, 0xe5, 0x68, 0xa1, 0x15, 0xd0, 0xe2, 0xfd, 0x00, 0xf3, 0x29, 0x40, 0x7e, 0x7b, 0x13, 0x94,
-	0x29, 0x70, 0xd0, 0xc7, 0xd0, 0xba, 0xf0, 0x43, 0xfb, 0x4a, 0xe4, 0x44, 0x5e, 0xac, 0xaa, 0xd9,
-	0x94, 0x8c, 0x53, 0x72, 0x8d, 0x76, 0xa1, 0x23, 0x52, 0xe5, 0x51, 0x4b, 0xb2, 0x12, 0x74, 0x01,
-	0x46, 0xae, 0xa7, 0xf4, 0x48, 0x70, 0x8c, 0xef, 0xe1, 0xc9, 0x83, 0x13, 0x30, 0x3a, 0x58, 0x99,
-	0x7e, 0x9e, 0x2e, 0x6d, 0x77, 0xac, 0xc4, 0x85, 0x19, 0xe8, 0x1c, 0x7a, 0x65, 0x19, 0xfa, 0x0a,
-	0xea, 0x2a, 0x1b, 0x49, 0xe1, 0x3f, 0x92, 0xb2, 0x44, 0xa9, 0xf8, 0x03, 0x23, 0x69, 0x67, 0x69,
-	0x73, 0xf8, 0x4b, 0xe6, 0x3a, 0x05, 0xf0, 0xe7, 0xb0, 0xc1, 0xef, 0xac, 0xd2, 0xf6, 0x92, 0x81,
-	0x91, 0xdf, 0x9d, 0x66, 0x1b, 0x2c, 0xbb, 0x2c, 0xfe, 0x13, 0x31, 0xbe, 0x84, 0x8d, 0xa5, 0x07,
-	0x87, 0xb8, 0x74, 0x24, 0x8e, 0xc3, 0x38, 0x39, 0x1f, 0x45, 0x18, 0xef, 0xa0, 0x95, 0x8d, 0x8d,
-	0xa2, 0x03, 0x15, 0x9a, 0x85, 0xfc, 0x16, 0x31, 0x6e, 0x49, 0xcc, 0xc4, 0x01, 0xa9, 0xf3, 0x4b,
-	0xc9, 0xf7, 0x4d, 0x4e, 0xbf, 0xf9, 0x13, 0xb4, 0x0b, 0x9d, 0x78, 0xf9, 0x71, 0xd0, 0x85, 0xd6,
-	0xd1, 0x9b, 0xb7, 0xc3, 0xef, 0xad, 0xd9, 0xe9, 0x71, 0x5f, 0x13, 0x6f, 0x80, 0xe9, 0x68, 0x3c,
-	0x3f, 0x9b, 0x9e, 0x9d, 0x4b, 0xce, 0xda, 0xc1, 0x3f, 0xa0, 0xae, 0x26, 0x21, 0xf4, 0x0d, 0x74,
-	0xd4, 0xd7, 0x29, 0x8f, 0x09, 0x0e, 0xd0, 0xca, 0xc5, 0xde, 0x59, 0xe1, 0x18, 0x95, 0x17, 0xda,
-	0x2b, 0x0d, 0x7d, 0x01, 0xd5, 0x13, 0x8f, 0xba, 0xa8, 0xfc, 0x48, 0xdf, 0x29, 0x93, 0x46, 0xe5,
-	0xe8, 0xab, 0xbf, 0xef, 0xb9, 0x1e, 0x5f, 0xdc, 0x5c, 0x88, 0x4e, 0xb3, 0xbf, 0xb8, 0x8f, 0x48,
-	0xac, 0xa6, 0xf2, 0xfd, 0x4b, 0x7c, 0x11, 0x7b, 0xf6, 0xbe, 0xfc, 0x2f, 0xc6, 0xf6, 0x95, 0xd9,
-	0x45, 0x5d, 0x92, 0x5f, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x1d, 0xb3, 0x7e, 0x5f, 0x13,
-	0x00, 0x00,
+func init() { proto.RegisterFile("gossip/message.proto", fileDescriptor_message_9b7c5a83d1e435d7) }
+
+var fileDescriptor_message_9b7c5a83d1e435d7 = []byte{
+	// 2106 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x18, 0x5b, 0x73, 0xdb, 0x58,
+	0x39, 0x4a, 0xec, 0xd8, 0xfe, 0x7c, 0x89, 0x73, 0x9a, 0xb6, 0xda, 0xec, 0xd2, 0x76, 0x05, 0xed,
+	0x16, 0xda, 0x75, 0x4a, 0x0a, 0xc3, 0x0e, 0x0b, 0x74, 0x1c, 0x3b, 0xad, 0x3d, 0xdb, 0xa4, 0x41,
+	0x49, 0x81, 0x2e, 0x0f, 0x1a, 0x45, 0x3a, 0x96, 0x45, 0x74, 0x8b, 0xce, 0x71, 0x36, 0x79, 0x64,
+	0x78, 0x58, 0x86, 0x07, 0x78, 0xe0, 0x17, 0xf0, 0xc4, 0xdf, 0x64, 0xce, 0x45, 0xd2, 0x91, 0x2f,
+	0x99, 0xe9, 0xce, 0xf0, 0xa6, 0xef, 0x7a, 0xbe, 0xef, 0x3b, 0xdf, 0xed, 0x08, 0x76, 0xbc, 0x98,
+	0x10, 0x3f, 0xd9, 0x0b, 0x31, 0x21, 0xb6, 0x87, 0x7b, 0x49, 0x1a, 0xd3, 0x18, 0x6d, 0x0a, 0xec,
+	0xee, 0x7d, 0x27, 0x0e, 0xc3, 0x38, 0xda, 0x73, 0xe2, 0x20, 0xc0, 0x0e, 0xf5, 0xe3, 0x48, 0x30,
+	0xec, 0x3e, 0xf4, 0xe2, 0xd8, 0x0b, 0xf0, 0x1e, 0x87, 0xce, 0x67, 0x93, 0x3d, 0xea, 0x87, 0x98,
+	0x50, 0x3b, 0x4c, 0x04, 0x83, 0xf1, 0x37, 0x0d, 0xea, 0x87, 0xd1, 0x15, 0x0e, 0xe2, 0x04, 0x23,
+	0x1d, 0x6a, 0x89, 0x7d, 0x13, 0xc4, 0xb6, 0xab, 0x6b, 0x8f, 0xb4, 0xa7, 0x2d, 0x33, 0x03, 0xd1,
+	0x67, 0xd0, 0x20, 0xbe, 0x17, 0xd9, 0x74, 0x96, 0x62, 0x7d, 0x9d, 0xd3, 0x0a, 0x04, 0x7a, 0x05,
+	0x5b, 0x04, 0x3b, 0x29, 0xa6, 0x16, 0x96, 0xaa, 0xf4, 0x8d, 0x47, 0xda, 0xd3, 0xe6, 0xfe, 0xbd,
+	0x9e, 0x30, 0xb0, 0x77, 0xca, 0xc9, 0xd9, 0x41, 0x66, 0x87, 0x94, 0x60, 0x63, 0x04, 0x9d, 0x32,
+	0xc7, 0x0f, 0x35, 0xc5, 0xe8, 0xc3, 0xa6, 0xd0, 0x84, 0x9e, 0x43, 0xd7, 0x8f, 0x28, 0x4e, 0x23,
+	0x3b, 0x38, 0x8c, 0xdc, 0x24, 0xf6, 0x23, 0xca, 0x55, 0x35, 0x46, 0x6b, 0xe6, 0x02, 0xe5, 0xa0,
+	0x01, 0x35, 0x27, 0x8e, 0x28, 0x8e, 0xa8, 0xf1, 0xcf, 0x16, 0xb4, 0xdf, 0x70, 0xb3, 0x8f, 0x44,
+	0xb0, 0xd1, 0x0e, 0x54, 0xa3, 0x38, 0x72, 0x30, 0x97, 0xaf, 0x98, 0x02, 0x60, 0x26, 0x3a, 0x53,
+	0x3b, 0x8a, 0x70, 0x20, 0xcd, 0xc8, 0x40, 0xf4, 0x0c, 0x36, 0xa8, 0xed, 0xf1, 0x18, 0x74, 0xf6,
+	0x3f, 0xc9, 0x62, 0x50, 0xd2, 0xd9, 0x3b, 0xb3, 0x3d, 0x93, 0x71, 0xa1, 0x97, 0xd0, 0xb0, 0x03,
+	0xff, 0x0a, 0x5b, 0x21, 0xf1, 0xf4, 0x2a, 0x0f, 0xdb, 0x4e, 0x26, 0xd2, 0x67, 0x04, 0x29, 0x31,
+	0x5a, 0x33, 0xeb, 0x9c, 0xf1, 0x88, 0x78, 0xe8, 0x17, 0x50, 0x0b, 0x71, 0x68, 0xa5, 0xf8, 0x52,
+	0xdf, 0xe4, 0x22, 0xf9, 0x29, 0x47, 0x38, 0x3c, 0xc7, 0x29, 0x99, 0xfa, 0x89, 0x89, 0x2f, 0x67,
+	0x98, 0xd0, 0xd1, 0x9a, 0xb9, 0x19, 0xe2, 0xd0, 0xc4, 0x97, 0xe8, 0x97, 0x99, 0x14, 0xd1, 0x6b,
+	0x5c, 0x6a, 0x77, 0x99, 0x14, 0x49, 0xe2, 0x88, 0xe0, 0x5c, 0x8c, 0xa0, 0x17, 0x50, 0x77, 0x6d,
+	0x6a, 0x73, 0x03, 0xeb, 0x5c, 0xee, 0x4e, 0x26, 0x37, 0xb4, 0xa9, 0x5d, 0xd8, 0x57, 0x63, 0x6c,
+	0xcc, 0xbc, 0x67, 0x50, 0x9d, 0xe2, 0x20, 0x88, 0xf5, 0x46, 0x99, 0x5d, 0x84, 0x60, 0xc4, 0x48,
+	0xa3, 0x35, 0x53, 0xf0, 0xa0, 0x3d, 0xa9, 0xde, 0xf5, 0x3d, 0x1d, 0x38, 0x3f, 0x52, 0xd5, 0x0f,
+	0x7d, 0x4f, 0x78, 0xc1, 0xb5, 0x0f, 0x7d, 0x2f, 0xb7, 0x87, 0x79, 0xdf, 0x5c, 0xb4, 0xa7, 0xf0,
+	0x9b, 0x4b, 0x08, 0xc7, 0x9b, 0x5c, 0x62, 0x96, 0xb8, 0x36, 0xc5, 0x7a, 0x6b, 0xf1, 0x94, 0xf7,
+	0x9c, 0x32, 0x5a, 0x33, 0xc1, 0xcd, 0x21, 0xf4, 0x18, 0xaa, 0x38, 0x4c, 0xe8, 0x8d, 0xde, 0xe6,
+	0x02, 0xed, 0x4c, 0xe0, 0x90, 0x21, 0x99, 0x03, 0x9c, 0x8a, 0x9e, 0x41, 0xc5, 0x89, 0xa3, 0x48,
+	0xef, 0x70, 0xae, 0xbb, 0x19, 0xd7, 0x20, 0x8e, 0xa2, 0x43, 0x42, 0xed, 0xf3, 0xc0, 0x27, 0xd3,
+	0xd1, 0x9a, 0xc9, 0x99, 0xd0, 0x3e, 0x00, 0xa1, 0x36, 0xc5, 0x96, 0x1f, 0x4d, 0x62, 0x7d, 0x8b,
+	0x8b, 0x6c, 0xe7, 0x65, 0xc2, 0x28, 0xe3, 0x68, 0xc2, 0xa2, 0xd3, 0x20, 0x19, 0x80, 0x0e, 0xa0,
+	0x23, 0x64, 0x48, 0x64, 0x27, 0x64, 0x1a, 0x53, 0xbd, 0x5b, 0xbe, 0xf4, 0x5c, 0xee, 0x54, 0x32,
+	0x8c, 0xd6, 0xcc, 0x36, 0x17, 0xc9, 0x10, 0xe8, 0x08, 0xee, 0x14, 0xe7, 0x5a, 0xc9, 0x2c, 0x08,
+	0x78, 0xfc, 0xb6, 0xb9, 0xa2, 0xcf, 0x16, 0x14, 0x9d, 0xcc, 0x82, 0xa0, 0x08, 0x64, 0x97, 0xcc,
+	0xe1, 0x51, 0x1f, 0x84, 0x7e, 0xa6, 0x84, 0x31, 0xe9, 0xa8, 0x9c, 0x50, 0x26, 0x0e, 0x63, 0x8a,
+	0xb9, 0xba, 0x42, 0x4d, 0x8b, 0x28, 0x30, 0x1a, 0x66, 0x5e, 0xa5, 0x32, 0xe5, 0xf4, 0x3b, 0x5c,
+	0xc7, 0xa7, 0x4b, 0x75, 0xe4, 0x59, 0xd9, 0x26, 0x2a, 0x82, 0xc5, 0x26, 0xc0, 0xb6, 0x2b, 0x92,
+	0x97, 0xa7, 0xe8, 0x4e, 0x39, 0x36, 0x6f, 0x73, 0x6a, 0x91, 0xa8, 0xed, 0x42, 0x84, 0xa5, 0xeb,
+	0xd7, 0xd0, 0x4e, 0x30, 0x4e, 0x2d, 0xdf, 0xc5, 0x11, 0xf5, 0xe9, 0x8d, 0x7e, 0xb7, 0x5c, 0x86,
+	0x27, 0x18, 0xa7, 0x63, 0x49, 0x63, 0x6e, 0x24, 0x0a, 0xcc, 0x8a, 0xdd, 0x76, 0x2e, 0xf4, 0x7b,
+	0x5c, 0xe4, 0x7e, 0x5e, 0xb9, 0xce, 0x45, 0x14, 0x7f, 0x17, 0x60, 0xd7, 0xc3, 0x21, 0x8e, 0x98,
+	0xf3, 0x8c, 0x0b, 0xfd, 0x0e, 0x20, 0x49, 0xfd, 0x2b, 0x11, 0x05, 0xfd, 0x7e, 0x39, 0xf8, 0xc2,
+	0xdf, 0x93, 0x2b, 0x5a, 0xce, 0x62, 0x45, 0x02, 0xbd, 0x52, 0xe4, 0x89, 0xae, 0x73, 0xf9, 0x1f,
+	0xad, 0x90, 0xcf, 0x23, 0xa6, 0x88, 0xa0, 0x57, 0xd0, 0x92, 0x90, 0xc5, 0x12, 0x5d, 0xff, 0xa4,
+	0x7c, 0x6d, 0x27, 0x82, 0x56, 0x2e, 0xeb, 0x66, 0x52, 0x60, 0x51, 0x1f, 0x9a, 0x6c, 0xca, 0x48,
+	0x13, 0xf5, 0x6f, 0x97, 0x99, 0x30, 0x28, 0x18, 0xa4, 0x0f, 0xaa, 0x0c, 0x3a, 0x50, 0x55, 0x10,
+	0xfd, 0xcf, 0x5c, 0xc5, 0x83, 0x55, 0x2a, 0x72, 0x37, 0x54, 0x21, 0xc3, 0x82, 0x8d, 0x33, 0xdb,
+	0x43, 0x6d, 0x68, 0xbc, 0x3f, 0x1e, 0x1e, 0xbe, 0x1e, 0x1f, 0x1f, 0x0e, 0xbb, 0x6b, 0xa8, 0x01,
+	0xd5, 0xc3, 0xa3, 0x93, 0xb3, 0x0f, 0x5d, 0x0d, 0xb5, 0xa0, 0xfe, 0xce, 0x7c, 0x63, 0xbd, 0x3b,
+	0x7e, 0xfb, 0xa1, 0xbb, 0xce, 0xf8, 0x06, 0xa3, 0xfe, 0xb1, 0x00, 0x37, 0x50, 0x17, 0x5a, 0x1c,
+	0xec, 0x1f, 0x0f, 0xad, 0x77, 0xe6, 0x9b, 0x6e, 0x05, 0x6d, 0x41, 0x53, 0x30, 0x98, 0x1c, 0x51,
+	0x55, 0x07, 0xc2, 0x7f, 0x35, 0x68, 0xe4, 0x85, 0x81, 0x7a, 0xd0, 0xc8, 0x87, 0x28, 0x6f, 0xfc,
+	0xcd, 0xfd, 0xae, 0x9a, 0x28, 0x67, 0x7e, 0x88, 0xcd, 0x82, 0x05, 0xdd, 0x85, 0xcd, 0xe4, 0xc2,
+	0xb7, 0x7c, 0x97, 0xcf, 0x83, 0x96, 0x59, 0x4d, 0x2e, 0xfc, 0xb1, 0x8b, 0x1e, 0x42, 0x53, 0x8e,
+	0x0b, 0xeb, 0xa8, 0x3f, 0xd0, 0x2b, 0x9c, 0x06, 0x12, 0x75, 0xd4, 0x1f, 0xb0, 0x46, 0x91, 0xa4,
+	0x71, 0x82, 0x53, 0xea, 0x63, 0x22, 0x07, 0x03, 0x2a, 0xee, 0x29, 0xa3, 0x98, 0x0a, 0x97, 0xf1,
+	0xbd, 0x06, 0x50, 0x90, 0xd0, 0x8f, 0xa1, 0xcd, 0x33, 0x30, 0xb5, 0xa6, 0xd8, 0xf7, 0xa6, 0x54,
+	0xce, 0xaf, 0x96, 0x40, 0x8e, 0x38, 0x0e, 0x7d, 0x0e, 0xad, 0x00, 0x4f, 0xa8, 0xa5, 0xce, 0xb2,
+	0xba, 0xd9, 0x64, 0xb8, 0x81, 0x9c, 0x67, 0x3f, 0x07, 0x66, 0x98, 0x1f, 0x39, 0xb1, 0x8b, 0x89,
+	0xbe, 0xf1, 0x68, 0x43, 0xed, 0x59, 0x83, 0x8c, 0x62, 0x2a, 0x4c, 0x46, 0x1f, 0xb6, 0x17, 0x9a,
+	0x12, 0x7a, 0x0e, 0x75, 0x1c, 0xf0, 0x7a, 0x20, 0xba, 0xc6, 0xb5, 0xe4, 0x91, 0xcb, 0x57, 0x83,
+	0x9c, 0xc3, 0xf8, 0x15, 0xec, 0x2c, 0x6b, 0x47, 0xf3, 0x91, 0xd3, 0xe6, 0x23, 0x67, 0x4c, 0xa0,
+	0x5d, 0xea, 0xbd, 0xca, 0x15, 0x68, 0xea, 0x15, 0xec, 0x42, 0x3d, 0xaf, 0x78, 0x31, 0xc1, 0x73,
+	0x18, 0x19, 0xd0, 0xa6, 0x01, 0xb1, 0x1c, 0x9c, 0x52, 0x6b, 0x6a, 0x93, 0xa9, 0xbc, 0xbc, 0x26,
+	0x0d, 0xc8, 0x00, 0xa7, 0x74, 0x64, 0x93, 0xa9, 0xf1, 0x1e, 0x5a, 0x6a, 0x67, 0x58, 0x75, 0x0c,
+	0x82, 0x0a, 0x53, 0x23, 0x8f, 0xe0, 0xdf, 0xec, 0xe8, 0x10, 0x53, 0x9b, 0x97, 0xa0, 0xd0, 0x9c,
+	0xc3, 0x46, 0x08, 0x4d, 0xa5, 0x78, 0x56, 0x2f, 0x1f, 0x2e, 0x1f, 0x8c, 0x44, 0x5f, 0x7f, 0xb4,
+	0xc1, 0x96, 0x0f, 0x09, 0xa2, 0x1e, 0xd4, 0x43, 0xe2, 0x59, 0xf4, 0x46, 0x6e, 0x61, 0x9d, 0x62,
+	0x3a, 0xb2, 0x28, 0x1e, 0x11, 0xef, 0xec, 0x26, 0xc1, 0x66, 0x2d, 0x14, 0x1f, 0x46, 0x0c, 0x4d,
+	0x65, 0x2c, 0xaf, 0x38, 0x4e, 0xb5, 0x77, 0xbd, 0x6c, 0xef, 0x47, 0x1f, 0x78, 0x0d, 0x50, 0x4c,
+	0xdc, 0x15, 0xe7, 0xfd, 0x04, 0x2a, 0xf2, 0xac, 0xe5, 0x59, 0x52, 0xf9, 0x41, 0x27, 0x07, 0xe2,
+	0x64, 0xb1, 0x51, 0xfc, 0xdf, 0x03, 0xfb, 0x95, 0xb8, 0xc7, 0x6c, 0x89, 0xfc, 0x69, 0x79, 0xa3,
+	0x6d, 0xee, 0x6f, 0xe5, 0xd2, 0x02, 0x9d, 0xaf, 0xb8, 0xc6, 0x6b, 0x40, 0x8b, 0x8d, 0x18, 0xbd,
+	0x98, 0x57, 0x70, 0x6f, 0xae, 0x6b, 0x2f, 0xe8, 0xf9, 0x00, 0x35, 0x89, 0x43, 0xf7, 0xa1, 0x46,
+	0xf0, 0xa5, 0x15, 0xcd, 0x42, 0xe9, 0xee, 0x26, 0xc1, 0x97, 0xc7, 0xb3, 0x90, 0x65, 0xa7, 0x72,
+	0xab, 0x22, 0xae, 0x9f, 0xcf, 0x0d, 0x89, 0x0d, 0x1e, 0x08, 0x75, 0x0c, 0x18, 0xff, 0x5a, 0x87,
+	0x4e, 0xf9, 0x58, 0xf4, 0x05, 0x6c, 0x15, 0xef, 0x0f, 0x2b, 0xb2, 0x43, 0x11, 0xd9, 0x86, 0xd9,
+	0x29, 0xd0, 0xc7, 0x76, 0x88, 0xd9, 0x06, 0xcf, 0xa8, 0x24, 0xb1, 0x1d, 0xb1, 0xc1, 0x37, 0xcc,
+	0x02, 0x81, 0xee, 0x40, 0x95, 0x5e, 0x67, 0xed, 0xb2, 0x61, 0x56, 0xe8, 0xf5, 0xd8, 0x65, 0x9d,
+	0x2c, 0xb3, 0x28, 0xfd, 0x8e, 0x60, 0x2a, 0xfb, 0x65, 0x66, 0xa6, 0xc9, 0x70, 0xe8, 0x39, 0xa0,
+	0x8c, 0x89, 0xf8, 0x61, 0xd6, 0xf3, 0xaa, 0xdc, 0xdd, 0xae, 0xa4, 0x9c, 0xfa, 0xa1, 0xec, 0x7b,
+	0xc7, 0x80, 0x14, 0x73, 0x9d, 0x38, 0x9a, 0xf8, 0x1e, 0x91, 0xdb, 0xf4, 0xc3, 0x9e, 0x78, 0x50,
+	0xf5, 0x06, 0x39, 0xc7, 0x80, 0x33, 0x9c, 0xd8, 0xce, 0x85, 0xed, 0x61, 0x73, 0xdb, 0x99, 0x23,
+	0x10, 0xe3, 0x1f, 0x1a, 0xb4, 0xd4, 0x7d, 0x1d, 0xf5, 0x00, 0xc2, 0x7c, 0xad, 0x96, 0x57, 0xd6,
+	0x29, 0x2f, 0xdc, 0xa6, 0xc2, 0xf1, 0xd1, 0x83, 0x45, 0x6d, 0x5f, 0x95, 0x72, 0xfb, 0x32, 0xfe,
+	0xaa, 0xc1, 0xf6, 0xc2, 0xe2, 0xb3, 0xaa, 0x41, 0x7d, 0xec, 0xc1, 0x8f, 0xa1, 0xe3, 0x13, 0xcb,
+	0xc5, 0x4e, 0x60, 0xa7, 0x36, 0x0b, 0x01, 0xbf, 0xaa, 0xba, 0xd9, 0xf6, 0xc9, 0xb0, 0x40, 0x1a,
+	0xbf, 0x81, 0x7a, 0x26, 0xcd, 0xd2, 0xcf, 0x8f, 0x1c, 0x35, 0xfd, 0xfc, 0xc8, 0x61, 0xe9, 0xa7,
+	0xe4, 0xe5, 0xba, 0x9a, 0x97, 0xc6, 0x04, 0xb6, 0x17, 0x9e, 0x32, 0xe8, 0x6b, 0xe8, 0x12, 0x1c,
+	0x4c, 0xf8, 0x0e, 0x9b, 0x86, 0xe2, 0x6c, 0xad, 0x6c, 0x70, 0xde, 0x22, 0xb6, 0x18, 0xe7, 0xb8,
+	0x60, 0x64, 0xf5, 0xce, 0x76, 0xb2, 0x48, 0xd6, 0xb5, 0x00, 0x8c, 0x73, 0x40, 0x8b, 0x8f, 0x1f,
+	0xf4, 0x04, 0xaa, 0xfc, 0xad, 0xb5, 0x72, 0x4c, 0x09, 0x32, 0xef, 0x53, 0xd8, 0x76, 0x6f, 0xe9,
+	0x53, 0xd8, 0x76, 0x8d, 0x3f, 0xc2, 0xa6, 0x38, 0x83, 0xdd, 0x19, 0x2e, 0x3d, 0x46, 0xcd, 0x1c,
+	0xbe, 0xb5, 0xc7, 0x2e, 0x5f, 0x22, 0x8c, 0x1a, 0x54, 0xf9, 0x5b, 0xc4, 0xf8, 0x13, 0xa0, 0xc5,
+	0x8d, 0x9b, 0x0d, 0x31, 0x42, 0xed, 0x94, 0x5a, 0xe5, 0xd2, 0x6f, 0x72, 0xe4, 0xa9, 0xa8, 0xff,
+	0x07, 0xd0, 0xc4, 0x91, 0x6b, 0x95, 0x2f, 0xa1, 0x81, 0x23, 0x57, 0xd0, 0x8d, 0x03, 0xb8, 0xb3,
+	0x64, 0x0f, 0x47, 0xcf, 0xa0, 0x2e, 0xbb, 0x4c, 0x36, 0xca, 0x17, 0xda, 0x59, 0xce, 0x60, 0xbc,
+	0x81, 0x9d, 0x65, 0xbb, 0x2d, 0xda, 0x2b, 0x7a, 0xad, 0xd0, 0x91, 0xbf, 0x9d, 0x24, 0xa3, 0xe8,
+	0xd4, 0x79, 0x0b, 0x36, 0xfe, 0xa3, 0x41, 0xbb, 0x44, 0x2a, 0xba, 0x85, 0xa6, 0x74, 0x8b, 0xdb,
+	0x1b, 0xcc, 0x03, 0x80, 0xa2, 0x7a, 0x65, 0x97, 0x51, 0x30, 0xe8, 0x53, 0x68, 0x9c, 0x07, 0xb1,
+	0x73, 0xc1, 0x62, 0xc2, 0x0b, 0xab, 0x62, 0xd6, 0x39, 0xe2, 0x14, 0x5f, 0xa2, 0x47, 0xd0, 0x62,
+	0xa1, 0xf2, 0x23, 0x8b, 0xa3, 0x64, 0x77, 0x01, 0x82, 0x2f, 0xc7, 0xd1, 0x01, 0xc3, 0x18, 0xdf,
+	0xc0, 0xdd, 0xa5, 0x8b, 0x38, 0xda, 0x5f, 0xd8, 0x7e, 0xee, 0xcd, 0xb9, 0x7b, 0x28, 0xc8, 0xca,
+	0x0e, 0xf4, 0x01, 0x3a, 0x65, 0x1a, 0xfa, 0x12, 0x36, 0x45, 0x34, 0x64, 0xe2, 0xaf, 0x08, 0x99,
+	0x64, 0x52, 0xff, 0xa3, 0xc8, 0x71, 0x96, 0x0d, 0x87, 0xdf, 0xe7, 0xaa, 0xb3, 0x06, 0xfe, 0x18,
+	0xb6, 0xe8, 0xb5, 0x55, 0x72, 0x4f, 0x2e, 0x8c, 0xf4, 0xfa, 0x34, 0x77, 0xb0, 0xac, 0x52, 0xfd,
+	0x35, 0x63, 0x7c, 0x01, 0x5b, 0x73, 0xef, 0x1e, 0x56, 0x74, 0x38, 0x4d, 0xe3, 0x54, 0xde, 0x8f,
+	0x00, 0x8c, 0xf7, 0xd0, 0xc8, 0xd7, 0x46, 0x36, 0x81, 0x94, 0x61, 0xc1, 0xbf, 0xd9, 0x19, 0x57,
+	0x38, 0x25, 0xec, 0x82, 0xc4, 0xfd, 0x65, 0xe0, 0xad, 0x9b, 0xd3, 0xf7, 0x1a, 0xe8, 0x7f, 0xb0,
+	0x03, 0xdf, 0xe5, 0x05, 0x6f, 0x62, 0x32, 0x0b, 0x28, 0xc9, 0x9a, 0xdf, 0xca, 0x09, 0xa8, 0x43,
+	0x8d, 0x5e, 0xbf, 0x0e, 0x6c, 0x8f, 0x64, 0xfe, 0x48, 0xb0, 0xfc, 0xab, 0x69, 0x63, 0xfe, 0xaf,
+	0xd7, 0x6d, 0xfd, 0xd7, 0xca, 0x92, 0x60, 0xee, 0x29, 0xb4, 0x62, 0xe9, 0x78, 0x51, 0x5e, 0x3a,
+	0x94, 0xcc, 0xc8, 0xe4, 0xe7, 0x2b, 0xe1, 0xef, 0x1a, 0x74, 0xca, 0xb4, 0x72, 0xd6, 0x6b, 0xb7,
+	0x67, 0xfd, 0xfa, 0x42, 0xd6, 0x77, 0x61, 0xe3, 0x02, 0xdf, 0xc8, 0x72, 0x60, 0x9f, 0xe8, 0x09,
+	0x74, 0x70, 0xe4, 0xc6, 0x29, 0xc1, 0x6e, 0x9f, 0x9e, 0x5d, 0x8f, 0x87, 0xdc, 0xcb, 0x86, 0x39,
+	0x87, 0x35, 0x1c, 0xb8, 0xb7, 0xfc, 0xcd, 0xb6, 0xc2, 0xd9, 0x97, 0x4a, 0x1d, 0x08, 0x6f, 0xef,
+	0xcf, 0x7b, 0xbb, 0x58, 0x08, 0xff, 0xd6, 0x60, 0x6b, 0x8e, 0x8a, 0x7a, 0x73, 0xa5, 0xb0, 0x2a,
+	0x68, 0x59, 0x2d, 0xec, 0x40, 0xf5, 0xca, 0x0e, 0x66, 0xd9, 0x5f, 0x43, 0x01, 0xa0, 0x5f, 0x03,
+	0xe0, 0xeb, 0xc4, 0x4f, 0x6f, 0xd8, 0xa0, 0x92, 0xff, 0x2d, 0xd9, 0x7b, 0x38, 0xf6, 0x02, 0xf9,
+	0x9b, 0xf5, 0x7c, 0x36, 0xe9, 0x9d, 0x65, 0xd3, 0xcf, 0x54, 0xb8, 0x7f, 0xf6, 0x5b, 0x68, 0x2a,
+	0xab, 0xdf, 0xfc, 0x6b, 0xb4, 0x0d, 0x8d, 0x83, 0xb7, 0xef, 0x06, 0xdf, 0x58, 0x47, 0xa7, 0x6f,
+	0xba, 0x1a, 0x7b, 0x74, 0x8e, 0x87, 0x87, 0xc7, 0x67, 0xe3, 0xb3, 0x0f, 0x1c, 0xb3, 0xbe, 0xff,
+	0x17, 0xd8, 0x14, 0xab, 0x37, 0xfa, 0x0a, 0x5a, 0xe2, 0xeb, 0x94, 0xa6, 0xd8, 0x0e, 0xd1, 0xc2,
+	0x24, 0xd9, 0x5d, 0xc0, 0x18, 0x6b, 0x4f, 0xb5, 0x17, 0x1a, 0x7a, 0x02, 0x95, 0x13, 0x3f, 0xf2,
+	0x50, 0xf9, 0xe7, 0xd4, 0x6e, 0x19, 0x34, 0xd6, 0x0e, 0xbe, 0xfc, 0xf6, 0x99, 0xe7, 0xd3, 0xe9,
+	0xec, 0x9c, 0xad, 0x36, 0x7b, 0xd3, 0x9b, 0x04, 0xa7, 0xe2, 0x19, 0xb8, 0x37, 0xb1, 0xcf, 0x53,
+	0xdf, 0x11, 0xbf, 0x88, 0xc9, 0x9e, 0x10, 0x3b, 0xdf, 0xe4, 0xe0, 0xcb, 0xff, 0x05, 0x00, 0x00,
+	0xff, 0xff, 0xa8, 0x94, 0x0a, 0xc3, 0x78, 0x16, 0x00, 0x00,
 }
diff --git a/protos/gossip/message.proto b/protos/gossip/message.proto
index 56cb0cd0..f9ea4a89 100644
--- a/protos/gossip/message.proto
+++ b/protos/gossip/message.proto
@@ -9,6 +9,7 @@ option go_package = "github.com/hyperledger/fabric/protos/gossip" ;
 package gossip;
 
 import "common/collection.proto";
+import "google/protobuf/timestamp.proto";
 
 // Gossip
 service Gossip {
@@ -130,6 +131,12 @@ message GossipMessage {
         // Encapsulates private data used to distribute
         // private rwset after the endorsement
         PrivateDataMessage private_data = 25;
+
+        // Used to request collection data
+        RemoteCollDataRequest collDataReq = 90;
+
+        // Used to respond to collection data requests
+        RemoteCollDataResponse collDataRes = 91;
     }
 }
 
@@ -369,4 +376,41 @@ message Chaincode {
     string name = 1;
     string version = 2;
     bytes metadata = 3;
-}
\ No newline at end of file
+}
+
+// ValidationResultsMessage is the message containing block validation results
+message ValidationResultsMessage {
+    uint64 seq_num = 1;
+    bytes txFlags  = 2;
+    bytes signature = 3;
+    bytes identity = 4;
+}
+
+// RemoteCollDataRequest message used to request
+// collection data
+message RemoteCollDataRequest {
+    uint64 nonce = 1;
+    repeated CollDataDigest digests = 2;
+}
+
+// CollDataDigest defines a digest of collection data
+message CollDataDigest {
+    string namespace = 1;
+    string collection = 2;
+    string key = 3;
+    string endorsedAtTxID = 4;
+}
+
+// RemoteCollDataResponse message used to respond to
+// collection data request
+message RemoteCollDataResponse {
+    uint64 nonce = 1;
+    repeated CollDataElement elements = 2;
+}
+
+// CollDataElement contains the collection data digest and value
+message CollDataElement {
+    CollDataDigest digest = 1;
+    bytes value = 2;
+    google.protobuf.Timestamp expiryTime = 3;
+}
-- 
2.15.0

