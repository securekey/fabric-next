diff a/core/ledger/kvledger/txmgmt/statedb/statedb.go b/core/ledger/kvledger/txmgmt/statedb/statedb.go	(rejected hunks)
@@ -8,9 +8,12 @@ package statedb
 import (
 	"sort"
 
+	"sync"
+
 	"github.com/hyperledger/fabric/core/common/ccprovider"
 	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/version"
 	"github.com/hyperledger/fabric/core/ledger/util"
+	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb/kvcache"
 )
 
 // VersionedDBProvider provides an instance of an versioned DB
@@ -34,6 +39,13 @@ type VersionedDB interface {
 	// endKey is exclusive
 	// The returned ResultsIterator contains results of type *VersionedKV
 	GetStateRangeScanIterator(namespace string, startKey string, endKey string) (ResultsIterator, error)
+
+	// GetNonDurableStateRangeScanIterator returns an iterator that contains all the key-values between given key ranges.
+	// startKey is inclusive
+	// endKey is exclusive
+	// The returned ResultsIterator contains results of type *VersionedKV
+	GetNonDurableStateRangeScanIterator(namespace string, startKey string, endKey string) (ResultsIterator, error)
+
 	// ExecuteQuery executes the given query and returns an iterator that contains results of type *VersionedKV.
 	ExecuteQuery(namespace, query string) (ResultsIterator, error)
 	// ApplyUpdates applies the batch to the underlying db.
@@ -187,7 +209,12 @@ func (batch *UpdateBatch) GetUpdates(ns string) map[string]*VersionedValue {
 // where the UpdateBatch represents the union of the modifications performed by the preceding valid transactions in the same block
 // (Assuming Group commit approach where we commit all the updates caused by a block together).
 func (batch *UpdateBatch) GetRangeScanIterator(ns string, startKey string, endKey string) ResultsIterator {
-	return newNsIterator(ns, startKey, endKey, batch)
+	return newNsIterator(ns, startKey, endKey, batch, false)
+}
+
+// GetRangeScanIteratorIncludingEndKey is the same as GetRangeScanIterator except that it includes endKey in the result set
+func (batch *UpdateBatch) GetRangeScanIteratorIncludingEndKey(ns string, startKey string, endKey string) ResultsIterator {
+	return newNsIterator(ns, startKey, endKey, batch, true)
 }
 
 func (batch *UpdateBatch) getOrCreateNsUpdates(ns string) *nsUpdates {
