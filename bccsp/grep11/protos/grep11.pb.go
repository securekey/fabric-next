// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grep11.proto

/*
Package grep11protos is a generated protocol buffer package.

It is generated from these files:
	grep11.proto

It has these top-level messages:
	LoadInfo
	LoadStatus
	GenerateInfo
	GenerateStatus
	SignInfo
	SignStatus
	VerifyInfo
	VerifyStatus
*/
package grep11protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	"context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoadInfo struct {
	Pin   []byte `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *LoadInfo) Reset()                    { *m = LoadInfo{} }
func (m *LoadInfo) String() string            { return proto.CompactTextString(m) }
func (*LoadInfo) ProtoMessage()               {}
func (*LoadInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoadInfo) GetPin() []byte {
	if m != nil {
		return m.Pin
	}
	return nil
}

func (m *LoadInfo) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

type LoadStatus struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Session bool   `protobuf:"varint,2,opt,name=session" json:"session,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *LoadStatus) Reset()                    { *m = LoadStatus{} }
func (m *LoadStatus) String() string            { return proto.CompactTextString(m) }
func (*LoadStatus) ProtoMessage()               {}
func (*LoadStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoadStatus) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LoadStatus) GetSession() bool {
	if m != nil {
		return m.Session
	}
	return false
}

func (m *LoadStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GenerateInfo struct {
	Oid []byte `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (m *GenerateInfo) Reset()                    { *m = GenerateInfo{} }
func (m *GenerateInfo) String() string            { return proto.CompactTextString(m) }
func (*GenerateInfo) ProtoMessage()               {}
func (*GenerateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GenerateInfo) GetOid() []byte {
	if m != nil {
		return m.Oid
	}
	return nil
}

type GenerateStatus struct {
	PrivKey []byte `protobuf:"bytes,1,opt,name=privKey,proto3" json:"privKey,omitempty"`
	PubKey  []byte `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *GenerateStatus) Reset()                    { *m = GenerateStatus{} }
func (m *GenerateStatus) String() string            { return proto.CompactTextString(m) }
func (*GenerateStatus) ProtoMessage()               {}
func (*GenerateStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GenerateStatus) GetPrivKey() []byte {
	if m != nil {
		return m.PrivKey
	}
	return nil
}

func (m *GenerateStatus) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *GenerateStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SignInfo struct {
	PrivKey []byte `protobuf:"bytes,1,opt,name=privKey,proto3" json:"privKey,omitempty"`
	Hash    []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *SignInfo) Reset()                    { *m = SignInfo{} }
func (m *SignInfo) String() string            { return proto.CompactTextString(m) }
func (*SignInfo) ProtoMessage()               {}
func (*SignInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SignInfo) GetPrivKey() []byte {
	if m != nil {
		return m.PrivKey
	}
	return nil
}

func (m *SignInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type SignStatus struct {
	Sig   []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *SignStatus) Reset()                    { *m = SignStatus{} }
func (m *SignStatus) String() string            { return proto.CompactTextString(m) }
func (*SignStatus) ProtoMessage()               {}
func (*SignStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SignStatus) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *SignStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type VerifyInfo struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Sig    []byte `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *VerifyInfo) Reset()                    { *m = VerifyInfo{} }
func (m *VerifyInfo) String() string            { return proto.CompactTextString(m) }
func (*VerifyInfo) ProtoMessage()               {}
func (*VerifyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VerifyInfo) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *VerifyInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *VerifyInfo) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type VerifyStatus struct {
	Valid bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *VerifyStatus) Reset()                    { *m = VerifyStatus{} }
func (m *VerifyStatus) String() string            { return proto.CompactTextString(m) }
func (*VerifyStatus) ProtoMessage()               {}
func (*VerifyStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VerifyStatus) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *VerifyStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*LoadInfo)(nil), "grep11protos.LoadInfo")
	proto.RegisterType((*LoadStatus)(nil), "grep11protos.LoadStatus")
	proto.RegisterType((*GenerateInfo)(nil), "grep11protos.GenerateInfo")
	proto.RegisterType((*GenerateStatus)(nil), "grep11protos.GenerateStatus")
	proto.RegisterType((*SignInfo)(nil), "grep11protos.SignInfo")
	proto.RegisterType((*SignStatus)(nil), "grep11protos.SignStatus")
	proto.RegisterType((*VerifyInfo)(nil), "grep11protos.VerifyInfo")
	proto.RegisterType((*VerifyStatus)(nil), "grep11protos.VerifyStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Grep11Manager service

type Grep11ManagerClient interface {
	Load(ctx context.Context, in *LoadInfo, opts ...grpc.CallOption) (*LoadStatus, error)
}

type grep11ManagerClient struct {
	cc *grpc.ClientConn
}

func NewGrep11ManagerClient(cc *grpc.ClientConn) Grep11ManagerClient {
	return &grep11ManagerClient{cc}
}

func (c *grep11ManagerClient) Load(ctx context.Context, in *LoadInfo, opts ...grpc.CallOption) (*LoadStatus, error) {
	out := new(LoadStatus)
	err := grpc.Invoke(ctx, "/grep11protos.Grep11Manager/Load", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grep11Manager service

type Grep11ManagerServer interface {
	Load(context.Context, *LoadInfo) (*LoadStatus, error)
}

func RegisterGrep11ManagerServer(s *grpc.Server, srv Grep11ManagerServer) {
	s.RegisterService(&_Grep11Manager_serviceDesc, srv)
}

func _Grep11Manager_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grep11ManagerServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grep11protos.Grep11Manager/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grep11ManagerServer).Load(ctx, req.(*LoadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grep11Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grep11protos.Grep11Manager",
	HandlerType: (*Grep11ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _Grep11Manager_Load_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grep11.proto",
}

// Client API for Grep11 service

type Grep11Client interface {
	GenerateECKey(ctx context.Context, in *GenerateInfo, opts ...grpc.CallOption) (*GenerateStatus, error)
	SignP11ECDSA(ctx context.Context, in *SignInfo, opts ...grpc.CallOption) (*SignStatus, error)
	VerifyP11ECDSA(ctx context.Context, in *VerifyInfo, opts ...grpc.CallOption) (*VerifyStatus, error)
}

type grep11Client struct {
	cc *grpc.ClientConn
}

func NewGrep11Client(cc *grpc.ClientConn) Grep11Client {
	return &grep11Client{cc}
}

func (c *grep11Client) GenerateECKey(ctx context.Context, in *GenerateInfo, opts ...grpc.CallOption) (*GenerateStatus, error) {
	out := new(GenerateStatus)
	err := grpc.Invoke(ctx, "/grep11protos.Grep11/GenerateECKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grep11Client) SignP11ECDSA(ctx context.Context, in *SignInfo, opts ...grpc.CallOption) (*SignStatus, error) {
	out := new(SignStatus)
	err := grpc.Invoke(ctx, "/grep11protos.Grep11/SignP11ECDSA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grep11Client) VerifyP11ECDSA(ctx context.Context, in *VerifyInfo, opts ...grpc.CallOption) (*VerifyStatus, error) {
	out := new(VerifyStatus)
	err := grpc.Invoke(ctx, "/grep11protos.Grep11/VerifyP11ECDSA", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grep11 service

type Grep11Server interface {
	GenerateECKey(context.Context, *GenerateInfo) (*GenerateStatus, error)
	SignP11ECDSA(context.Context, *SignInfo) (*SignStatus, error)
	VerifyP11ECDSA(context.Context, *VerifyInfo) (*VerifyStatus, error)
}

func RegisterGrep11Server(s *grpc.Server, srv Grep11Server) {
	s.RegisterService(&_Grep11_serviceDesc, srv)
}

func _Grep11_GenerateECKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grep11Server).GenerateECKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grep11protos.Grep11/GenerateECKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grep11Server).GenerateECKey(ctx, req.(*GenerateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grep11_SignP11ECDSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grep11Server).SignP11ECDSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grep11protos.Grep11/SignP11ECDSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grep11Server).SignP11ECDSA(ctx, req.(*SignInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grep11_VerifyP11ECDSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Grep11Server).VerifyP11ECDSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grep11protos.Grep11/VerifyP11ECDSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Grep11Server).VerifyP11ECDSA(ctx, req.(*VerifyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grep11_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grep11protos.Grep11",
	HandlerType: (*Grep11Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateECKey",
			Handler:    _Grep11_GenerateECKey_Handler,
		},
		{
			MethodName: "SignP11ECDSA",
			Handler:    _Grep11_SignP11ECDSA_Handler,
		},
		{
			MethodName: "VerifyP11ECDSA",
			Handler:    _Grep11_VerifyP11ECDSA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grep11.proto",
}

func init() { proto.RegisterFile("grep11.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0x4f, 0xeb, 0xda, 0x30,
	0x18, 0xb6, 0x56, 0x5d, 0xf7, 0xd2, 0x89, 0x04, 0x91, 0x52, 0x76, 0x90, 0x9c, 0x76, 0x12, 0xea,
	0x76, 0x18, 0xde, 0x36, 0x27, 0x6e, 0x73, 0x83, 0x51, 0x41, 0x76, 0x8d, 0x6b, 0xac, 0x81, 0x91,
	0x94, 0xa4, 0x0a, 0x7e, 0xde, 0x7d, 0x91, 0x91, 0x7f, 0x56, 0xfd, 0xd5, 0x5b, 0x9f, 0xbc, 0x79,
	0xfe, 0x34, 0xcf, 0x0b, 0x71, 0x29, 0x69, 0x95, 0x65, 0xb3, 0x4a, 0x8a, 0x5a, 0x20, 0x87, 0x0c,
	0x50, 0x78, 0x0e, 0xd1, 0x0f, 0x41, 0x8a, 0x6f, 0xfc, 0x20, 0xd0, 0x08, 0xc2, 0x8a, 0xf1, 0x24,
	0x98, 0x06, 0xef, 0xe2, 0x5c, 0x7f, 0xa2, 0x31, 0xf4, 0xb9, 0xe0, 0x7f, 0x68, 0xd2, 0x35, 0x67,
	0x16, 0xe0, 0x1d, 0x80, 0xe6, 0x6c, 0x6b, 0x52, 0x9f, 0x14, 0x4a, 0xe0, 0x15, 0x29, 0x0a, 0x49,
	0x95, 0x32, 0xcc, 0xd7, 0xb9, 0x87, 0x7a, 0xa2, 0xa8, 0x52, 0x4c, 0x70, 0xc3, 0x8f, 0x72, 0x0f,
	0xb5, 0x2e, 0x95, 0x52, 0xc8, 0x24, 0x34, 0x0c, 0x0b, 0xf0, 0x14, 0xe2, 0x35, 0xe5, 0x54, 0x92,
	0x9a, 0xfa, 0x3c, 0x82, 0x15, 0x3e, 0x8f, 0x60, 0x05, 0xfe, 0x0d, 0x43, 0x7f, 0xa3, 0x71, 0xaf,
	0x24, 0x3b, 0x6f, 0xe8, 0xc5, 0xdd, 0xf3, 0x10, 0x4d, 0x60, 0x50, 0x9d, 0xf6, 0x7a, 0x60, 0xc3,
	0x3b, 0xf4, 0xc4, 0xfb, 0x23, 0x44, 0x5b, 0x56, 0x72, 0xe3, 0xfb, 0x5c, 0x13, 0x41, 0xef, 0x48,
	0xd4, 0xd1, 0x29, 0x9a, 0x6f, 0xfc, 0x01, 0x40, 0x33, 0x5d, 0x9e, 0x11, 0x84, 0x8a, 0x95, 0x3e,
	0xb3, 0x62, 0x65, 0xe3, 0xd7, 0xbd, 0xf5, 0xfb, 0x0e, 0xb0, 0xa3, 0x92, 0x1d, 0x2e, 0xc6, 0xb1,
	0xc9, 0x1a, 0xdc, 0x65, 0x6d, 0xf1, 0xf3, 0x0e, 0xe1, 0xd5, 0x01, 0x2f, 0x20, 0xb6, 0x5a, 0x2e,
	0xc3, 0x18, 0xfa, 0x67, 0xf2, 0xd7, 0xbd, 0x5c, 0x94, 0x5b, 0xd0, 0x9e, 0x63, 0xbe, 0x81, 0x37,
	0x6b, 0xb3, 0x0f, 0x3f, 0x09, 0x27, 0x25, 0x95, 0x68, 0x01, 0x3d, 0x5d, 0x2e, 0x9a, 0xcc, 0x6e,
	0xf7, 0x64, 0xe6, 0x97, 0x24, 0x4d, 0x5e, 0x9e, 0x5b, 0x5b, 0xdc, 0x99, 0xff, 0x0b, 0x60, 0x60,
	0xd5, 0x90, 0xd6, 0x75, 0x4d, 0xad, 0x96, 0xfa, 0x57, 0xd2, 0x7b, 0xde, 0x6d, 0xd1, 0xe9, 0xdb,
	0xf6, 0x99, 0xd7, 0x45, 0x9f, 0x21, 0xd6, 0x4f, 0xfc, 0x2b, 0xcb, 0x56, 0xcb, 0x2f, 0xdb, 0x4f,
	0x8f, 0xd9, 0x7c, 0x71, 0x8f, 0xd9, 0x9a, 0x5a, 0x70, 0x07, 0x7d, 0x85, 0xa1, 0x7d, 0xa4, 0xab,
	0xca, 0xc3, 0xed, 0xa6, 0x8e, 0x34, 0x6d, 0x9b, 0x78, 0xa5, 0xfd, 0xc0, 0x1c, 0xbf, 0xff, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0x8f, 0x09, 0x3d, 0x44, 0x57, 0x03, 0x00, 0x00,
}
