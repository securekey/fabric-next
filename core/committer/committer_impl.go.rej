diff a/core/committer/committer_impl.go b/core/committer/committer_impl.go	(rejected hunks)
@@ -19,11 +19,12 @@ package committer
 import (
 	"github.com/hyperledger/fabric/common/flogging"
 	"github.com/hyperledger/fabric/core/ledger"
-	"github.com/hyperledger/fabric/events/producer"
+	"github.com/hyperledger/fabric/core/ledger/util"
 	"github.com/hyperledger/fabric/protos/common"
 	"github.com/hyperledger/fabric/protos/utils"
 	"github.com/op/go-logging"
 	"github.com/pkg/errors"
+	"golang.org/x/net/context"
 )
 
 //--------!!!IMPORTANT!!-!!IMPORTANT!!-!!IMPORTANT!!---------
@@ -44,8 +45,15 @@ type PeerLedgerSupport interface {
 
 	GetPvtDataByNum(blockNum uint64, filter ledger.PvtNsCollFilter) ([]*ledger.TxPvtData, error)
 
+	AddBlock(blockAndPvtData *ledger.BlockAndPvtData) error
+
 	CommitWithPvtData(blockAndPvtdata *ledger.BlockAndPvtData) error
 
+	// ValidateMVCC validates block for MVCC conflicts and phantom reads against committed data
+	ValidateMVCC(ctx context.Context, block *common.Block, txFlags util.TxValidationFlags, filter util.TxFilter) error
+
+	ValidateBlockWithPvtData(blockAndPvtdata *ledger.BlockAndPvtData) error
+
 	GetBlockchainInfo() (*common.BlockchainInfo, error)
 
 	GetBlockByNumber(blockNumber uint64) (*common.Block, error)
@@ -102,13 +142,10 @@ func (lc *LedgerCommitter) CommitWithPvtData(blockAndPvtData *ledger.BlockAndPvt
 	}
 
 	// Committing new block
-	if err := lc.PeerLedgerSupport.CommitWithPvtData(blockAndPvtData); err != nil {
+	if err := lc.PeerLedgerSupport.ValidateBlockWithPvtData(blockAndPvtData); err != nil {
 		return err
 	}
 
-	// post commit actions, such as event publishing
-	lc.postCommit(blockAndPvtData.Block)
-
 	return nil
 }
 
@@ -117,22 +154,6 @@ func (lc *LedgerCommitter) GetPvtDataAndBlockByNum(seqNum uint64) (*ledger.Block
 	return lc.PeerLedgerSupport.GetPvtDataAndBlockByNum(seqNum, nil)
 }
 
-// postCommit publish event or handle other tasks once block committed to the ledger
-func (lc *LedgerCommitter) postCommit(block *common.Block) {
-	// create/send block events *after* the block has been committed
-	bevent, fbevent, channelID, err := producer.CreateBlockEvents(block)
-	if err != nil {
-		logger.Errorf("Channel [%s] Error processing block events for block number [%d]: %+v", channelID, block.Header.Number, err)
-	} else {
-		if err := producer.Send(bevent); err != nil {
-			logger.Errorf("Channel [%s] Error sending block event for block number [%d]: %+v", channelID, block.Header.Number, err)
-		}
-		if err := producer.Send(fbevent); err != nil {
-			logger.Errorf("Channel [%s] Error sending filtered block event for block number [%d]: %+v", channelID, block.Header.Number, err)
-		}
-	}
-}
-
 // LedgerHeight returns recently committed block sequence number
 func (lc *LedgerCommitter) LedgerHeight() (uint64, error) {
 	var info *common.BlockchainInfo
