diff a/core/scc/cscc/configure.go b/core/scc/cscc/configure.go	(rejected hunks)
@@ -226,11 +229,23 @@ func validateConfigBlock(block *common.Block) error {
 // Since it is the first block, it is the genesis block containing configuration
 // for this chain, so we want to update the Chain object with this info
 func joinChain(chainID string, block *common.Block, ccp ccprovider.ChaincodeProvider, sccp sysccprovider.SystemChaincodeProvider) pb.Response {
-	if err := peer.CreateChainFromBlock(block, ccp, sccp); err != nil {
-		return shim.Error(err.Error())
-	}
+	if ledgerconfig.IsCommitter() {
+		// Only a committer can create a new channel in the DB
+		cnflogger.Debugf("Creating channel [%s]", chainID)
+		if err := peer.CreateChainFromBlock(block, ccp, sccp); err != nil {
+			return shim.Error(err.Error())
+		}
 
-	peer.InitChain(chainID)
+		cnflogger.Debugf("Initializing channel [%s]", chainID)
+		peer.InitChain(chainID)
+	} else {
+		cnflogger.Debugf("I am not a committer - initializing channel [%s]...", chainID)
+		if err := initializeChannel(chainID); err != nil {
+			cnflogger.Errorf("Error initializing channel [%s]: %s", chainID, err)
+			return shim.Error(fmt.Sprintf("Error initializing channel [%s]: %s", chainID, err))
+		}
+		cnflogger.Debugf("... successfully initializing channel [%s].", chainID)
+	}
 
 	bevent, _, _, err := producer.CreateBlockEvents(block)
 	if err != nil {
