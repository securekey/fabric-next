From b7af73401a3b189b182b9bb260c665489e9f4f37 Mon Sep 17 00:00:00 2001
From: Aleksandar Likic <aleksandar.likic@securekey.com>
Date: Sun, 17 Dec 2017 00:36:54 -0500
Subject: [PATCH 18/18] WIP - don't merge!

Mutual TLS fix for peer CLI

Signed-off-by: Aleksandar Likic <aleksandar.likic@securekey.com>
Change-Id: Ic0f29affa8a9845a5876eb3683c19aca5acda164
---
 core/peer/peer.go | 46 +++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 45 insertions(+), 1 deletion(-)

diff --git a/core/peer/peer.go b/core/peer/peer.go
index b4698996..00b4ce83 100644
--- a/core/peer/peer.go
+++ b/core/peer/peer.go
@@ -7,7 +7,10 @@ SPDX-License-Identifier: Apache-2.0
 package peer
 
 import (
+	"crypto/tls"
+	"crypto/x509"
 	"fmt"
+	"io/ioutil"
 	"net"
 	"runtime"
 	"sync"
@@ -30,6 +33,7 @@ import (
 	"github.com/hyperledger/fabric/core/committer"
 	"github.com/hyperledger/fabric/core/committer/txvalidator"
 	"github.com/hyperledger/fabric/core/common/privdata"
+	"github.com/hyperledger/fabric/core/config"
 	"github.com/hyperledger/fabric/core/ledger"
 	"github.com/hyperledger/fabric/core/ledger/customtx"
 	"github.com/hyperledger/fabric/core/ledger/ledgermgmt"
@@ -671,7 +675,7 @@ func GetLocalIP() string {
 func NewPeerClientConnectionWithAddress(peerAddress string) (*grpc.ClientConn, error) {
 	if comm.TLSEnabled() {
 		return comm.NewClientConnectionWithAddress(peerAddress, true, true,
-			comm.InitTLSForPeer(), nil)
+			InitTLSForPeer(), nil)
 	}
 	return comm.NewClientConnectionWithAddress(peerAddress, true, false,
 		nil, nil)
@@ -823,3 +827,43 @@ func (*configSupport) GetPolicyMapper(channel string) resourcesconfig.PolicyMapp
 	}
 	return chain.cs.bundleSource.APIPolicyMapper()
 }
+
+// InitTLSForPeer returns TLS credentials for peer
+func InitTLSForPeer() credentials.TransportCredentials {
+	var sn string
+	if viper.GetString("peer.tls.serverhostoverride") != "" {
+		sn = viper.GetString("peer.tls.serverhostoverride")
+	}
+	var creds credentials.TransportCredentials
+	if config.GetPath("peer.tls.rootcert.file") != "" {
+		var err error
+		var cp *x509.CertPool
+		var cc tls.Certificate
+		cp, err = CertPoolFromFile(config.GetPath("peer.tls.rootcert.file"))
+		if err != nil {
+			grpclog.Fatalf("Failed to create TLS credentials %v", err)
+		}
+		cc, err = GetClientCertificate()
+		if err != nil {
+			grpclog.Fatalf("Failed to create client TLS certificate %v", err)
+		}
+		tlsConfig := &tls.Config{RootCAs: cp, Certificates: []tls.Certificate{cc}, ServerName: sn}
+		creds = credentials.NewTLS(tlsConfig)
+	} else {
+		creds = credentials.NewClientTLSFromCert(nil, sn)
+	}
+	return creds
+}
+
+// CertPoolFromFile reads cert pool from file
+func CertPoolFromFile(certFile string) (*x509.CertPool, error) {
+	b, err := ioutil.ReadFile(certFile)
+	if err != nil {
+		return nil, err
+	}
+	cp := x509.NewCertPool()
+	if !cp.AppendCertsFromPEM(b) {
+		return nil, fmt.Errorf("credentials: failed to append certificates")
+	}
+	return cp, nil
+}
-- 
2.14.3 (Apple Git-98)

