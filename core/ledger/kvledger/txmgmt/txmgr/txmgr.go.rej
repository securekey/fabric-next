--- core/ledger/kvledger/txmgmt/txmgr/txmgr.go
+++ core/ledger/kvledger/txmgmt/txmgr/txmgr.go
@@ -28,26 +29,34 @@ import (
 // TxMgr - an interface that a transaction manager should implement
 type TxMgr interface {
 	NewQueryExecutor(txid string) (ledger.QueryExecutor, error)
+	GetDB() privacyenabledstate.DB
 	NewTxSimulator(txid string) (ledger.TxSimulator, error)
 	ValidateMVCC(ctx context.Context, block *common.Block, txFlags util.TxValidationFlags, filter util.TxFilter) error
 	ValidateAndPrepare(blockAndPvtdata *ledger.BlockAndPvtData, doMVCCValidation bool) error
 	GetLastSavepoint() (*version.Height, error)
 	ShouldRecover(lastAvailableBlock uint64) (bool, uint64, error)
 	CommitLostBlock(blockAndPvtdata *ledger.BlockAndPvtData) error
-	Commit() error
-	Rollback()
+	Commit(blockNum uint64) error
+	Rollback(blockNum uint64)
 	Shutdown()
 }
 
-//LockBasedTxMgr - an extension of TxMgr interface which allows to lock/unlock txmgr rwlock
+//LockBasedTxMgr - an extension of TxMgr interface which allows to lock/unlock txmgr rwlock and also provides notification
+//on block commit
 type LockBasedTxMgr interface {
 	TxMgr
+	BlockCommitted() (*ledger.BlockAndPvtData, chan struct{})
 	RLock()
 	RUnlock()
 	Lock()
 	Unlock()
 }
 
+//BlockCommitted - an interface which will be used by lock based tx manager to notify block commit
+type BlockCommitted interface {
+	OnBlockCommit(blockAndPvtData *ledger.BlockAndPvtData)
+}
+
 // ErrUnsupportedTransaction is expected to be thrown if a unsupported query is performed in an update transaction
 type ErrUnsupportedTransaction struct {
 	Msg string
