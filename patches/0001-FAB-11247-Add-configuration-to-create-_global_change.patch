From 55404163069898cad91eb8ffd9944a98b7efb45b Mon Sep 17 00:00:00 2001
From: Firas Qutishat <firas.qutishat@securekey.com>
Date: Mon, 15 Oct 2018 17:33:47 -0400
Subject: [PATCH] Add configuration to create _global_changes

Signed-off-by: Firas Qutishat <firas.qutishat@securekey.com>
---
 .../cdbblkstorage/cdb_blockstore_provider.go  |  2 +-
 core/chaincode/exectransaction_test.go        |  3 +-
 .../statedb/statecouchdb/statecouchdb.go      |  2 +-
 .../statecouchdb/statecouchdb_test_export.go  |  2 +-
 core/ledger/util/couchdb/config.go            | 16 +++---
 core/ledger/util/couchdb/couchdb.go           | 17 ++++---
 core/ledger/util/couchdb/couchdb_test.go      | 51 ++++++++++---------
 core/ledger/util/couchdb/couchdbutil.go       | 21 ++++----
 core/ledger/util/couchdb/couchdbutil_test.go  | 30 ++++++++++-
 .../cdbtransientdata/cdb_transientprovider.go |  2 +-
 sampleconfig/core.yaml                        |  2 +
 11 files changed, 90 insertions(+), 58 deletions(-)

diff --git a/common/ledger/blkstorage/cdbblkstorage/cdb_blockstore_provider.go b/common/ledger/blkstorage/cdbblkstorage/cdb_blockstore_provider.go
index dc1fdcd92..649d4512c 100644
--- a/common/ledger/blkstorage/cdbblkstorage/cdb_blockstore_provider.go
+++ b/common/ledger/blkstorage/cdbblkstorage/cdb_blockstore_provider.go
@@ -32,7 +32,7 @@ func NewProvider(indexConfig *blkstorage.IndexConfig) (blkstorage.BlockStoreProv
 	logger.Debugf("constructing CouchDB block storage provider")
 	couchDBDef := couchdb.GetCouchDBDefinition()
 	couchInstance, err := couchdb.CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout,couchDBDef.CreateGlobalChangesDB)
 	if err != nil {
 		return nil, errors.WithMessage(err, "obtaining CouchDB instance failed")
 	}
diff --git a/core/chaincode/exectransaction_test.go b/core/chaincode/exectransaction_test.go
index 3701986b4..61b320df8 100644
--- a/core/chaincode/exectransaction_test.go
+++ b/core/chaincode/exectransaction_test.go
@@ -195,8 +195,9 @@ func finitPeer(lis net.Listener, chainIDs ...string) {
 		maxRetries := viper.GetInt("ledger.state.couchDBConfig.maxRetries")
 		maxRetriesOnStartup := viper.GetInt("ledger.state.couchDBConfig.maxRetriesOnStartup")
 		requestTimeout := viper.GetDuration("ledger.state.couchDBConfig.requestTimeout")
+		createGlobalChangesDB := viper.GetBool("ledger.state.couchDBConfig.createGlobalChangesDB")
 
-		couchInstance, _ := couchdb.CreateCouchInstance(connectURL, username, password, maxRetries, maxRetriesOnStartup, requestTimeout)
+		couchInstance, _ := couchdb.CreateCouchInstance(connectURL, username, password, maxRetries, maxRetriesOnStartup, requestTimeout, createGlobalChangesDB)
 		db := couchdb.CouchDatabase{CouchInstance: couchInstance, DBName: chainID}
 		//drop the test database
 		db.DropDatabase()
diff --git a/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb.go b/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb.go
index d67395b1e..77f441339 100644
--- a/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb.go
+++ b/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb.go
@@ -38,7 +38,7 @@ func NewVersionedDBProvider() (*VersionedDBProvider, error) {
 	logger.Debugf("constructing CouchDB VersionedDBProvider")
 	couchDBDef := couchdb.GetCouchDBDefinition()
 	couchInstance, err := couchdb.CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	if err != nil {
 		return nil, err
 	}
diff --git a/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test_export.go b/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test_export.go
index b1b6def37..8b4762418 100644
--- a/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test_export.go
+++ b/core/ledger/kvledger/txmgmt/statedb/statecouchdb/statecouchdb_test_export.go
@@ -41,7 +41,7 @@ func CleanupDB(dbName string) {
 	//create a new connection
 	couchDBDef := couchdb.GetCouchDBDefinition()
 	couchInstance, _ := couchdb.CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	db := couchdb.CouchDatabase{CouchInstance: couchInstance, DBName: strings.ToLower(dbName)}
 	//drop the test database
 	db.DropDatabase()
diff --git a/core/ledger/util/couchdb/config.go b/core/ledger/util/couchdb/config.go
index 6da645f6c..281fdbe50 100644
--- a/core/ledger/util/couchdb/config.go
+++ b/core/ledger/util/couchdb/config.go
@@ -24,12 +24,13 @@ import (
 
 // CouchDBDef contains parameters
 type CouchDBDef struct {
-	URL                 string
-	Username            string
-	Password            string
-	MaxRetries          int
-	MaxRetriesOnStartup int
-	RequestTimeout      time.Duration
+	URL                   string
+	Username              string
+	Password              string
+	MaxRetries            int
+	MaxRetriesOnStartup   int
+	RequestTimeout        time.Duration
+	CreateGlobalChangesDB bool
 }
 
 //GetCouchDBDefinition exposes the useCouchDB variable
@@ -41,6 +42,7 @@ func GetCouchDBDefinition() *CouchDBDef {
 	maxRetries := viper.GetInt("ledger.state.couchDBConfig.maxRetries")
 	maxRetriesOnStartup := viper.GetInt("ledger.state.couchDBConfig.maxRetriesOnStartup")
 	requestTimeout := viper.GetDuration("ledger.state.couchDBConfig.requestTimeout")
+	createGlobalChangesDB := viper.GetBool("ledger.state.couchDBConfig.createGlobalChangesDB")
 
-	return &CouchDBDef{couchDBAddress, username, password, maxRetries, maxRetriesOnStartup, requestTimeout}
+	return &CouchDBDef{couchDBAddress, username, password, maxRetries, maxRetriesOnStartup, requestTimeout, createGlobalChangesDB}
 }
diff --git a/core/ledger/util/couchdb/couchdb.go b/core/ledger/util/couchdb/couchdb.go
index 0cb33a26e..b24306cf0 100644
--- a/core/ledger/util/couchdb/couchdb.go
+++ b/core/ledger/util/couchdb/couchdb.go
@@ -118,12 +118,13 @@ type QueryResult struct {
 
 //CouchConnectionDef contains parameters
 type CouchConnectionDef struct {
-	URL                 string
-	Username            string
-	Password            string
-	MaxRetries          int
-	MaxRetriesOnStartup int
-	RequestTimeout      time.Duration
+	URL                   string
+	Username              string
+	Password              string
+	MaxRetries            int
+	MaxRetriesOnStartup   int
+	RequestTimeout        time.Duration
+	CreateGlobalChangesDB bool
 }
 
 //CouchInstance represents a CouchDB instance
@@ -230,7 +231,7 @@ func closeResponseBody(resp *http.Response) {
 
 //CreateConnectionDefinition for a new client connection
 func CreateConnectionDefinition(couchDBAddress, username, password string, maxRetries,
-	maxRetriesOnStartup int, requestTimeout time.Duration) (*CouchConnectionDef, error) {
+	maxRetriesOnStartup int, requestTimeout time.Duration, createGlobalChangesDB bool) (*CouchConnectionDef, error) {
 
 	logger.Debugf("Entering CreateConnectionDefinition()")
 
@@ -251,7 +252,7 @@ func CreateConnectionDefinition(couchDBAddress, username, password string, maxRe
 
 	//return an object containing the connection information
 	return &CouchConnectionDef{finalURL.String(), username, password, maxRetries,
-		maxRetriesOnStartup, requestTimeout}, nil
+		maxRetriesOnStartup, requestTimeout, createGlobalChangesDB}, nil
 
 }
 
diff --git a/core/ledger/util/couchdb/couchdb_test.go b/core/ledger/util/couchdb/couchdb_test.go
index 994dc3f07..7a8bbb505 100644
--- a/core/ledger/util/couchdb/couchdb_test.go
+++ b/core/ledger/util/couchdb/couchdb_test.go
@@ -33,7 +33,7 @@ var couchDBDef *CouchDBDef
 func cleanup(database string) error {
 	//create a new connection
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 
 	if err != nil {
 		fmt.Println("Unexpected error", err)
@@ -78,6 +78,7 @@ func testMain(m *testing.M) int {
 	viper.Set("ledger.state.couchDBConfig.maxRetries", 3)
 	viper.Set("ledger.state.couchDBConfig.maxRetriesOnStartup", 10)
 	viper.Set("ledger.state.couchDBConfig.requestTimeout", time.Second*35)
+	viper.Set("ledger.state.couchDBConfig.createGlobalChangesDB", true)
 
 	//set the logging level to DEBUG to test debug only code
 	logging.SetModuleLevel("couchdb", "Debug")
@@ -109,7 +110,7 @@ func TestDBConnectionDef(t *testing.T) {
 
 	//create a new connection
 	_, err := CreateConnectionDefinition(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create database connection definition"))
 
 }
@@ -118,7 +119,7 @@ func TestDBBadConnectionDef(t *testing.T) {
 
 	//create a new connection
 	_, err := CreateConnectionDefinition(badParseConnectURL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertError(t, err, fmt.Sprintf("Did not receive error when trying to create database connection definition with a bad hostname"))
 
 }
@@ -235,7 +236,7 @@ func TestDBCreateSaveWithoutRevision(t *testing.T) {
 
 	//create a new instance and database object
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -258,7 +259,7 @@ func TestDBCreateEnsureFullCommit(t *testing.T) {
 
 	//create a new instance and database object
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -279,28 +280,28 @@ func TestDBBadDatabaseName(t *testing.T) {
 
 	//create a new instance and database object using a valid database name mixed case
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	_, dberr := CreateCouchDatabase(couchInstance, "testDB")
 	testutil.AssertError(t, dberr, "Error should have been thrown for an invalid db name")
 
 	//create a new instance and database object using a valid database name letters and numbers
 	couchInstance, err = CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	_, dberr = CreateCouchDatabase(couchInstance, "test132")
 	testutil.AssertNoError(t, dberr, fmt.Sprintf("Error when testing a valid database name"))
 
 	//create a new instance and database object using a valid database name - special characters
 	couchInstance, err = CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	_, dberr = CreateCouchDatabase(couchInstance, "test1234~!@#$%^&*()[]{}.")
 	testutil.AssertError(t, dberr, "Error should have been thrown for an invalid db name")
 
 	//create a new instance and database object using a invalid database name - too long	/*
 	couchInstance, err = CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	_, dberr = CreateCouchDatabase(couchInstance, "a12345678901234567890123456789012345678901234"+
 		"56789012345678901234567890123456789012345678901234567890123456789012345678901234567890"+
@@ -315,7 +316,7 @@ func TestDBBadConnection(t *testing.T) {
 	//create a new instance and database object
 	//Limit the maxRetriesOnStartup to 3 in order to reduce time for the failure
 	_, err := CreateCouchInstance(badConnectURL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, 3, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, 3, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertError(t, err, fmt.Sprintf("Error should have been thrown for a bad connection"))
 }
 
@@ -328,7 +329,7 @@ func TestBadDBCredentials(t *testing.T) {
 
 	//create a new instance and database object
 	_, err = CreateCouchInstance(couchDBDef.URL, "fred", "fred",
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertError(t, err, fmt.Sprintf("Error should have been thrown for bad credentials"))
 
 }
@@ -358,7 +359,7 @@ func testDBCreateDatabaseAndPersist(t *testing.T, maxRetries int) {
 
 	//create a new instance and database object
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		maxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		maxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -577,12 +578,12 @@ func TestDBRequestTimeout(t *testing.T) {
 	//create a new instance and database object with a timeout that will fail
 	//Also use a maxRetriesOnStartup=3 to reduce the number of retries
 	_, err = CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, 3, impossibleTimeout)
+		couchDBDef.MaxRetries, 3, impossibleTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertError(t, err, fmt.Sprintf("Error should have been thown while trying to create a couchdb instance with a connection timeout"))
 
 	//create a new instance and database object
 	_, err = CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		-1, 3, couchDBDef.RequestTimeout)
+		-1, 3, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertError(t, err, fmt.Sprintf("Error should have been thrown while attempting to create a database"))
 
 }
@@ -596,7 +597,7 @@ func TestDBTimeoutConflictRetry(t *testing.T) {
 
 	//create a new instance and database object
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, 3, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, 3, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -636,7 +637,7 @@ func TestDBBadNumberOfRetries(t *testing.T) {
 
 	//create a new instance and database object
 	_, err = CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		-1, 3, couchDBDef.RequestTimeout)
+		-1, 3, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertError(t, err, fmt.Sprintf("Error should have been thrown while attempting to create a database"))
 
 }
@@ -650,7 +651,7 @@ func TestDBBadJSON(t *testing.T) {
 
 	//create a new instance and database object
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -680,7 +681,7 @@ func TestPrefixScan(t *testing.T) {
 
 	//create a new instance and database object
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -749,7 +750,7 @@ func TestDBSaveAttachment(t *testing.T) {
 
 	//create a new instance and database object
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -778,7 +779,7 @@ func TestDBDeleteDocument(t *testing.T) {
 
 	//create a new instance and database object
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -813,7 +814,7 @@ func TestDBDeleteNonExistingDocument(t *testing.T) {
 
 	//create a new instance and database object
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -862,7 +863,7 @@ func TestIndexOperations(t *testing.T) {
 
 	//create a new instance and database object   --------------------------------------------------------
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -1121,7 +1122,7 @@ func TestRichQuery(t *testing.T) {
 
 	//create a new instance and database object   --------------------------------------------------------
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -1378,7 +1379,7 @@ func testBatchBatchOperations(t *testing.T, maxRetries int) {
 
 	//create a new instance and database object   --------------------------------------------------------
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
@@ -1579,7 +1580,7 @@ func TestDatabaseSecuritySettings(t *testing.T) {
 
 	//create a new instance and database object   --------------------------------------------------------
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to create couch instance"))
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: database}
 
diff --git a/core/ledger/util/couchdb/couchdbutil.go b/core/ledger/util/couchdb/couchdbutil.go
index d2be66e43..46290da62 100644
--- a/core/ledger/util/couchdb/couchdbutil.go
+++ b/core/ledger/util/couchdb/couchdbutil.go
@@ -33,10 +33,10 @@ var collectionNameAllowedLength = 50
 
 //CreateCouchInstance creates a CouchDB instance
 func CreateCouchInstance(couchDBConnectURL, id, pw string, maxRetries,
-	maxRetriesOnStartup int, connectionTimeout time.Duration) (*CouchInstance, error) {
+	maxRetriesOnStartup int, connectionTimeout time.Duration, createGlobalChangesDB bool) (*CouchInstance, error) {
 
 	couchConf, err := CreateConnectionDefinition(couchDBConnectURL,
-		id, pw, maxRetries, maxRetriesOnStartup, connectionTimeout)
+		id, pw, maxRetries, maxRetriesOnStartup, connectionTimeout, createGlobalChangesDB)
 	if err != nil {
 		logger.Errorf("Error during CouchDB CreateConnectionDefinition(): %s\n", err.Error())
 		return nil, err
@@ -59,7 +59,6 @@ func CreateCouchInstance(couchDBConnectURL, id, pw string, maxRetries,
 
 	//Create the CouchDB instance
 	couchInstance := &CouchInstance{conf: *couchConf, client: client}
-
 	connectInfo, retVal, verifyErr := couchInstance.VerifyCouchConfig()
 	if verifyErr != nil {
 		return nil, verifyErr
@@ -160,15 +159,15 @@ func CreateSystemDatabasesIfNotExist(couchInstance *CouchInstance) error {
 		logger.Errorf("Error during CouchDB CreateDatabaseIfNotExist() for system dbName: %s  error: %s\n", dbName, err.Error())
 		return err
 	}
-
-	dbName = "_global_changes"
-	systemCouchDBDatabase = CouchDatabase{CouchInstance: couchInstance, DBName: dbName, IndexWarmCounter: 1}
-	err = systemCouchDBDatabase.CreateDatabaseIfNotExist()
-	if err != nil {
-		logger.Errorf("Error during CouchDB CreateDatabaseIfNotExist() for system dbName: %s  error: %s\n", dbName, err.Error())
-		return err
+	if couchInstance.conf.CreateGlobalChangesDB {
+		dbName = "_global_changes"
+		systemCouchDBDatabase = CouchDatabase{CouchInstance: couchInstance, DBName: dbName, IndexWarmCounter: 1}
+		err = systemCouchDBDatabase.CreateDatabaseIfNotExist()
+		if err != nil {
+			logger.Errorf("Error calling CouchDB CreateDatabaseIfNotExist() for system dbName: %s, error: %s", dbName, err)
+			return err
+		}
 	}
-
 	return nil
 
 }
diff --git a/core/ledger/util/couchdb/couchdbutil_test.go b/core/ledger/util/couchdb/couchdbutil_test.go
index d27328e6d..f05cab940 100644
--- a/core/ledger/util/couchdb/couchdbutil_test.go
+++ b/core/ledger/util/couchdb/couchdbutil_test.go
@@ -22,7 +22,7 @@ func TestCreateCouchDBConnectionAndDB(t *testing.T) {
 	defer cleanup(database)
 	//create a new connection
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to CreateCouchInstance"))
 
 	_, err = CreateCouchDatabase(couchInstance, database)
@@ -30,6 +30,31 @@ func TestCreateCouchDBConnectionAndDB(t *testing.T) {
 
 }
 
+//Unit test of couch db util functionality
+func TestNotCreateCouchGlobalChangesDB(t *testing.T) {
+	value := couchDBDef.CreateGlobalChangesDB
+	couchDBDef.CreateGlobalChangesDB = false
+	defer resetCreateGlobalChangesDBValue(value)
+	database := "_global_changes"
+	cleanup(database)
+	defer cleanup(database)
+
+	//create a new connection
+	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
+	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to CreateCouchInstance"))
+
+	db := CouchDatabase{CouchInstance: couchInstance, DBName: "_global_changes"}
+
+	//Retrieve the info for the new database and make sure the name matches
+	_, _, errdb := db.GetDatabaseInfo()
+	testutil.AssertNotNil(t, errdb)
+}
+
+func resetCreateGlobalChangesDBValue(value bool) {
+	couchDBDef.CreateGlobalChangesDB = value
+}
+
 //Unit test of couch db util functionality
 func TestCreateCouchDBSystemDBs(t *testing.T) {
 
@@ -39,7 +64,7 @@ func TestCreateCouchDBSystemDBs(t *testing.T) {
 
 	//create a new connection
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to CreateCouchInstance"))
 
@@ -68,6 +93,7 @@ func TestCreateCouchDBSystemDBs(t *testing.T) {
 	testutil.AssertEquals(t, dbResp.DbName, "_global_changes")
 
 }
+
 func TestDatabaseMapping(t *testing.T) {
 	//create a new instance and database object using a database name mixed case
 	_, err := mapAndValidateDatabaseName("testDB")
diff --git a/core/transientstore/cdbtransientdata/cdb_transientprovider.go b/core/transientstore/cdbtransientdata/cdb_transientprovider.go
index 501f39115..da8aea457 100644
--- a/core/transientstore/cdbtransientdata/cdb_transientprovider.go
+++ b/core/transientstore/cdbtransientdata/cdb_transientprovider.go
@@ -29,7 +29,7 @@ func NewProvider() (*Provider, error) {
 	logger.Debugf("constructing CouchDB transient data storage provider")
 	couchDBDef := couchdb.GetCouchDBDefinition()
 	couchInstance, err := couchdb.CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	if err != nil {
 		return nil, errors.WithMessage(err, "obtaining CouchDB instance failed")
 	}
diff --git a/sampleconfig/core.yaml b/sampleconfig/core.yaml
index 729f202b3..3d45bd40f 100644
--- a/sampleconfig/core.yaml
+++ b/sampleconfig/core.yaml
@@ -667,6 +667,8 @@ ledger:
        idleConnTimeout: 90s
        # Duration for keep-alive
        keepAliveTimeout: 30s
+       # enable or disable create global changes db
+       createGlobalChangesDB: true
 
   history:
     # enableHistoryDatabase - options are true or false
-- 
2.17.1 (Apple Git-112)

