// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	sync "sync"

	migration "github.com/hyperledger/fabric/orderer/consensus/migration"
)

type FakeMigrationController struct {
	ConsensusMigrationAbortStub        func() error
	consensusMigrationAbortMutex       sync.RWMutex
	consensusMigrationAbortArgsForCall []struct {
	}
	consensusMigrationAbortReturns struct {
		result1 error
	}
	consensusMigrationAbortReturnsOnCall map[int]struct {
		result1 error
	}
	ConsensusMigrationCommitStub        func() error
	consensusMigrationCommitMutex       sync.RWMutex
	consensusMigrationCommitArgsForCall []struct {
	}
	consensusMigrationCommitReturns struct {
		result1 error
	}
	consensusMigrationCommitReturnsOnCall map[int]struct {
		result1 error
	}
	ConsensusMigrationPendingStub        func() bool
	consensusMigrationPendingMutex       sync.RWMutex
	consensusMigrationPendingArgsForCall []struct {
	}
	consensusMigrationPendingReturns struct {
		result1 bool
	}
	consensusMigrationPendingReturnsOnCall map[int]struct {
		result1 bool
	}
	ConsensusMigrationStartStub        func(uint64) error
	consensusMigrationStartMutex       sync.RWMutex
	consensusMigrationStartArgsForCall []struct {
		arg1 uint64
	}
	consensusMigrationStartReturns struct {
		result1 error
	}
	consensusMigrationStartReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMigrationController) ConsensusMigrationAbort() error {
	fake.consensusMigrationAbortMutex.Lock()
	ret, specificReturn := fake.consensusMigrationAbortReturnsOnCall[len(fake.consensusMigrationAbortArgsForCall)]
	fake.consensusMigrationAbortArgsForCall = append(fake.consensusMigrationAbortArgsForCall, struct {
	}{})
	fake.recordInvocation("ConsensusMigrationAbort", []interface{}{})
	fake.consensusMigrationAbortMutex.Unlock()
	if fake.ConsensusMigrationAbortStub != nil {
		return fake.ConsensusMigrationAbortStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.consensusMigrationAbortReturns
	return fakeReturns.result1
}

func (fake *FakeMigrationController) ConsensusMigrationAbortCallCount() int {
	fake.consensusMigrationAbortMutex.RLock()
	defer fake.consensusMigrationAbortMutex.RUnlock()
	return len(fake.consensusMigrationAbortArgsForCall)
}

func (fake *FakeMigrationController) ConsensusMigrationAbortCalls(stub func() error) {
	fake.consensusMigrationAbortMutex.Lock()
	defer fake.consensusMigrationAbortMutex.Unlock()
	fake.ConsensusMigrationAbortStub = stub
}

func (fake *FakeMigrationController) ConsensusMigrationAbortReturns(result1 error) {
	fake.consensusMigrationAbortMutex.Lock()
	defer fake.consensusMigrationAbortMutex.Unlock()
	fake.ConsensusMigrationAbortStub = nil
	fake.consensusMigrationAbortReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigrationController) ConsensusMigrationAbortReturnsOnCall(i int, result1 error) {
	fake.consensusMigrationAbortMutex.Lock()
	defer fake.consensusMigrationAbortMutex.Unlock()
	fake.ConsensusMigrationAbortStub = nil
	if fake.consensusMigrationAbortReturnsOnCall == nil {
		fake.consensusMigrationAbortReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.consensusMigrationAbortReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigrationController) ConsensusMigrationCommit() error {
	fake.consensusMigrationCommitMutex.Lock()
	ret, specificReturn := fake.consensusMigrationCommitReturnsOnCall[len(fake.consensusMigrationCommitArgsForCall)]
	fake.consensusMigrationCommitArgsForCall = append(fake.consensusMigrationCommitArgsForCall, struct {
	}{})
	fake.recordInvocation("ConsensusMigrationCommit", []interface{}{})
	fake.consensusMigrationCommitMutex.Unlock()
	if fake.ConsensusMigrationCommitStub != nil {
		return fake.ConsensusMigrationCommitStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.consensusMigrationCommitReturns
	return fakeReturns.result1
}

func (fake *FakeMigrationController) ConsensusMigrationCommitCallCount() int {
	fake.consensusMigrationCommitMutex.RLock()
	defer fake.consensusMigrationCommitMutex.RUnlock()
	return len(fake.consensusMigrationCommitArgsForCall)
}

func (fake *FakeMigrationController) ConsensusMigrationCommitCalls(stub func() error) {
	fake.consensusMigrationCommitMutex.Lock()
	defer fake.consensusMigrationCommitMutex.Unlock()
	fake.ConsensusMigrationCommitStub = stub
}

func (fake *FakeMigrationController) ConsensusMigrationCommitReturns(result1 error) {
	fake.consensusMigrationCommitMutex.Lock()
	defer fake.consensusMigrationCommitMutex.Unlock()
	fake.ConsensusMigrationCommitStub = nil
	fake.consensusMigrationCommitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigrationController) ConsensusMigrationCommitReturnsOnCall(i int, result1 error) {
	fake.consensusMigrationCommitMutex.Lock()
	defer fake.consensusMigrationCommitMutex.Unlock()
	fake.ConsensusMigrationCommitStub = nil
	if fake.consensusMigrationCommitReturnsOnCall == nil {
		fake.consensusMigrationCommitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.consensusMigrationCommitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigrationController) ConsensusMigrationPending() bool {
	fake.consensusMigrationPendingMutex.Lock()
	ret, specificReturn := fake.consensusMigrationPendingReturnsOnCall[len(fake.consensusMigrationPendingArgsForCall)]
	fake.consensusMigrationPendingArgsForCall = append(fake.consensusMigrationPendingArgsForCall, struct {
	}{})
	fake.recordInvocation("ConsensusMigrationPending", []interface{}{})
	fake.consensusMigrationPendingMutex.Unlock()
	if fake.ConsensusMigrationPendingStub != nil {
		return fake.ConsensusMigrationPendingStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.consensusMigrationPendingReturns
	return fakeReturns.result1
}

func (fake *FakeMigrationController) ConsensusMigrationPendingCallCount() int {
	fake.consensusMigrationPendingMutex.RLock()
	defer fake.consensusMigrationPendingMutex.RUnlock()
	return len(fake.consensusMigrationPendingArgsForCall)
}

func (fake *FakeMigrationController) ConsensusMigrationPendingCalls(stub func() bool) {
	fake.consensusMigrationPendingMutex.Lock()
	defer fake.consensusMigrationPendingMutex.Unlock()
	fake.ConsensusMigrationPendingStub = stub
}

func (fake *FakeMigrationController) ConsensusMigrationPendingReturns(result1 bool) {
	fake.consensusMigrationPendingMutex.Lock()
	defer fake.consensusMigrationPendingMutex.Unlock()
	fake.ConsensusMigrationPendingStub = nil
	fake.consensusMigrationPendingReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMigrationController) ConsensusMigrationPendingReturnsOnCall(i int, result1 bool) {
	fake.consensusMigrationPendingMutex.Lock()
	defer fake.consensusMigrationPendingMutex.Unlock()
	fake.ConsensusMigrationPendingStub = nil
	if fake.consensusMigrationPendingReturnsOnCall == nil {
		fake.consensusMigrationPendingReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.consensusMigrationPendingReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMigrationController) ConsensusMigrationStart(arg1 uint64) error {
	fake.consensusMigrationStartMutex.Lock()
	ret, specificReturn := fake.consensusMigrationStartReturnsOnCall[len(fake.consensusMigrationStartArgsForCall)]
	fake.consensusMigrationStartArgsForCall = append(fake.consensusMigrationStartArgsForCall, struct {
		arg1 uint64
	}{arg1})
	fake.recordInvocation("ConsensusMigrationStart", []interface{}{arg1})
	fake.consensusMigrationStartMutex.Unlock()
	if fake.ConsensusMigrationStartStub != nil {
		return fake.ConsensusMigrationStartStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.consensusMigrationStartReturns
	return fakeReturns.result1
}

func (fake *FakeMigrationController) ConsensusMigrationStartCallCount() int {
	fake.consensusMigrationStartMutex.RLock()
	defer fake.consensusMigrationStartMutex.RUnlock()
	return len(fake.consensusMigrationStartArgsForCall)
}

func (fake *FakeMigrationController) ConsensusMigrationStartCalls(stub func(uint64) error) {
	fake.consensusMigrationStartMutex.Lock()
	defer fake.consensusMigrationStartMutex.Unlock()
	fake.ConsensusMigrationStartStub = stub
}

func (fake *FakeMigrationController) ConsensusMigrationStartArgsForCall(i int) uint64 {
	fake.consensusMigrationStartMutex.RLock()
	defer fake.consensusMigrationStartMutex.RUnlock()
	argsForCall := fake.consensusMigrationStartArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMigrationController) ConsensusMigrationStartReturns(result1 error) {
	fake.consensusMigrationStartMutex.Lock()
	defer fake.consensusMigrationStartMutex.Unlock()
	fake.ConsensusMigrationStartStub = nil
	fake.consensusMigrationStartReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigrationController) ConsensusMigrationStartReturnsOnCall(i int, result1 error) {
	fake.consensusMigrationStartMutex.Lock()
	defer fake.consensusMigrationStartMutex.Unlock()
	fake.ConsensusMigrationStartStub = nil
	if fake.consensusMigrationStartReturnsOnCall == nil {
		fake.consensusMigrationStartReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.consensusMigrationStartReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigrationController) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.consensusMigrationAbortMutex.RLock()
	defer fake.consensusMigrationAbortMutex.RUnlock()
	fake.consensusMigrationCommitMutex.RLock()
	defer fake.consensusMigrationCommitMutex.RUnlock()
	fake.consensusMigrationPendingMutex.RLock()
	defer fake.consensusMigrationPendingMutex.RUnlock()
	fake.consensusMigrationStartMutex.RLock()
	defer fake.consensusMigrationStartMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMigrationController) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migration.Controller = new(FakeMigrationController)
