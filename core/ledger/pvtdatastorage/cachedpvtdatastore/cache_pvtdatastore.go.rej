--- core/ledger/pvtdatastorage/cachedpvtdatastore/cache_pvtdatastore.go
+++ core/ledger/pvtdatastorage/cachedpvtdatastore/cache_pvtdatastore.go
@@ -7,27 +7,26 @@ SPDX-License-Identifier: Apache-2.0
 package cachedpvtdatastore
 
 import (
+	"context"
+
 	"github.com/hyperledger/fabric/common/metrics"
 	"github.com/hyperledger/fabric/core/ledger"
+	"github.com/hyperledger/fabric/core/ledger/ledgerconfig"
 	"github.com/hyperledger/fabric/core/ledger/pvtdatapolicy"
 	"github.com/hyperledger/fabric/core/ledger/pvtdatastorage"
 	"github.com/pkg/errors"
 )
 
-const (
-	pvtDataStorageQueueLen = 1
-)
-
 type cachedPvtDataStore struct {
 	pvtDataStore      pvtdatastorage.Store
 	pvtDataCache      pvtdatastorage.Store
 	pvtDataStoreCh    chan *pvtPrepareData
+	pvtDataCommitCh   chan *pvtPrepareData
+	pvtDataRollbackCh chan *pvtPrepareData
 	writerClosedCh    chan struct{}
-	commitReadyCh     chan bool
-	prepareReadyCh    chan bool
 	doneCh            chan struct{}
-	commitImmediately bool
-	firstExecuteDone  bool
+	pvtReadyCh        chan bool
+	sigCh             chan struct{}
 }
 
 type pvtPrepareData struct {
@@ -67,15 +69,20 @@ func (c *cachedPvtDataStore) Prepare(blockNum uint64, pvtData []*ledger.TxPvtDat
 	if err != nil {
 		return errors.WithMessage(err, "Prepare pvtdata in cache failed")
 	}
-	if blockNum == 0 {
-		c.commitImmediately = true
-		return c.pvtDataStore.Prepare(blockNum, pvtData)
-	}
-	if c.firstExecuteDone {
-		<-c.prepareReadyCh
+
+	if blockNum > uint64(ledgerconfig.GetConcurrentBlockWrites()) {
+		waitForPvt := blockNum - uint64(ledgerconfig.GetConcurrentBlockWrites())
+		// Wait for underlying storage to complete commit on previous block.
+		logger.Debugf("waiting for previous block to checkpoint [%d]", waitForPvt)
+		stopWatchWaitBlock := metrics.StopWatch("cached_pvt_store_prepare_wait_block_duration")
+		c.waitForPvt(context.Background(), waitForPvt)
+		stopWatchWaitBlock()
+		logger.Debugf("ready to store incoming block [%d]", blockNum)
 	}
-	c.firstExecuteDone = true
+
+	stopWatchWaitQueue := metrics.StopWatch("cached_pvt_store_prepare_wait_queue_duration")
 	c.pvtDataStoreCh <- &pvtPrepareData{blockNum: blockNum, pvtData: pvtData}
+	stopWatchWaitQueue()
 	return nil
 
 }
@@ -90,42 +97,37 @@ func (c *cachedPvtDataStore) pvtDataWriter() {
 			close(c.writerClosedCh)
 			return
 		case pvtPrepareData := <-c.pvtDataStoreCh:
-			logger.Debugf("prepare pvt data for storage [%d]", pvtPrepareData.blockNum)
+			logger.Debugf("prepare pvt data for storage [%d], length of pvtData:%d", pvtPrepareData.blockNum, len(pvtPrepareData.pvtData))
 			err := c.pvtDataStore.Prepare(pvtPrepareData.blockNum, pvtPrepareData.pvtData)
 			if err != nil {
 				logger.Errorf("pvt data was not added [%d, %s]", pvtPrepareData.blockNum, err)
 				panic(panicMsg)
 			}
-			// we will wait until
-			commitReady := <-c.commitReadyCh
-			if commitReady {
-				if err := c.pvtDataStore.Commit(); err != nil {
-					logger.Errorf("pvt data was not committed to db [%d, %s]", pvtPrepareData.blockNum, err)
-					panic(panicMsg)
-				}
-			} else {
-				if err := c.pvtDataStore.Rollback(); err != nil {
-					logger.Errorf("pvt data rollback in db failed [%d, %s]", pvtPrepareData.blockNum, err)
-					panic(panicMsg)
-				}
+			c.pvtReadyCh <- true
+		case pvtPrepareData := <-c.pvtDataCommitCh:
+			if err := c.pvtDataStore.Commit(pvtPrepareData.blockNum); err != nil {
+				logger.Errorf("pvt data was not committed to db [%d, %s]", pvtPrepareData.blockNum, err)
+				panic(panicMsg)
+			}
+			close(c.sigCh)
+			c.sigCh = make(chan struct{})
+		case pvtPrepareData := <-c.pvtDataRollbackCh:
+			if err := c.pvtDataStore.Rollback(pvtPrepareData.blockNum); err != nil {
+				logger.Errorf("pvt data rollback in db failed [%d, %s]", pvtPrepareData.blockNum, err)
+				panic(panicMsg)
 			}
-			c.prepareReadyCh <- true
 		}
 	}
 }
 
 // Commit pvt data in cache and call background pvtDataWriter go routine to commit data
-func (c *cachedPvtDataStore) Commit() error {
-	err := c.pvtDataCache.Commit()
+func (c *cachedPvtDataStore) Commit(blockNum uint64) error {
+	err := c.pvtDataCache.Commit(blockNum)
 	if err != nil {
 		return errors.WithMessage(err, "Commit pvtdata in cache failed")
 	}
-	if c.commitImmediately {
-		c.commitImmediately = false
-		return c.pvtDataStore.Commit()
-	}
-	// send signal to pvtDataWriter func to commit the pvt data
-	c.commitReadyCh <- true
+	<-c.pvtReadyCh
+	c.pvtDataCommitCh <- &pvtPrepareData{blockNum: blockNum}
 	return nil
 }
 
