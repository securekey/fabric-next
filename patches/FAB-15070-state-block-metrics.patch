diff --git a/docs/source/metrics_reference.rst b/docs/source/metrics_reference.rst
index 183e80609..e52179cd6 100644
--- a/docs/source/metrics_reference.rst
+++ b/docs/source/metrics_reference.rst
@@ -160,8 +160,16 @@ The following metrics are currently exported for consumption by Prometheus.
 +-----------------------------------------------------+-----------+------------------------------------------------------------+--------------------+
 | gossip_state_commit_duration                        | histogram | Time it takes to commit a block in seconds                 | channel            |
 +-----------------------------------------------------+-----------+------------------------------------------------------------+--------------------+
+| gossip_state_delivered_payload_sequence_number      | gauge     | Delivered payload sequence number                          | channel            |
++-----------------------------------------------------+-----------+------------------------------------------------------------+--------------------+
 | gossip_state_height                                 | gauge     | Current ledger height                                      | channel            |
 +-----------------------------------------------------+-----------+------------------------------------------------------------+--------------------+
+| gossip_state_pushed_payload_sequence_number         | gauge     | Pushed payload sequence number                             | channel            |
++-----------------------------------------------------+-----------+------------------------------------------------------------+--------------------+
+| gossip_state_queued_payload_sequence_number         | gauge     | Queued payload sequence number                             | channel            |
++-----------------------------------------------------+-----------+------------------------------------------------------------+--------------------+
+| gossip_state_received_payload_sequence_number       | gauge     | Received payload sequence number                           | channel            |
++-----------------------------------------------------+-----------+------------------------------------------------------------+--------------------+
 | grpc_comm_conn_closed                               | counter   | gRPC connections closed. Open minus closed is the active   |                    |
 |                                                     |           | number of connections.                                     |                    |
 +-----------------------------------------------------+-----------+------------------------------------------------------------+--------------------+
@@ -356,8 +364,16 @@ associated with the metric.
 +-----------------------------------------------------------------------------------------+-----------+------------------------------------------------------------+
 | gossip.state.commit_duration.%{channel}                                                 | histogram | Time it takes to commit a block in seconds                 |
 +-----------------------------------------------------------------------------------------+-----------+------------------------------------------------------------+
+| gossip.state.delivered_payload_sequence_number.%{channel}                               | gauge     | Delivered payload sequence number                          |
++-----------------------------------------------------------------------------------------+-----------+------------------------------------------------------------+
 | gossip.state.height.%{channel}                                                          | gauge     | Current ledger height                                      |
 +-----------------------------------------------------------------------------------------+-----------+------------------------------------------------------------+
+| gossip.state.pushed_payload_sequence_number.%{channel}                                  | gauge     | Pushed payload sequence number                             |
++-----------------------------------------------------------------------------------------+-----------+------------------------------------------------------------+
+| gossip.state.queued_payload_sequence_number.%{channel}                                  | gauge     | Queued payload sequence number                             |
++-----------------------------------------------------------------------------------------+-----------+------------------------------------------------------------+
+| gossip.state.received_payload_sequence_number.%{channel}                                | gauge     | Received payload sequence number                           |
++-----------------------------------------------------------------------------------------+-----------+------------------------------------------------------------+
 | grpc.comm.conn_closed                                                                   | counter   | gRPC connections closed. Open minus closed is the active   |
 |                                                                                         |           | number of connections.                                     |
 +-----------------------------------------------------------------------------------------+-----------+------------------------------------------------------------+
diff --git a/gossip/metrics/metrics.go b/gossip/metrics/metrics.go
index fd7c1b355..1890e433c 100644
--- a/gossip/metrics/metrics.go
+++ b/gossip/metrics/metrics.go
@@ -29,16 +29,24 @@ func NewGossipMetrics(p metrics.Provider) *GossipMetrics {
 
 // StateMetrics encapsulates gossip state related metrics
 type StateMetrics struct {
-	Height            metrics.Gauge
-	CommitDuration    metrics.Histogram
-	PayloadBufferSize metrics.Gauge
+	Height                         metrics.Gauge
+	CommitDuration                 metrics.Histogram
+	PayloadBufferSize              metrics.Gauge
+	ReceivedPayloadSequenceNumber  metrics.Gauge
+	QueuedPayloadSequenceNumber    metrics.Gauge
+	DeliveredPayloadSequenceNumber metrics.Gauge
+	PushedPayloadSequenceNumber    metrics.Gauge
 }
 
 func newStateMetrics(p metrics.Provider) *StateMetrics {
 	return &StateMetrics{
-		Height:            p.NewGauge(HeightOpts),
-		CommitDuration:    p.NewHistogram(CommitDurationOpts),
-		PayloadBufferSize: p.NewGauge(PayloadBufferSizeOpts),
+		Height:                         p.NewGauge(HeightOpts),
+		CommitDuration:                 p.NewHistogram(CommitDurationOpts),
+		PayloadBufferSize:              p.NewGauge(PayloadBufferSizeOpts),
+		ReceivedPayloadSequenceNumber:  p.NewGauge(ReceivedPayloadSequenceNumberOpts),
+		QueuedPayloadSequenceNumber:    p.NewGauge(QueuedPayloadSequenceNumberOpts),
+		DeliveredPayloadSequenceNumber: p.NewGauge(DeliveredPayloadSequenceNumberOpts),
+		PushedPayloadSequenceNumber:    p.NewGauge(PushedPayloadSequenceNumberOpts),
 	}
 }
 
@@ -69,6 +77,42 @@ var (
 		LabelNames:   []string{"channel"},
 		StatsdFormat: "%{#fqname}.%{channel}",
 	}
+
+	ReceivedPayloadSequenceNumberOpts = metrics.GaugeOpts{
+		Namespace:    "gossip",
+		Subsystem:    "state",
+		Name:         "received_payload_sequence_number",
+		Help:         "Received payload sequence number",
+		LabelNames:   []string{"channel"},
+		StatsdFormat: "%{#fqname}.%{channel}",
+	}
+
+	QueuedPayloadSequenceNumberOpts = metrics.GaugeOpts{
+		Namespace:    "gossip",
+		Subsystem:    "state",
+		Name:         "queued_payload_sequence_number",
+		Help:         "Queued payload sequence number",
+		LabelNames:   []string{"channel"},
+		StatsdFormat: "%{#fqname}.%{channel}",
+	}
+
+	DeliveredPayloadSequenceNumberOpts = metrics.GaugeOpts{
+		Namespace:    "gossip",
+		Subsystem:    "state",
+		Name:         "delivered_payload_sequence_number",
+		Help:         "Delivered payload sequence number",
+		LabelNames:   []string{"channel"},
+		StatsdFormat: "%{#fqname}.%{channel}",
+	}
+
+	PushedPayloadSequenceNumberOpts = metrics.GaugeOpts{
+		Namespace:    "gossip",
+		Subsystem:    "state",
+		Name:         "pushed_payload_sequence_number",
+		Help:         "Pushed payload sequence number",
+		LabelNames:   []string{"channel"},
+		StatsdFormat: "%{#fqname}.%{channel}",
+	}
 )
 
 // ElectionMetrics encapsulates gossip leader election related metrics
diff --git a/gossip/metrics/metrics_test.go b/gossip/metrics/metrics_test.go
index a0b4a809d..c7cde6c4d 100644
--- a/gossip/metrics/metrics_test.go
+++ b/gossip/metrics/metrics_test.go
@@ -34,6 +34,10 @@ func TestMetrics(t *testing.T) {
 	assert.NotNil(t, gossipMetrics.StateMetrics.Height)
 	assert.NotNil(t, gossipMetrics.StateMetrics.CommitDuration)
 	assert.NotNil(t, gossipMetrics.StateMetrics.PayloadBufferSize)
+	assert.NotNil(t, gossipMetrics.StateMetrics.ReceivedPayloadSequenceNumber)
+	assert.NotNil(t, gossipMetrics.StateMetrics.QueuedPayloadSequenceNumber)
+	assert.NotNil(t, gossipMetrics.StateMetrics.DeliveredPayloadSequenceNumber)
+	assert.NotNil(t, gossipMetrics.StateMetrics.PushedPayloadSequenceNumber)
 
 	assert.NotNil(t, gossipMetrics.ElectionMetrics)
 	assert.NotNil(t, gossipMetrics.ElectionMetrics.Declaration)
diff --git a/gossip/metrics/mocks/metrics.go b/gossip/metrics/mocks/metrics.go
index 2043f0f1f..6ef5191a4 100644
--- a/gossip/metrics/mocks/metrics.go
+++ b/gossip/metrics/mocks/metrics.go
@@ -15,9 +15,13 @@ import (
 type TestMetricProvider struct {
 	FakeProvider *metricsfakes.Provider
 
-	FakeHeightGauge            *metricsfakes.Gauge
-	FakeCommitDurationHist     *metricsfakes.Histogram
-	FakePayloadBufferSizeGauge *metricsfakes.Gauge
+	FakeHeightGauge                    *metricsfakes.Gauge
+	FakeCommitDurationHist             *metricsfakes.Histogram
+	FakePayloadBufferSizeGauge         *metricsfakes.Gauge
+	FakeReceivedPayloadSequenceNumber  *metricsfakes.Gauge
+	FakeQueuedPayloadSequenceNumber    *metricsfakes.Gauge
+	FakeDeliveredPayloadSequenceNumber *metricsfakes.Gauge
+	FakePushedPayloadSequenceNumber    *metricsfakes.Gauge
 
 	FakeDeclarationGauge *metricsfakes.Gauge
 
@@ -46,6 +50,10 @@ func TestUtilConstructMetricProvider() *TestMetricProvider {
 	fakeHeightGauge := testUtilConstructGauge()
 	fakeCommitDurationHist := testUtilConstructHist()
 	fakePayloadBufferSizeGauge := testUtilConstructGauge()
+	fakeReceivedPayloadSequenceNumber := testUtilConstructGauge()
+	fakeQueuedPayloadSequenceNumber := testUtilConstructGauge()
+	fakeDeliveredPayloadSequenceNumber := testUtilConstructGauge()
+	fakePushedPayloadSequenceNumber := testUtilConstructGauge()
 
 	fakeDeclarationGauge := testUtilConstructGauge()
 
@@ -109,6 +117,14 @@ func TestUtilConstructMetricProvider() *TestMetricProvider {
 			return fakePayloadBufferSizeGauge
 		case gmetrics.HeightOpts.Name:
 			return fakeHeightGauge
+		case gmetrics.ReceivedPayloadSequenceNumberOpts.Name:
+			return fakeReceivedPayloadSequenceNumber
+		case gmetrics.QueuedPayloadSequenceNumberOpts.Name:
+			return fakeQueuedPayloadSequenceNumber
+		case gmetrics.DeliveredPayloadSequenceNumberOpts.Name:
+			return fakeDeliveredPayloadSequenceNumber
+		case gmetrics.PushedPayloadSequenceNumberOpts.Name:
+			return fakePushedPayloadSequenceNumber
 		case gmetrics.LeaderDeclerationOpts.Name:
 			return fakeDeclarationGauge
 		case gmetrics.OnlineOpts.Name:
@@ -126,6 +142,10 @@ func TestUtilConstructMetricProvider() *TestMetricProvider {
 		fakeHeightGauge,
 		fakeCommitDurationHist,
 		fakePayloadBufferSizeGauge,
+		fakeReceivedPayloadSequenceNumber,
+		fakeQueuedPayloadSequenceNumber,
+		fakeDeliveredPayloadSequenceNumber,
+		fakePushedPayloadSequenceNumber,
 		fakeDeclarationGauge,
 		fakeSentMessages,
 		fakeBufferOverflow,
diff --git a/gossip/state/state.go b/gossip/state/state.go
index e2cd21196..a144ff8e4 100644
--- a/gossip/state/state.go
+++ b/gossip/state/state.go
@@ -480,6 +480,7 @@ func (s *GossipStateProviderImpl) handleStateResponse(msg proto.ReceivedMessage)
 	}
 	for _, payload := range response.GetPayloads() {
 		logger.Debugf("Received payload with sequence number %d.", payload.SeqNum)
+		s.stateMetrics.ReceivedPayloadSequenceNumber.With("channel", s.chainID).Set(float64(payload.SeqNum))
 		if err := s.mediator.VerifyBlock(common2.ChainID(s.chainID), payload.SeqNum, payload.Data); err != nil {
 			err = errors.WithStack(err)
 			logger.Warningf("Error verifying block with sequence number %d, due to %+v", payload.SeqNum, err)
@@ -523,6 +524,7 @@ func (s *GossipStateProviderImpl) queueNewMessage(msg *proto.GossipMessage) {
 
 	dataMsg := msg.GetDataMsg()
 	if dataMsg != nil {
+		s.stateMetrics.QueuedPayloadSequenceNumber.With("channel", s.chainID).Set(float64(dataMsg.Payload.SeqNum))
 		if err := s.addPayload(dataMsg.GetPayload(), nonBlocking); err != nil {
 			logger.Warningf("Block [%d] received from gossip wasn't added to payload buffer: %v", dataMsg.Payload.SeqNum, err)
 			return
@@ -540,6 +542,7 @@ func (s *GossipStateProviderImpl) deliverPayloads() {
 		select {
 		// Wait for notification that next seq has arrived
 		case <-s.payloads.Ready():
+			s.stateMetrics.DeliveredPayloadSequenceNumber.With("channel", s.chainID).Set(float64(s.payloads.Next()))
 			logger.Debugf("[%s] Ready to transfer payloads (blocks) to the ledger, next block number is = [%d]", s.chainID, s.payloads.Next())
 			// Collect all subsequent payloads
 			for payload := s.payloads.Pop(); payload != nil; payload = s.payloads.Pop() {
@@ -771,6 +774,8 @@ func (s *GossipStateProviderImpl) addPayload(payload *proto.Payload, blockingMod
 	}
 
 	s.payloads.Push(payload)
+	s.stateMetrics.PushedPayloadSequenceNumber.With("channel", s.chainID).Set(float64(payload.SeqNum))
+	logger.Debugf("Blocks payloads buffer size for channel [%s] is %d blocks", s.chainID, s.payloads.Size())
 	return nil
 }
 
