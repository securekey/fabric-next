From 9084ec4040918491dc5773d00c79e913a98bc7b4 Mon Sep 17 00:00:00 2001
From: Ahmed Sajid <ahmed.sajid@securekey.com>
Date: Fri, 28 Feb 2020 15:35:12 -0500
Subject: [PATCH] [FAB-17517] Only Initialize specified provider

Code currently tries to initialize multiple providers based on
provided config Opts being nil or not.

This update ensures that only specified provider is initialized
based on ProviderName.

This fixes "Failed initializing PKCS11.BCCSP %!s(<nil>)" error
when the code complied with PKCS11 or PLUGINS enabled expect
configuration to not be nil even when Provider is set to SW.

Signed-off-by: Ahmed Sajid <ahmed.sajid@securekey.com>
---
 bccsp/factory/nopkcs11.go      | 71 ++++++++++++++++++----------------
 bccsp/factory/pkcs11.go        |  8 ++--
 2 files changed, 138 insertions(+), 37 deletions(-)

diff --git a/bccsp/factory/nopkcs11.go b/bccsp/factory/nopkcs11.go
index a83695fa6a..a4c79288fa 100644
--- a/bccsp/factory/nopkcs11.go
+++ b/bccsp/factory/nopkcs11.go
@@ -35,48 +35,53 @@ type FactoryOpts struct {
 // Error is returned only if defaultBCCSP cannot be found
 func InitFactories(config *FactoryOpts) error {
 	factoriesInitOnce.Do(func() {
-		// Take some precautions on default opts
-		if config == nil {
-			config = GetDefaultOpts()
-		}
+		factoriesInitError = initFactories(config)
+	})
 
-		if config.ProviderName == "" {
-			config.ProviderName = "SW"
-		}
+	return factoriesInitError
+}
 
-		if config.SwOpts == nil {
-			config.SwOpts = GetDefaultOpts().SwOpts
-		}
+func initFactories(config *FactoryOpts) error {
+	// Take some precautions on default opts
+	if config == nil {
+		config = GetDefaultOpts()
+	}
+
+	if config.ProviderName == "" {
+		config.ProviderName = "SW"
+	}
 
-		// Initialize factories map
-		bccspMap = make(map[string]bccsp.BCCSP)
+	if config.SwOpts == nil {
+		config.SwOpts = GetDefaultOpts().SwOpts
+	}
 
-		// Software-Based BCCSP
-		if config.SwOpts != nil {
-			f := &SWFactory{}
-			err := initBCCSP(f, config)
-			if err != nil {
-				factoriesInitError = errors.Wrapf(err, "Failed initializing BCCSP.")
-			}
-		}
+	// Initialize factories map
+	bccspMap = make(map[string]bccsp.BCCSP)
 
-		// BCCSP Plugin
-		if config.PluginOpts != nil {
-			f := &PluginFactory{}
-			err := initBCCSP(f, config)
-			if err != nil {
-				factoriesInitError = errors.Wrapf(err, "Failed initializing PKCS11.BCCSP %s", factoriesInitError)
-			}
+	// Software-Based BCCSP
+	if config.ProviderName == "SW" && config.SwOpts != nil {
+		f := &SWFactory{}
+		err := initBCCSP(f, config)
+		if err != nil {
+			return errors.Wrapf(err, "Failed initializing BCCSP.")
 		}
+	}
 
-		var ok bool
-		defaultBCCSP, ok = bccspMap[config.ProviderName]
-		if !ok {
-			factoriesInitError = errors.Errorf("%s\nCould not find default `%s` BCCSP", factoriesInitError, config.ProviderName)
+	// BCCSP Plugin
+	if config.ProviderName == "PLUGIN" && config.PluginOpts != nil {
+		f := &PluginFactory{}
+		err := initBCCSP(f, config)
+		if err != nil {
+			return errors.Wrapf(err, "Failed initializing PLUGIN.BCCSP %s", factoriesInitError)
 		}
-	})
+	}
 
-	return factoriesInitError
+	var ok bool
+	defaultBCCSP, ok = bccspMap[config.ProviderName]
+	if !ok {
+		return errors.Errorf("%s\nCould not find default `%s` BCCSP", factoriesInitError, config.ProviderName)
+	}
+	return nil
 }
 
 // GetBCCSPFromOpts returns a BCCSP created according to the options passed in input.
diff --git a/bccsp/factory/pkcs11.go b/bccsp/factory/pkcs11.go
index 4456d70eb6..8269135050 100644
--- a/bccsp/factory/pkcs11.go
+++ b/bccsp/factory/pkcs11.go
@@ -61,7 +61,7 @@ func setFactories(config *FactoryOpts) error {
 	bccspMap = make(map[string]bccsp.BCCSP)
 
 	// Software-Based BCCSP
-	if config.SwOpts != nil {
+	if config.ProviderName == "SW" && config.SwOpts != nil {
 		f := &SWFactory{}
 		err := initBCCSP(f, config)
 		if err != nil {
@@ -70,7 +70,7 @@ func setFactories(config *FactoryOpts) error {
 	}
 
 	// PKCS11-Based BCCSP
-	if config.Pkcs11Opts != nil {
+	if config.ProviderName == "PKCS11" && config.Pkcs11Opts != nil {
 		f := &PKCS11Factory{}
 		err := initBCCSP(f, config)
 		if err != nil {
@@ -79,11 +79,11 @@ func setFactories(config *FactoryOpts) error {
 	}
 
 	// BCCSP Plugin
-	if config.PluginOpts != nil {
+	if config.ProviderName == "PLUGIN" && config.PluginOpts != nil {
 		f := &PluginFactory{}
 		err := initBCCSP(f, config)
 		if err != nil {
-			factoriesInitError = errors.Wrapf(err, "Failed initializing PKCS11.BCCSP %s", factoriesInitError)
+			factoriesInitError = errors.Wrapf(err, "Failed initializing PLUGIN.BCCSP %s", factoriesInitError)
 		}
 	}
