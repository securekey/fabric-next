diff a/core/ledger/util/couchdb/couchdbutil.go b/core/ledger/util/couchdb/couchdbutil.go	(rejected hunks)
@@ -8,12 +8,18 @@ package couchdb
 import (
 	"encoding/hex"
 	"fmt"
+	"net"
 	"net/http"
 	"regexp"
 	"strconv"
 	"strings"
+	"sync"
 	"time"
 
+	"github.com/hyperledger/fabric/core/ledger/ledgerconfig"
+
+	"sync/atomic"
+
 	"github.com/hyperledger/fabric/common/util"
 )
 
@@ -28,49 +34,75 @@ var maxLength = 238
 var chainNameAllowedLength = 50
 var namespaceNameAllowedLength = 50
 var collectionNameAllowedLength = 50
+var couchInstance *CouchInstance
+var couchInstanceInitalized int32
+var couchInstanceMutex sync.Mutex
 
 //CreateCouchInstance creates a CouchDB instance
 func CreateCouchInstance(couchDBConnectURL, id, pw string, maxRetries,
-	maxRetriesOnStartup int, connectionTimeout time.Duration) (*CouchInstance, error) {
+	maxRetriesOnStartup int, connectionTimeout time.Duration, createGlobalChangesDB bool) (*CouchInstance, error) {
 
+	if couchInstanceInitalized == 1 {
+		return couchInstance, nil
+	}
+	couchInstanceMutex.Lock()
+	defer couchInstanceMutex.Unlock()
+	if couchInstanceInitalized == 1 {
+		return couchInstance, nil
+	}
 	couchConf, err := CreateConnectionDefinition(couchDBConnectURL,
-		id, pw, maxRetries, maxRetriesOnStartup, connectionTimeout)
+		id, pw, maxRetries, maxRetriesOnStartup, connectionTimeout, createGlobalChangesDB)
 	if err != nil {
 		logger.Errorf("Error during CouchDB CreateConnectionDefinition(): %s\n", err.Error())
 		return nil, err
 	}
-
+	// Create the HTTP transport.
+	// We override the default transport to enable configurable connection pooling.
+	transport, err := createHTTPTransport()
+	if err != nil {
+		return nil, err
+	}
 	// Create the http client once
 	// Clients and Transports are safe for concurrent use by multiple goroutines
 	// and for efficiency should only be created once and re-used.
-	client := &http.Client{Timeout: couchConf.RequestTimeout}
-
-	transport := &http.Transport{Proxy: http.ProxyFromEnvironment}
-	transport.DisableCompression = false
-	client.Transport = transport
-
+	client := &http.Client{
+		Transport: transport,
+		Timeout:   couchConf.RequestTimeout,
+	}
 	//Create the CouchDB instance
-	couchInstance := &CouchInstance{conf: *couchConf, client: client}
+	couchInstance = &CouchInstance{conf: *couchConf, client: client}
 
-	connectInfo, retVal, verifyErr := couchInstance.VerifyCouchConfig()
+	connectInfo, verifyErr := couchInstance.VerifyCouchConfig()
 	if verifyErr != nil {
 		return nil, verifyErr
 	}
 
-	//return an error if the http return value is not 200
-	if retVal.StatusCode != 200 {
-		return nil, fmt.Errorf("CouchDB connection error, expecting return code of 200, received %v", retVal.StatusCode)
-	}
-
 	//check the CouchDB version number, return an error if the version is not at least 2.0.0
 	errVersion := checkCouchDBVersion(connectInfo.Version)
 	if errVersion != nil {
 		return nil, errVersion
 	}
-
+	atomic.StoreInt32(&couchInstanceInitalized, 1)
 	return couchInstance, nil
 }
 
+func createHTTPTransport() (*http.Transport, error) {
+	// Copy of http.DefaultTransport with overrides.
+	return &http.Transport{
+		Proxy: http.ProxyFromEnvironment,
+		DialContext: (&net.Dialer{
+			Timeout:   30 * time.Second,
+			KeepAlive: ledgerconfig.GetCouchDBKeepAliveTimeout(),
+			DualStack: true,
+		}).DialContext,
+		MaxIdleConns:          ledgerconfig.GetCouchDBMaxIdleConns(),
+		MaxIdleConnsPerHost:   ledgerconfig.GetCouchDBMaxIdleConnsPerHost(),
+		IdleConnTimeout:       ledgerconfig.GetCouchDBIdleConnTimeout(),
+		TLSHandshakeTimeout:   10 * time.Second,
+		ExpectContinueTimeout: 1 * time.Second,
+	}, nil
+}
+
 //checkCouchDBVersion verifies CouchDB is at least 2.0.0
 func checkCouchDBVersion(version string) error {
 
@@ -125,15 +167,15 @@ func CreateSystemDatabasesIfNotExist(couchInstance *CouchInstance) error {
 		logger.Errorf("Error during CouchDB CreateDatabaseIfNotExist() for system dbName: %s  error: %s\n", dbName, err.Error())
 		return err
 	}
-
-	dbName = "_global_changes"
-	systemCouchDBDatabase = CouchDatabase{CouchInstance: couchInstance, DBName: dbName, IndexWarmCounter: 1}
-	err = systemCouchDBDatabase.CreateDatabaseIfNotExist()
-	if err != nil {
-		logger.Errorf("Error during CouchDB CreateDatabaseIfNotExist() for system dbName: %s  error: %s\n", dbName, err.Error())
-		return err
+	if couchInstance.conf.CreateGlobalChangesDB {
+		dbName = "_global_changes"
+		systemCouchDBDatabase = CouchDatabase{CouchInstance: couchInstance, DBName: dbName, IndexWarmCounter: 1}
+		err = systemCouchDBDatabase.CreateDatabaseIfNotExist()
+		if err != nil {
+			logger.Errorf("Error calling CouchDB CreateDatabaseIfNotExist() for system dbName: %s, error: %s", dbName, err)
+			return err
+		}
 	}
-
 	return nil
 
 }
