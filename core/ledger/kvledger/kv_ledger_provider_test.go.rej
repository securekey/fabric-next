diff a/core/ledger/kvledger/kv_ledger_provider_test.go b/core/ledger/kvledger/kv_ledger_provider_test.go	(rejected hunks)
@@ -95,14 +95,14 @@ func TestRecovery(t *testing.T) {
 
 	// Case 1: assume a crash happens, force underconstruction flag to be set to simulate
 	// a failure where ledgerid is being created - ie., block is written but flag is not unset
-	provider.(*Provider).idStore.setUnderConstructionFlag(constructTestLedgerID(1))
+	provider.(*Provider).idStore.SetUnderConstructionFlag(constructTestLedgerID(1))
 	provider.Close()
 
 	// construct a new provider to invoke recovery
 	provider, err = NewProvider()
 	testutil.AssertNoError(t, err, "Provider failed to recover an underConstructionLedger")
 	// verify the underecoveryflag and open the ledger
-	flag, err := provider.(*Provider).idStore.getUnderConstructionFlag()
+	flag, err := provider.(*Provider).idStore.GetUnderConstructionFlag()
 	testutil.AssertNoError(t, err, "Failed to read the underconstruction flag")
 	testutil.AssertEquals(t, flag, "")
 	ledger, err = provider.Open(constructTestLedgerID(1))
@@ -111,13 +111,13 @@ func TestRecovery(t *testing.T) {
 
 	// Case 0: assume a crash happens before the genesis block of ledger 2 is committed
 	// Open the ID store (inventory of chainIds/ledgerIds)
-	provider.(*Provider).idStore.setUnderConstructionFlag(constructTestLedgerID(2))
+	provider.(*Provider).idStore.SetUnderConstructionFlag(constructTestLedgerID(2))
 	provider.Close()
 
 	// construct a new provider to invoke recovery
 	provider, err = NewProvider()
 	testutil.AssertNoError(t, err, "Provider failed to recover an underConstructionLedger")
-	flag, err = provider.(*Provider).idStore.getUnderConstructionFlag()
+	flag, err = provider.(*Provider).idStore.GetUnderConstructionFlag()
 	testutil.AssertNoError(t, err, "Failed to read the underconstruction flag")
 	testutil.AssertEquals(t, flag, "")
 
