diff a/core/ledger/kvledger/txmgmt/validator/valimpl/default_impl.go b/core/ledger/kvledger/txmgmt/validator/valimpl/default_impl.go	(rejected hunks)
@@ -14,6 +14,10 @@ import (
 	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator"
 	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator/statebasedval"
 	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/validator/valinternal"
+	"github.com/hyperledger/fabric/core/ledger/util"
+	"github.com/hyperledger/fabric/protos/common"
+	"github.com/hyperledger/fabric/protos/peer"
+	"golang.org/x/net/context"
 )
 
 var logger = flogging.MustGetLogger("valimpl")
@@ -44,21 +75,23 @@ func (impl *DefaultImpl) ValidateAndPrepareBatch(blockAndPvtdata *ledger.BlockAn
 	var pvtUpdates *privacyenabledstate.PvtUpdateBatch
 	var err error
 
-	logger.Debug("preprocessing ProtoBlock...")
-	if internalBlock, err = preprocessProtoBlock(impl.txmgr, impl.db.ValidateKeyValue, block, doMVCCValidation); err != nil {
+	txsFilter := util.TxValidationFlags(block.Metadata.Metadata[common.BlockMetadataIndex_TRANSACTIONS_FILTER])
+
+	logger.Debugf("preprocessing ProtoBlock for block %d...", block.Header.Number)
+	if internalBlock, err = preprocessProtoBlock(impl.txmgr, impl.db.ValidateKeyValue, block, doMVCCValidation, txsFilter, util.TxFilterAcceptAll); err != nil {
 		return nil, err
 	}
 
-	if pubAndHashUpdates, err = impl.InternalValidator.ValidateAndPrepareBatch(internalBlock, doMVCCValidation); err != nil {
+	if pubAndHashUpdates, err = impl.InternalValidator.ValidateAndPrepareBatch(internalBlock, doMVCCValidation, blockAndPvtdata.BlockPvtData); err != nil {
 		return nil, err
 	}
-	logger.Debug("validating rwset...")
+	logger.Debugf("validating rwset for block %d...", block.Header.Number)
 	if pvtUpdates, err = validateAndPreparePvtBatch(internalBlock, blockAndPvtdata.BlockPvtData); err != nil {
 		return nil, err
 	}
-	logger.Debug("postprocessing ProtoBlock...")
-	postprocessProtoBlock(block, internalBlock)
-	logger.Debug("ValidateAndPrepareBatch() complete")
+	logger.Debugf("postprocessing ProtoBlock for block %d...", block.Header.Number)
+	postprocessProtoBlock(block, txsFilter, internalBlock, util.TxFilterAcceptAll)
+	logger.Debugf("ValidateAndPrepareBatch() for block %d complete", block.Header.Number)
 	return &privacyenabledstate.UpdateBatch{
 		PubUpdates:  pubAndHashUpdates.PubUpdates,
 		HashUpdates: pubAndHashUpdates.HashUpdates,
