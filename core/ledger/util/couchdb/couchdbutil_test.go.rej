diff a/core/ledger/util/couchdb/couchdbutil_test.go b/core/ledger/util/couchdb/couchdbutil_test.go	(rejected hunks)
@@ -22,7 +22,7 @@ func TestCreateCouchDBConnectionAndDB(t *testing.T) {
 	defer cleanup(database)
 	//create a new connection
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to CreateCouchInstance"))
 
 	_, err = CreateCouchDatabase(couchInstance, database)
@@ -30,6 +30,31 @@ func TestCreateCouchDBConnectionAndDB(t *testing.T) {
 
 }
 
+//Unit test of couch db util functionality
+func TestNotCreateCouchGlobalChangesDB(t *testing.T) {
+	value := couchDBDef.CreateGlobalChangesDB
+	couchDBDef.CreateGlobalChangesDB = false
+	defer resetCreateGlobalChangesDBValue(value)
+	database := "_global_changes"
+	cleanup(database)
+	defer cleanup(database)
+
+	//create a new connection
+	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
+	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to CreateCouchInstance"))
+
+	db := CouchDatabase{CouchInstance: couchInstance, DBName: "_global_changes"}
+
+	//Retrieve the info for the new database and make sure the name matches
+	_, errdb := db.GetDatabaseInfo()
+	testutil.AssertNotNil(t, errdb)
+}
+
+func resetCreateGlobalChangesDBValue(value bool) {
+	couchDBDef.CreateGlobalChangesDB = value
+}
+
 //Unit test of couch db util functionality
 func TestCreateCouchDBSystemDBs(t *testing.T) {
 
@@ -39,7 +64,7 @@ func TestCreateCouchDBSystemDBs(t *testing.T) {
 
 	//create a new connection
 	couchInstance, err := CreateCouchInstance(couchDBDef.URL, couchDBDef.Username, couchDBDef.Password,
-		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout)
+		couchDBDef.MaxRetries, couchDBDef.MaxRetriesOnStartup, couchDBDef.RequestTimeout, couchDBDef.CreateGlobalChangesDB)
 
 	testutil.AssertNoError(t, err, fmt.Sprintf("Error when trying to CreateCouchInstance"))
 
@@ -49,25 +74,26 @@ func TestCreateCouchDBSystemDBs(t *testing.T) {
 	db := CouchDatabase{CouchInstance: couchInstance, DBName: "_users"}
 
 	//Retrieve the info for the new database and make sure the name matches
-	dbResp, _, errdb := db.GetDatabaseInfo()
+	dbResp, errdb := db.GetDatabaseInfo()
 	testutil.AssertNoError(t, errdb, fmt.Sprintf("Error when trying to retrieve _users database information"))
 	testutil.AssertEquals(t, dbResp.DbName, "_users")
 
 	db = CouchDatabase{CouchInstance: couchInstance, DBName: "_replicator"}
 
 	//Retrieve the info for the new database and make sure the name matches
-	dbResp, _, errdb = db.GetDatabaseInfo()
+	dbResp, errdb = db.GetDatabaseInfo()
 	testutil.AssertNoError(t, errdb, fmt.Sprintf("Error when trying to retrieve _replicator database information"))
 	testutil.AssertEquals(t, dbResp.DbName, "_replicator")
 
 	db = CouchDatabase{CouchInstance: couchInstance, DBName: "_global_changes"}
 
 	//Retrieve the info for the new database and make sure the name matches
-	dbResp, _, errdb = db.GetDatabaseInfo()
+	dbResp, errdb = db.GetDatabaseInfo()
 	testutil.AssertNoError(t, errdb, fmt.Sprintf("Error when trying to retrieve _global_changes database information"))
 	testutil.AssertEquals(t, dbResp.DbName, "_global_changes")
 
 }
+
 func TestDatabaseMapping(t *testing.T) {
 	//create a new instance and database object using a database name mixed case
 	_, err := mapAndValidateDatabaseName("testDB")
@@ -114,6 +140,66 @@ func TestConstructMetadataDBName(t *testing.T) {
 	testutil.AssertEquals(t, constructedDBName, expectedDBName)
 }
 
+func TestBlockchainDBNames(t *testing.T) {
+	constructedDBName := ConstructBlockchainDBName("traders", "")
+	expectedDBName := "traders_"
+	testutil.AssertEquals(t, constructedDBName, expectedDBName)
+
+	constructedDBName = ConstructBlockchainDBName("traders", "blocks")
+	expectedDBName = "traders$$blocks_"
+	testutil.AssertEquals(t, constructedDBName, expectedDBName)
+}
+
+func TestTruncatedBlockchainDBNames(t *testing.T) {
+	testTruncatedBlockchainDBName(t, "")
+	testTruncatedBlockchainDBName(t, "blocks")
+}
+
+func testTruncatedBlockchainDBName(t *testing.T, dbName string) {
+	// Allowed pattern for chainName: [a-z][a-z0-9.-]
+	chainName := "tob2g.y-z0f.qwp-rq5g4-ogid5g6oucyryg9sc16mz0t4vuake5q557esz7sn493nf0ghch0xih6dwuirokyoi4jvs67gh6r5v6mhz3-292un2-9egdcs88cstg3f7xa9m1i8v4gj0t3jedsm-woh3kgiqehwej6h93hdy5tr4v.1qmmqjzz0ox62k.507sh3fkw3-mfqh.ukfvxlm5szfbwtpfkd1r4j.cy8oft5obvwqpzjxb27xuw6"
+
+	truncatedChainName := "tob2g.y-z0f.qwp-rq5g4-ogid5g6oucyryg9sc16mz0t4vuak"
+	testutil.AssertEquals(t, len(truncatedChainName), chainNameAllowedLength)
+
+	// <first 50 chars (i.e., chainNameAllowedLength) of chainName> + 1 char for '(' + <64 chars for SHA256 hash
+	// (hex encoding) of untruncated chainName> + 1 char for ')' + 1 char for '_' = 117 chars
+	// plus 2 for $$ seperator + length of the dbName
+	hash := hex.EncodeToString(util.ComputeSHA256([]byte(chainName + "$$" + dbName)))
+	expectedDBName := truncatedChainName + "$$" + dbName + "(" + hash + ")" + "_"
+	expectedDBNameLength := 119 + len(dbName)
+
+	if len(dbName) == 0 {
+		hash = hex.EncodeToString(util.ComputeSHA256([]byte(chainName)))
+		expectedDBName = truncatedChainName + "(" + hash + ")" + "_"
+		expectedDBNameLength = 117
+	}
+
+	constructedDBName := ConstructBlockchainDBName(chainName, dbName)
+	testutil.AssertEquals(t, len(constructedDBName), expectedDBNameLength)
+	testutil.AssertEquals(t, constructedDBName, expectedDBName)
+}
+
+
+func TestConstructBlockchainDBName(t *testing.T) {
+	// Allowed pattern for chainName: [a-z][a-z0-9.-]
+	chainName := "tob2g.y-z0f.qwp-rq5g4-ogid5g6oucyryg9sc16mz0t4vuake5q557esz7sn493nf0ghch0xih6dwuirokyoi4jvs67gh6r5v6mhz3-292un2-9egdcs88cstg3f7xa9m1i8v4gj0t3jedsm-woh3kgiqehwej6h93hdy5tr4v.1qmmqjzz0ox62k.507sh3fkw3-mfqh.ukfvxlm5szfbwtpfkd1r4j.cy8oft5obvwqpzjxb27xuw6"
+
+	truncatedChainName := "tob2g.y-z0f.qwp-rq5g4-ogid5g6oucyryg9sc16mz0t4vuak"
+	testutil.AssertEquals(t, len(truncatedChainName), chainNameAllowedLength)
+
+	// <first 50 chars (i.e., chainNameAllowedLength) of chainName> + 1 char for '(' + <64 chars for SHA256 hash
+	// (hex encoding) of untruncated chainName> + 1 char for ')' + 1 char for '_' = 117 chars
+	hash := hex.EncodeToString(util.ComputeSHA256([]byte(chainName)))
+	expectedDBName := truncatedChainName + "(" + hash + ")" + "_"
+	expectedDBNameLength := 117
+
+	constructedDBName := ConstructMetadataDBName(chainName)
+	testutil.AssertEquals(t, len(constructedDBName), expectedDBNameLength)
+	testutil.AssertEquals(t, constructedDBName, expectedDBName)
+
+}
+
 func TestConstructedNamespaceDBName(t *testing.T) {
 	// === SCENARIO 1: chainName_ns$$coll ===
 
